test_case,faulty,test_code
"org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinearDegenerateTwoSegment",0,"public void testInterpolateLinearDegenerateTwoSegment()throws Exception {double x[]={0.0,0.5,1.0};double y[]={0.0,0.5,1.0};UnivariateRealInterpolator i=new SplineInterpolator();UnivariateRealFunction f=i.interpolate(x,y);verifyInterpolation(f,x,y);verifyConsistency((PolynomialSplineFunction)f,x);PolynomialFunction polynomials[]=((PolynomialSplineFunction)f).getPolynomials();double target[]={y[0],1d,0d,0d};TestUtils.assertEquals(polynomials[0].getCoefficients(),target,coefficientTolerance);target=new double[]{y[1],1d,0d,0d};TestUtils.assertEquals(polynomials[1].getCoefficients(),target,coefficientTolerance);assertEquals(0.0,f.value(0.0),interpolationTolerance);assertEquals(0.4,f.value(0.4),interpolationTolerance);assertEquals(1.0,f.value(1.0),interpolationTolerance);}"
"org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinearDegenerateThreeSegment",0,"public void testInterpolateLinearDegenerateThreeSegment()throws Exception {double x[]={0.0,0.5,1.0,1.5};double y[]={0.0,0.5,1.0,1.5};UnivariateRealInterpolator i=new SplineInterpolator();UnivariateRealFunction f=i.interpolate(x,y);verifyInterpolation(f,x,y);PolynomialFunction polynomials[]=((PolynomialSplineFunction)f).getPolynomials();double target[]={y[0],1d,0d,0d};TestUtils.assertEquals(polynomials[0].getCoefficients(),target,coefficientTolerance);target=new double[]{y[1],1d,0d,0d};TestUtils.assertEquals(polynomials[1].getCoefficients(),target,coefficientTolerance);target=new double[]{y[2],1d,0d,0d};TestUtils.assertEquals(polynomials[2].getCoefficients(),target,coefficientTolerance);assertEquals(0,f.value(0),interpolationTolerance);assertEquals(1.4,f.value(1.4),interpolationTolerance);assertEquals(1.5,f.value(1.5),interpolationTolerance);}"
"org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinear",0,"public void testInterpolateLinear()throws Exception {double x[]={0.0,0.5,1.0};double y[]={0.0,0.5,0.0};UnivariateRealInterpolator i=new SplineInterpolator();UnivariateRealFunction f=i.interpolate(x,y);verifyInterpolation(f,x,y);verifyConsistency((PolynomialSplineFunction)f,x);PolynomialFunction polynomials[]=((PolynomialSplineFunction)f).getPolynomials();double target[]={y[0],1.5d,0d,-2d};TestUtils.assertEquals(polynomials[0].getCoefficients(),target,coefficientTolerance);target=new double[]{y[1],0d,-3d,2d};TestUtils.assertEquals(polynomials[1].getCoefficients(),target,coefficientTolerance);}"
"org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateSin",0,"public void testInterpolateSin()throws Exception {double x[]={0.0,Math.PI / 6d,Math.PI / 2d,5d * Math.PI / 6d,Math.PI,7d * Math.PI / 6d,3d * Math.PI / 2d,11d * Math.PI / 6d,2.d * Math.PI};double y[]={0d,0.5d,1d,0.5d,0d,-0.5d,-1d,-0.5d,0d};UnivariateRealInterpolator i=new SplineInterpolator();UnivariateRealFunction f=i.interpolate(x,y);verifyInterpolation(f,x,y);verifyConsistency((PolynomialSplineFunction)f,x);PolynomialFunction polynomials[]=((PolynomialSplineFunction)f).getPolynomials();double target[]={y[0],1.002676d,0d,-0.17415829d};TestUtils.assertEquals(polynomials[0].getCoefficients(),target,coefficientTolerance);target=new double[]{y[1],8.594367e-01,-2.735672e-01,-0.08707914};TestUtils.assertEquals(polynomials[1].getCoefficients(),target,coefficientTolerance);target=new double[]{y[2],1.471804e-17,-5.471344e-01,0.08707914};TestUtils.assertEquals(polynomials[2].getCoefficients(),target,coefficientTolerance);target=new double[]{y[3],-8.594367e-01,-2.735672e-01,0.17415829};TestUtils.assertEquals(polynomials[3].getCoefficients(),target,coefficientTolerance);target=new double[]{y[4],-1.002676,6.548562e-17,0.17415829};TestUtils.assertEquals(polynomials[4].getCoefficients(),target,coefficientTolerance);target=new double[]{y[5],-8.594367e-01,2.735672e-01,0.08707914};TestUtils.assertEquals(polynomials[5].getCoefficients(),target,coefficientTolerance);target=new double[]{y[6],3.466465e-16,5.471344e-01,-0.08707914};TestUtils.assertEquals(polynomials[6].getCoefficients(),target,coefficientTolerance);target=new double[]{y[7],8.594367e-01,2.735672e-01,-0.17415829};TestUtils.assertEquals(polynomials[7].getCoefficients(),target,coefficientTolerance);assertEquals(Math.sqrt(2d)/ 2d,f.value(Math.PI / 4d),interpolationTolerance);assertEquals(Math.sqrt(2d)/ 2d,f.value(3d * Math.PI / 4d),interpolationTolerance);}"
"org.apache.commons.math.analysis.SplineInterpolatorTest.testIllegalArguments",0,"public void testIllegalArguments()throws MathException {UnivariateRealInterpolator i=new SplineInterpolator();try {double xval[]={0.0,1.0};double yval[]={0.0,1.0,2.0};i.interpolate(xval,yval);fail(""Failed to detect data set array with different sizes."");}catch(IllegalArgumentException iae){}try {double xval[]={0.0,1.0,0.5};double yval[]={0.0,1.0,2.0};i.interpolate(xval,yval);fail(""Failed to detect unsorted arguments."");}catch(IllegalArgumentException iae){}}"
"org.apache.commons.math.util.DefaultTransformerTest.testTransformDouble",0,"/** */public void testTransformDouble()throws Exception {double expected=1.0;Double input=Double.valueOf(expected);DefaultTransformer t=new DefaultTransformer();assertEquals(expected,t.transform(input),1.0e-4);}"
"org.apache.commons.math.util.DefaultTransformerTest.testTransformNull",0,"/** */public void testTransformNull(){DefaultTransformer t=new DefaultTransformer();try {t.transform(null);fail(""Expection MathException"");}catch(MathException e){}}"
"org.apache.commons.math.util.DefaultTransformerTest.testTransformInteger",0,"/** */public void testTransformInteger()throws Exception {double expected=1.0;Integer input=Integer.valueOf(1);DefaultTransformer t=new DefaultTransformer();assertEquals(expected,t.transform(input),1.0e-4);}"
"org.apache.commons.math.util.DefaultTransformerTest.testTransformBigDecimal",0,"/** */public void testTransformBigDecimal()throws Exception {double expected=1.0;BigDecimal input=new BigDecimal(""1.0"");DefaultTransformer t=new DefaultTransformer();assertEquals(expected,t.transform(input),1.0e-4);}"
"org.apache.commons.math.util.DefaultTransformerTest.testTransformString",0,"/** */public void testTransformString()throws Exception {double expected=1.0;String input=""1.0"";DefaultTransformer t=new DefaultTransformer();assertEquals(expected,t.transform(input),1.0e-4);}"
"org.apache.commons.math.util.DefaultTransformerTest.testTransformObject",0,"/** */public void testTransformObject(){Boolean input=Boolean.TRUE;DefaultTransformer t=new DefaultTransformer();try {t.transform(input);fail(""Expecting MathException"");}catch(MathException e){}}"
"org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.testNaN",0,"/** * Make sure Double.NaN is returned iff n = 0*/public void testNaN(){StandardDeviation std=new StandardDeviation();assertTrue(Double.isNaN(std.getResult()));std.increment(1d);assertEquals(0d,std.getResult(),0);}"
"org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.testPopulation",0,"/** * Test population version of variance*/public void testPopulation(){double[]values={-1.0d,3.1d,4.0d,-2.1d,22d,11.7d,3d,14d};double sigma=populationStandardDeviation(values);SecondMoment m=new SecondMoment();m.evaluate(values);StandardDeviation s1=new StandardDeviation();s1.setBiasCorrected(false);assertEquals(sigma,s1.evaluate(values),1E-14);s1.incrementAll(values);assertEquals(sigma,s1.getResult(),1E-14);s1=new StandardDeviation(false,m);assertEquals(sigma,s1.getResult(),1E-14);s1=new StandardDeviation(false);assertEquals(sigma,s1.evaluate(values),1E-14);s1.incrementAll(values);assertEquals(sigma,s1.getResult(),1E-14);}"
"org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.testDimensionCheck",0,"public void testDimensionCheck(){try {TestProblem1 pb=new TestProblem1();new EulerIntegrator(0.01).integrate(pb,0.0,new double[pb.getDimension()+ 10],1.0,new double[pb.getDimension()+ 10]);fail(""an exception should have been thrown"");}catch(DerivativeException de){fail(""wrong exception caught"");}catch(IntegratorException ie){}}"
"org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.testDecreasingSteps",0,"public void testDecreasingSteps()throws DerivativeException,IntegratorException {TestProblemAbstract[]problems=TestProblemFactory.getProblems();for (int k=0;k < problems.length;++k){double previousError=Double.NaN;for (int i=4;i < 10;++i){TestProblemAbstract pb=(TestProblemAbstract)problems[k].clone();double step=(pb.getFinalTime()- pb.getInitialTime())* Math.pow(2.0,-i);FirstOrderIntegrator integ=new EulerIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);EventHandler[]functions=pb.getEventsHandlers();for (int l=0;l < functions.length;++l){integ.addEventHandler(functions[l],Double.POSITIVE_INFINITY,1.0e-6 * step,1000);}double stopTime=integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);if (functions.length == 0){assertEquals(pb.getFinalTime(),stopTime,1.0e-10);}double error=handler.getMaximalValueError();if (i > 4){assertTrue(error < Math.abs(previousError));}previousError=error;assertEquals(0,handler.getMaximalTimeError(),1.0e-12);}}}"
"org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.testSmallStep",0,"public void testSmallStep()throws DerivativeException,IntegratorException {TestProblem1 pb=new TestProblem1();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.001;FirstOrderIntegrator integ=new EulerIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.getLastError()< 2.0e-4);assertTrue(handler.getMaximalValueError()< 1.0e-3);assertEquals(0,handler.getMaximalTimeError(),1.0e-12);assertEquals(""Euler"",integ.getName());}"
"org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.testBigStep",0,"public void testBigStep()throws DerivativeException,IntegratorException {TestProblem1 pb=new TestProblem1();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.2;FirstOrderIntegrator integ=new EulerIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.getLastError()> 0.01);assertTrue(handler.getMaximalValueError()> 0.2);assertEquals(0,handler.getMaximalTimeError(),1.0e-12);}"
"org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.testBackward",0,"public void testBackward()throws DerivativeException,IntegratorException {TestProblem5 pb=new TestProblem5();double step=Math.abs(pb.getFinalTime()- pb.getInitialTime())* 0.001;FirstOrderIntegrator integ=new EulerIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.getLastError()< 0.45);assertTrue(handler.getMaximalValueError()< 0.45);assertEquals(0,handler.getMaximalTimeError(),1.0e-12);assertEquals(""Euler"",integ.getName());}"
"org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.testStepSize",0,"public void testStepSize()throws DerivativeException,IntegratorException {final double step=1.23456;FirstOrderIntegrator integ=new EulerIntegrator(step);integ.addStepHandler(new StepHandler(){private static final long serialVersionUID=0L;public void handleStep(StepInterpolator interpolator,boolean isLast){if (!isLast){assertEquals(step,interpolator.getCurrentTime()- interpolator.getPreviousTime(),1.0e-12);}}public boolean requiresDenseOutput(){return false;}public void reset(){}});integ.integrate(new FirstOrderDifferentialEquations(){private static final long serialVersionUID=0L;public void computeDerivatives(double t,double[]y,double[]dot){dot[0]=1.0;}public int getDimension(){return 1;}},0.0,new double[]{0.0},5.0,new double[1]);}"
"org.apache.commons.math.transform.FastFourierTransformerTest.testAdHocData",0,"/** * Test of transformer for the ad hoc data taken from Mathematica.*/public void testAdHocData()throws MathException {FastFourierTransformer transformer=new FastFourierTransformer();Complex result[];double tolerance=1E-12;double x[]={1.3,2.4,1.7,4.1,2.9,1.7,5.1,2.7};Complex y[]={new Complex(21.9,0.0),new Complex(-2.09497474683058,1.91507575950825),new Complex(-2.6,2.7),new Complex(-1.10502525316942,-4.88492424049175),new Complex(0.1,0.0),new Complex(-1.10502525316942,4.88492424049175),new Complex(-2.6,-2.7),new Complex(-2.09497474683058,-1.91507575950825)};result=transformer.transform(x);for (int i=0;i < result.length;i++){assertEquals(y[i].getReal(),result[i].getReal(),tolerance);assertEquals(y[i].getImaginary(),result[i].getImaginary(),tolerance);}result=transformer.inversetransform(y);for (int i=0;i < result.length;i++){assertEquals(x[i],result[i].getReal(),tolerance);assertEquals(0.0,result[i].getImaginary(),tolerance);}double x2[]={10.4,21.6,40.8,13.6,23.2,32.8,13.6,19.2};FastFourierTransformer.scaleArray(x2,1.0 / Math.sqrt(x2.length));Complex y2[]=y;result=transformer.transform2(y2);for (int i=0;i < result.length;i++){assertEquals(x2[i],result[i].getReal(),tolerance);assertEquals(0.0,result[i].getImaginary(),tolerance);}result=transformer.inversetransform2(x2);for (int i=0;i < result.length;i++){assertEquals(y2[i].getReal(),result[i].getReal(),tolerance);assertEquals(y2[i].getImaginary(),result[i].getImaginary(),tolerance);}}"
"org.apache.commons.math.transform.FastFourierTransformerTest.test2DData",0,"public void test2DData()throws MathException {FastFourierTransformer transformer=new FastFourierTransformer();double tolerance=1E-12;Complex[][]input=new Complex[][]{new Complex[]{new Complex(1,0),new Complex(2,0)},new Complex[]{new Complex(3,1),new Complex(4,2)}};Complex[][]goodOutput=new Complex[][]{new Complex[]{new Complex(5,1.5),new Complex(-1,-.5)},new Complex[]{new Complex(-2,-1.5),new Complex(0,.5)}};Complex[][]output=(Complex[][])transformer.mdfft(input,true);Complex[][]output2=(Complex[][])transformer.mdfft(output,false);assertEquals(input.length,output.length);assertEquals(input.length,output2.length);assertEquals(input[0].length,output[0].length);assertEquals(input[0].length,output2[0].length);assertEquals(input[1].length,output[1].length);assertEquals(input[1].length,output2[1].length);for (int i=0;i < input.length;i++){for (int j=0;j < input[0].length;j++){assertEquals(input[i][j].getImaginary(),output2[i][j].getImaginary(),tolerance);assertEquals(input[i][j].getReal(),output2[i][j].getReal(),tolerance);assertEquals(goodOutput[i][j].getImaginary(),output[i][j].getImaginary(),tolerance);assertEquals(goodOutput[i][j].getReal(),output[i][j].getReal(),tolerance);}}}"
"org.apache.commons.math.transform.FastFourierTransformerTest.testSinFunction",0,"/** * Test of transformer for the sine function.*/public void testSinFunction()throws MathException {UnivariateRealFunction f=new SinFunction();FastFourierTransformer transformer=new FastFourierTransformer();Complex result[];int N=1 << 8;double min,max,tolerance=1E-12;min=0.0;max=2.0 * Math.PI;result=transformer.transform(f,min,max,N);assertEquals(0.0,result[1].getReal(),tolerance);assertEquals(-(N >> 1),result[1].getImaginary(),tolerance);assertEquals(0.0,result[N - 1].getReal(),tolerance);assertEquals(N >> 1,result[N - 1].getImaginary(),tolerance);for (int i=0;i < N - 1;i+=(i == 0 ? 2 : 1)){assertEquals(0.0,result[i].getReal(),tolerance);assertEquals(0.0,result[i].getImaginary(),tolerance);}min=-Math.PI;max=Math.PI;result=transformer.inversetransform(f,min,max,N);assertEquals(0.0,result[1].getReal(),tolerance);assertEquals(-0.5,result[1].getImaginary(),tolerance);assertEquals(0.0,result[N - 1].getReal(),tolerance);assertEquals(0.5,result[N - 1].getImaginary(),tolerance);for (int i=0;i < N - 1;i+=(i == 0 ? 2 : 1)){assertEquals(0.0,result[i].getReal(),tolerance);assertEquals(0.0,result[i].getImaginary(),tolerance);}}"
"org.apache.commons.math.transform.FastFourierTransformerTest.testParameters",0,"/** * Test of parameters for the transformer.*/public void testParameters()throws Exception {UnivariateRealFunction f=new SinFunction();FastFourierTransformer transformer=new FastFourierTransformer();try {transformer.transform(f,1,-1,64);fail(""Expecting IllegalArgumentException - bad interval"");}catch(IllegalArgumentException ex){}try {transformer.transform(f,-1,1,0);fail(""Expecting IllegalArgumentException - bad samples number"");}catch(IllegalArgumentException ex){}try {transformer.transform(f,-1,1,100);fail(""Expecting IllegalArgumentException - bad samples number"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateNoFailures",0,"/** * Verify that if there are no failures,mass is concentrated on sampleSize */public void testDegenerateNoFailures()throws Exception {setDistribution(new HypergeometricDistributionImpl(5,5,3));setCumulativeTestPoints(new int[]{-1,0,1,3,10});setCumulativeTestValues(new double[]{0d,0d,0d,1d,1d});setDensityTestPoints(new int[]{-1,0,1,3,10});setDensityTestValues(new double[]{0d,0d,0d,1d,0d});setInverseCumulativeTestPoints(new double[]{0.1d,0.5d});setInverseCumulativeTestValues(new int[]{2,2});verifyDensities();verifyCumulativeProbabilities();verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses",0,"/** * Verify that if there are no successes,mass is concentrated on 0 */public void testDegenerateNoSuccesses()throws Exception {setDistribution(new HypergeometricDistributionImpl(5,0,3));setCumulativeTestPoints(new int[]{-1,0,1,3,10});setCumulativeTestValues(new double[]{0d,1d,1d,1d,1d});setDensityTestPoints(new int[]{-1,0,1,3,10});setDensityTestValues(new double[]{0d,1d,0d,0d,0d});setInverseCumulativeTestPoints(new double[]{0.1d,0.5d});setInverseCumulativeTestValues(new int[]{-1,-1});verifyDensities();verifyCumulativeProbabilities();verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateFullSample",0,"/** * Verify that if sampleSize = populationSize,mass is concentrated on numberOfSuccesses */public void testDegenerateFullSample()throws Exception {setDistribution(new HypergeometricDistributionImpl(5,3,5));setCumulativeTestPoints(new int[]{-1,0,1,3,10});setCumulativeTestValues(new double[]{0d,0d,0d,1d,1d});setDensityTestPoints(new int[]{-1,0,1,3,10});setDensityTestValues(new double[]{0d,0d,0d,1d,0d});setInverseCumulativeTestPoints(new double[]{0.1d,0.5d});setInverseCumulativeTestValues(new int[]{2,2});verifyDensities();verifyCumulativeProbabilities();verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math.distribution.HypergeometricDistributionTest.testPopulationSize",0,"public void testPopulationSize(){HypergeometricDistribution dist=new HypergeometricDistributionImpl(5,3,5);try {dist.setPopulationSize(-1);fail(""negative population size.  IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}dist.setPopulationSize(10);assertEquals(10,dist.getPopulationSize());}"
"org.apache.commons.math.distribution.HypergeometricDistributionTest.testLargeValues",0,"public void testLargeValues(){int populationSize=3456;int sampleSize=789;int numberOfSucceses=101;double[][]data={{0.0,2.75646034603961e-12,2.75646034603961e-12,1.0},{1.0,8.55705370142386e-11,8.83269973602783e-11,0.999999999997244},{2.0,1.31288129219665e-9,1.40120828955693e-9,0.999999999911673},{3.0,1.32724172984193e-8,1.46736255879763e-8,0.999999998598792},{4.0,9.94501711734089e-8,1.14123796761385e-7,0.999999985326375},{5.0,5.89080768883643e-7,7.03204565645028e-7,0.999999885876203},{20.0,0.0760051397707708,0.27349758476299,0.802507555007781},{21.0,0.087144222047629,0.360641806810619,0.72650241523701},{22.0,0.0940378846881819,0.454679691498801,0.639358193189381},{23.0,0.0956897500614809,0.550369441560282,0.545320308501199},{24.0,0.0919766921922999,0.642346133752582,0.449630558439718},{25.0,0.083641637261095,0.725987771013677,0.357653866247418},{96.0,5.93849188852098e-57,1.0,6.01900244560712e-57},{97.0,7.96593036832547e-59,1.0,8.05105570861321e-59},{98.0,8.44582921934367e-61,1.0,8.5125340287733e-61},{99.0,6.63604297068222e-63,1.0,6.670480942963e-63},{100.0,3.43501099007557e-65,1.0,3.4437972280786e-65},{101.0,8.78623800302957e-68,1.0,8.78623800302957e-68}};testHypergeometricDistributionProbabilities(populationSize,sampleSize,numberOfSucceses,data);}"
"org.apache.commons.math.distribution.HypergeometricDistributionTest.testMoreLargeValues",0,"public void testMoreLargeValues(){int populationSize=26896;int sampleSize=895;int numberOfSucceses=55;double[][]data={{0.0,0.155168304750504,0.155168304750504,1.0},{1.0,0.29437545000746,0.449543754757964,0.844831695249496},{2.0,0.273841321577003,0.723385076334967,0.550456245242036},{3.0,0.166488572570786,0.889873648905753,0.276614923665033},{4.0,0.0743969744713231,0.964270623377076,0.110126351094247},{5.0,0.0260542785784855,0.990324901955562,0.0357293766229237},{20.0,3.57101101678792e-16,1.0,3.78252101622096e-16},{21.0,2.00551638598312e-17,1.0,2.11509999433041e-17},{22.0,1.04317070180562e-18,1.0,1.09583608347287e-18},{23.0,5.03153504903308e-20,1.0,5.266538166725e-20},{24.0,2.2525984149695e-21,1.0,2.35003117691919e-21},{25.0,9.3677424515947e-23,1.0,9.74327619496943e-23},{50.0,9.83633962945521e-69,1.0,9.8677629437617e-69},{51.0,3.13448949497553e-71,1.0,3.14233143064882e-71},{52.0,7.82755221928122e-74,1.0,7.84193567329055e-74},{53.0,1.43662126065532e-76,1.0,1.43834540093295e-76},{54.0,1.72312692517348e-79,1.0,1.7241402776278e-79},{55.0,1.01335245432581e-82,1.0,1.01335245432581e-82}};testHypergeometricDistributionProbabilities(populationSize,sampleSize,numberOfSucceses,data);}"
"org.apache.commons.math.linear.LUDecompositionImplTest.testDimensions",0,"/** * test dimensions */public void testDimensions(){RealMatrix matrix=MatrixUtils.createRealMatrix(testData);LUDecomposition LU=new LUDecompositionImpl(matrix);assertEquals(testData.length,LU.getL().getRowDimension());assertEquals(testData.length,LU.getL().getColumnDimension());assertEquals(testData.length,LU.getU().getRowDimension());assertEquals(testData.length,LU.getU().getColumnDimension());assertEquals(testData.length,LU.getP().getRowDimension());assertEquals(testData.length,LU.getP().getColumnDimension());}"
"org.apache.commons.math.linear.LUDecompositionImplTest.testNonSquare",0,"/** * test non-square matrix */public void testNonSquare(){try {new LUDecompositionImpl(MatrixUtils.createRealMatrix(new double[3][2]));}catch(InvalidMatrixException ime){}catch(Exception e){fail(""wrong exception caught"");}}"
"org.apache.commons.math.linear.LUDecompositionImplTest.testPAEqualLU",0,"/** * test PA = LU */public void testPAEqualLU(){RealMatrix matrix=MatrixUtils.createRealMatrix(testData);LUDecomposition lu=new LUDecompositionImpl(matrix);RealMatrix l=lu.getL();RealMatrix u=lu.getU();RealMatrix p=lu.getP();double norm=l.multiply(u).subtract(p.multiply(matrix)).getNorm();assertEquals(0,norm,normTolerance);matrix=MatrixUtils.createRealMatrix(testDataMinus);lu=new LUDecompositionImpl(matrix);l=lu.getL();u=lu.getU();p=lu.getP();norm=l.multiply(u).subtract(p.multiply(matrix)).getNorm();assertEquals(0,norm,normTolerance);matrix=MatrixUtils.createRealIdentityMatrix(17);lu=new LUDecompositionImpl(matrix);l=lu.getL();u=lu.getU();p=lu.getP();norm=l.multiply(u).subtract(p.multiply(matrix)).getNorm();assertEquals(0,norm,normTolerance);matrix=MatrixUtils.createRealMatrix(singular);lu=new LUDecompositionImpl(matrix);assertFalse(lu.getSolver().isNonSingular());assertNull(lu.getL());assertNull(lu.getU());assertNull(lu.getP());matrix=MatrixUtils.createRealMatrix(bigSingular);lu=new LUDecompositionImpl(matrix);assertFalse(lu.getSolver().isNonSingular());assertNull(lu.getL());assertNull(lu.getU());assertNull(lu.getP());}"
"org.apache.commons.math.linear.LUDecompositionImplTest.testLLowerTriangular",0,"/** * test that L is lower triangular with unit diagonal */public void testLLowerTriangular(){RealMatrix matrix=MatrixUtils.createRealMatrix(testData);RealMatrix l=new LUDecompositionImpl(matrix).getL();for (int i=0;i < l.getRowDimension();i++){assertEquals(l.getEntry(i,i),1,entryTolerance);for (int j=i + 1;j < l.getColumnDimension();j++){assertEquals(l.getEntry(i,j),0,entryTolerance);}}}"
"org.apache.commons.math.linear.LUDecompositionImplTest.testUUpperTriangular",0,"/** * test that U is upper triangular */public void testUUpperTriangular(){RealMatrix matrix=MatrixUtils.createRealMatrix(testData);RealMatrix u=new LUDecompositionImpl(matrix).getU();for (int i=0;i < u.getRowDimension();i++){for (int j=0;j < i;j++){assertEquals(u.getEntry(i,j),0,entryTolerance);}}}"
"org.apache.commons.math.linear.LUDecompositionImplTest.testPPermutation",0,"/** * test that P is a permutation matrix */public void testPPermutation(){RealMatrix matrix=MatrixUtils.createRealMatrix(testData);RealMatrix p=new LUDecompositionImpl(matrix).getP();RealMatrix ppT=p.multiply(p.transpose());RealMatrix id=MatrixUtils.createRealIdentityMatrix(p.getRowDimension());assertEquals(0,ppT.subtract(id).getNorm(),normTolerance);for (int i=0;i < p.getRowDimension();i++){int zeroCount=0;int oneCount=0;int otherCount=0;for (int j=0;j < p.getColumnDimension();j++){final double e=p.getEntry(i,j);if (e == 0){++zeroCount;}else       if (e == 1){++oneCount;}else {++otherCount;}}assertEquals(p.getColumnDimension()- 1,zeroCount);assertEquals(1,oneCount);assertEquals(0,otherCount);}for (int j=0;j < p.getColumnDimension();j++){int zeroCount=0;int oneCount=0;int otherCount=0;for (int i=0;i < p.getRowDimension();i++){final double e=p.getEntry(i,j);if (e == 0){++zeroCount;}else       if (e == 1){++oneCount;}else {++otherCount;}}assertEquals(p.getRowDimension()- 1,zeroCount);assertEquals(1,oneCount);assertEquals(0,otherCount);}}"
"org.apache.commons.math.linear.LUDecompositionImplTest.testSingular",0,"/** * test singular */public void testSingular(){LUDecomposition lu=new LUDecompositionImpl(MatrixUtils.createRealMatrix(testData));assertTrue(lu.getSolver().isNonSingular());lu=new LUDecompositionImpl(MatrixUtils.createRealMatrix(singular));assertFalse(lu.getSolver().isNonSingular());lu=new LUDecompositionImpl(MatrixUtils.createRealMatrix(bigSingular));assertFalse(lu.getSolver().isNonSingular());}"
"org.apache.commons.math.linear.LUDecompositionImplTest.testMatricesValues1",0,"/** * test matrices values */public void testMatricesValues1(){LUDecomposition lu=new LUDecompositionImpl(MatrixUtils.createRealMatrix(testData));RealMatrix lRef=MatrixUtils.createRealMatrix(new double[][]{{1.0,0.0,0.0},{0.5,1.0,0.0},{0.5,0.2,1.0}});RealMatrix uRef=MatrixUtils.createRealMatrix(new double[][]{{2.0,5.0,3.0},{0.0,-2.5,6.5},{0.0,0.0,0.2}});RealMatrix pRef=MatrixUtils.createRealMatrix(new double[][]{{0.0,1.0,0.0},{0.0,0.0,1.0},{1.0,0.0,0.0}});int[]pivotRef={1,2,0};RealMatrix l=lu.getL();assertEquals(0,l.subtract(lRef).getNorm(),1.0e-13);RealMatrix u=lu.getU();assertEquals(0,u.subtract(uRef).getNorm(),1.0e-13);RealMatrix p=lu.getP();assertEquals(0,p.subtract(pRef).getNorm(),1.0e-13);int[]pivot=lu.getPivot();for (int i=0;i < pivotRef.length;++i){assertEquals(pivotRef[i],pivot[i]);}assertTrue(l == lu.getL());assertTrue(u == lu.getU());assertTrue(p == lu.getP());}"
"org.apache.commons.math.linear.LUDecompositionImplTest.testMatricesValues2",0,"/** * test matrices values */public void testMatricesValues2(){LUDecomposition lu=new LUDecompositionImpl(MatrixUtils.createRealMatrix(luData));RealMatrix lRef=MatrixUtils.createRealMatrix(new double[][]{{1.0,0.0,0.0},{0.0,1.0,0.0},{1.0 / 3.0,0.0,1.0}});RealMatrix uRef=MatrixUtils.createRealMatrix(new double[][]{{6.0,9.0,8.0},{0.0,5.0,7.0},{0.0,0.0,1.0 / 3.0}});RealMatrix pRef=MatrixUtils.createRealMatrix(new double[][]{{0.0,0.0,1.0},{0.0,1.0,0.0},{1.0,0.0,0.0}});int[]pivotRef={2,1,0};RealMatrix l=lu.getL();assertEquals(0,l.subtract(lRef).getNorm(),1.0e-13);RealMatrix u=lu.getU();assertEquals(0,u.subtract(uRef).getNorm(),1.0e-13);RealMatrix p=lu.getP();assertEquals(0,p.subtract(pRef).getNorm(),1.0e-13);int[]pivot=lu.getPivot();for (int i=0;i < pivotRef.length;++i){assertEquals(pivotRef[i],pivot[i]);}assertTrue(l == lu.getL());assertTrue(u == lu.getU());assertTrue(p == lu.getP());}"
"org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testTrivial",0,"public void testTrivial()throws EstimationException {LinearProblem problem=new LinearProblem(new LinearMeasurement[]{new LinearMeasurement(new double[]{2},new EstimatedParameter[]{new EstimatedParameter(""p0"",0)},3.0)});GaussNewtonEstimator estimator=new GaussNewtonEstimator(100,1.0e-6,1.0e-6);estimator.estimate(problem);assertEquals(0,estimator.getRMS(problem),1.0e-10);assertEquals(1.5,problem.getUnboundParameters()[0].getEstimate(),1.0e-10);}"
"org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testQRColumnsPermutation",0,"public void testQRColumnsPermutation()throws EstimationException {EstimatedParameter[]x={new EstimatedParameter(""p0"",0),new EstimatedParameter(""p1"",0)};LinearProblem problem=new LinearProblem(new LinearMeasurement[]{new LinearMeasurement(new double[]{1.0,-1.0},new EstimatedParameter[]{x[0],x[1]},4.0),new LinearMeasurement(new double[]{2.0},new EstimatedParameter[]{x[1]},6.0),new LinearMeasurement(new double[]{1.0,-2.0},new EstimatedParameter[]{x[0],x[1]},1.0)});GaussNewtonEstimator estimator=new GaussNewtonEstimator(100,1.0e-6,1.0e-6);estimator.estimate(problem);assertEquals(0,estimator.getRMS(problem),1.0e-10);assertEquals(7.0,x[0].getEstimate(),1.0e-10);assertEquals(3.0,x[1].getEstimate(),1.0e-10);}"
"org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testNoDependency",0,"public void testNoDependency()throws EstimationException {EstimatedParameter[]p=new EstimatedParameter[]{new EstimatedParameter(""p0"",0),new EstimatedParameter(""p1"",0),new EstimatedParameter(""p2"",0),new EstimatedParameter(""p3"",0),new EstimatedParameter(""p4"",0),new EstimatedParameter(""p5"",0)};LinearProblem problem=new LinearProblem(new LinearMeasurement[]{new LinearMeasurement(new double[]{2},new EstimatedParameter[]{p[0]},0.0),new LinearMeasurement(new double[]{2},new EstimatedParameter[]{p[1]},1.1),new LinearMeasurement(new double[]{2},new EstimatedParameter[]{p[2]},2.2),new LinearMeasurement(new double[]{2},new EstimatedParameter[]{p[3]},3.3),new LinearMeasurement(new double[]{2},new EstimatedParameter[]{p[4]},4.4),new LinearMeasurement(new double[]{2},new EstimatedParameter[]{p[5]},5.5)});GaussNewtonEstimator estimator=new GaussNewtonEstimator(100,1.0e-6,1.0e-6);estimator.estimate(problem);assertEquals(0,estimator.getRMS(problem),1.0e-10);for (int i=0;i < p.length;++i){assertEquals(0.55 * i,p[i].getEstimate(),1.0e-10);}}"
"org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testOneSet",0,"public void testOneSet()throws EstimationException {EstimatedParameter[]p={new EstimatedParameter(""p0"",0),new EstimatedParameter(""p1"",0),new EstimatedParameter(""p2"",0)};LinearProblem problem=new LinearProblem(new LinearMeasurement[]{new LinearMeasurement(new double[]{1.0},new EstimatedParameter[]{p[0]},1.0),new LinearMeasurement(new double[]{-1.0,1.0},new EstimatedParameter[]{p[0],p[1]},1.0),new LinearMeasurement(new double[]{-1.0,1.0},new EstimatedParameter[]{p[1],p[2]},1.0)});GaussNewtonEstimator estimator=new GaussNewtonEstimator(100,1.0e-6,1.0e-6);estimator.estimate(problem);assertEquals(0,estimator.getRMS(problem),1.0e-10);assertEquals(1.0,p[0].getEstimate(),1.0e-10);assertEquals(2.0,p[1].getEstimate(),1.0e-10);assertEquals(3.0,p[2].getEstimate(),1.0e-10);}"
"org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testTwoSets",0,"public void testTwoSets()throws EstimationException {EstimatedParameter[]p={new EstimatedParameter(""p0"",0),new EstimatedParameter(""p1"",1),new EstimatedParameter(""p2"",2),new EstimatedParameter(""p3"",3),new EstimatedParameter(""p4"",4),new EstimatedParameter(""p5"",5)};double epsilon=1.0e-7;LinearProblem problem=new LinearProblem(new LinearMeasurement[]{new LinearMeasurement(new double[]{2.0,1.0,4.0},new EstimatedParameter[]{p[0],p[1],p[3]},2.0),new LinearMeasurement(new double[]{-4.0,-2.0,3.0,-7.0},new EstimatedParameter[]{p[0],p[1],p[2],p[3]},-9.0),new LinearMeasurement(new double[]{4.0,1.0,-2.0,8.0},new EstimatedParameter[]{p[0],p[1],p[2],p[3]},2.0),new LinearMeasurement(new double[]{-3.0,-12.0,-1.0},new EstimatedParameter[]{p[1],p[2],p[3]},2.0),new LinearMeasurement(new double[]{epsilon,1.0},new EstimatedParameter[]{p[4],p[5]},1.0 + epsilon * epsilon),new LinearMeasurement(new double[]{1.0,1.0},new EstimatedParameter[]{p[4],p[5]},2.0)});GaussNewtonEstimator estimator=new GaussNewtonEstimator(100,1.0e-6,1.0e-6);estimator.estimate(problem);assertEquals(0,estimator.getRMS(problem),1.0e-10);assertEquals(3.0,p[0].getEstimate(),1.0e-10);assertEquals(4.0,p[1].getEstimate(),1.0e-10);assertEquals(-1.0,p[2].getEstimate(),1.0e-10);assertEquals(-2.0,p[3].getEstimate(),1.0e-10);assertEquals(1.0 + epsilon,p[4].getEstimate(),1.0e-10);assertEquals(1.0 - epsilon,p[5].getEstimate(),1.0e-10);}"
"org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testNonInversible",0,"public void testNonInversible()throws EstimationException {EstimatedParameter[]p={new EstimatedParameter(""p0"",0),new EstimatedParameter(""p1"",0),new EstimatedParameter(""p2"",0)};LinearMeasurement[]m=new LinearMeasurement[]{new LinearMeasurement(new double[]{1.0,2.0,-3.0},new EstimatedParameter[]{p[0],p[1],p[2]},1.0),new LinearMeasurement(new double[]{2.0,1.0,3.0},new EstimatedParameter[]{p[0],p[1],p[2]},1.0),new LinearMeasurement(new double[]{-3.0,-9.0},new EstimatedParameter[]{p[0],p[2]},1.0)};LinearProblem problem=new LinearProblem(m);GaussNewtonEstimator estimator=new GaussNewtonEstimator(100,1.0e-6,1.0e-6);try {estimator.estimate(problem);fail(""an exception should have been caught"");}catch(EstimationException ee){}catch(Exception e){fail(""wrong exception type caught"");}}"
"org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testIllConditioned",0,"public void testIllConditioned()throws EstimationException {EstimatedParameter[]p={new EstimatedParameter(""p0"",0),new EstimatedParameter(""p1"",1),new EstimatedParameter(""p2"",2),new EstimatedParameter(""p3"",3)};LinearProblem problem1=new LinearProblem(new LinearMeasurement[]{new LinearMeasurement(new double[]{10.0,7.0,8.0,7.0},new EstimatedParameter[]{p[0],p[1],p[2],p[3]},32.0),new LinearMeasurement(new double[]{7.0,5.0,6.0,5.0},new EstimatedParameter[]{p[0],p[1],p[2],p[3]},23.0),new LinearMeasurement(new double[]{8.0,6.0,10.0,9.0},new EstimatedParameter[]{p[0],p[1],p[2],p[3]},33.0),new LinearMeasurement(new double[]{7.0,5.0,9.0,10.0},new EstimatedParameter[]{p[0],p[1],p[2],p[3]},31.0)});GaussNewtonEstimator estimator1=new GaussNewtonEstimator(100,1.0e-6,1.0e-6);estimator1.estimate(problem1);assertEquals(0,estimator1.getRMS(problem1),1.0e-10);assertEquals(1.0,p[0].getEstimate(),1.0e-10);assertEquals(1.0,p[1].getEstimate(),1.0e-10);assertEquals(1.0,p[2].getEstimate(),1.0e-10);assertEquals(1.0,p[3].getEstimate(),1.0e-10);LinearProblem problem2=new LinearProblem(new LinearMeasurement[]{new LinearMeasurement(new double[]{10.0,7.0,8.1,7.2},new EstimatedParameter[]{p[0],p[1],p[2],p[3]},32.0),new LinearMeasurement(new double[]{7.08,5.04,6.0,5.0},new EstimatedParameter[]{p[0],p[1],p[2],p[3]},23.0),new LinearMeasurement(new double[]{8.0,5.98,9.89,9.0},new EstimatedParameter[]{p[0],p[1],p[2],p[3]},33.0),new LinearMeasurement(new double[]{6.99,4.99,9.0,9.98},new EstimatedParameter[]{p[0],p[1],p[2],p[3]},31.0)});GaussNewtonEstimator estimator2=new GaussNewtonEstimator(100,1.0e-6,1.0e-6);estimator2.estimate(problem2);assertEquals(0,estimator2.getRMS(problem2),1.0e-10);assertEquals(-81.0,p[0].getEstimate(),1.0e-8);assertEquals(137.0,p[1].getEstimate(),1.0e-8);assertEquals(-34.0,p[2].getEstimate(),1.0e-8);assertEquals(22.0,p[3].getEstimate(),1.0e-8);}"
"org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testMoreEstimatedParametersSimple",0,"public void testMoreEstimatedParametersSimple()throws EstimationException {EstimatedParameter[]p={new EstimatedParameter(""p0"",7),new EstimatedParameter(""p1"",6),new EstimatedParameter(""p2"",5),new EstimatedParameter(""p3"",4)};LinearProblem problem=new LinearProblem(new LinearMeasurement[]{new LinearMeasurement(new double[]{3.0,2.0},new EstimatedParameter[]{p[0],p[1]},7.0),new LinearMeasurement(new double[]{1.0,-1.0,1.0},new EstimatedParameter[]{p[1],p[2],p[3]},3.0),new LinearMeasurement(new double[]{2.0,1.0},new EstimatedParameter[]{p[0],p[2]},5.0)});GaussNewtonEstimator estimator=new GaussNewtonEstimator(100,1.0e-6,1.0e-6);try {estimator.estimate(problem);fail(""an exception should have been caught"");}catch(EstimationException ee){}catch(Exception e){fail(""wrong exception type caught"");}}"
"org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testMoreEstimatedParametersUnsorted",0,"public void testMoreEstimatedParametersUnsorted()throws EstimationException {EstimatedParameter[]p={new EstimatedParameter(""p0"",2),new EstimatedParameter(""p1"",2),new EstimatedParameter(""p2"",2),new EstimatedParameter(""p3"",2),new EstimatedParameter(""p4"",2),new EstimatedParameter(""p5"",2)};LinearProblem problem=new LinearProblem(new LinearMeasurement[]{new LinearMeasurement(new double[]{1.0,1.0},new EstimatedParameter[]{p[0],p[1]},3.0),new LinearMeasurement(new double[]{1.0,1.0,1.0},new EstimatedParameter[]{p[2],p[3],p[4]},12.0),new LinearMeasurement(new double[]{1.0,-1.0},new EstimatedParameter[]{p[4],p[5]},-1.0),new LinearMeasurement(new double[]{1.0,-1.0,1.0},new EstimatedParameter[]{p[3],p[2],p[5]},7.0),new LinearMeasurement(new double[]{1.0,-1.0},new EstimatedParameter[]{p[4],p[3]},1.0)});GaussNewtonEstimator estimator=new GaussNewtonEstimator(100,1.0e-6,1.0e-6);try {estimator.estimate(problem);fail(""an exception should have been caught"");}catch(EstimationException ee){}catch(Exception e){fail(""wrong exception type caught"");}}"
"org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testRedundantEquations",0,"public void testRedundantEquations()throws EstimationException {EstimatedParameter[]p={new EstimatedParameter(""p0"",1),new EstimatedParameter(""p1"",1)};LinearProblem problem=new LinearProblem(new LinearMeasurement[]{new LinearMeasurement(new double[]{1.0,1.0},new EstimatedParameter[]{p[0],p[1]},3.0),new LinearMeasurement(new double[]{1.0,-1.0},new EstimatedParameter[]{p[0],p[1]},1.0),new LinearMeasurement(new double[]{1.0,3.0},new EstimatedParameter[]{p[0],p[1]},5.0)});GaussNewtonEstimator estimator=new GaussNewtonEstimator(100,1.0e-6,1.0e-6);estimator.estimate(problem);assertEquals(0,estimator.getRMS(problem),1.0e-10);EstimatedParameter[]all=problem.getAllParameters();for (int i=0;i < all.length;++i){assertEquals(all[i].getName().equals(""p0"")? 2.0 : 1.0,all[i].getEstimate(),1.0e-10);}}"
"org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testInconsistentEquations",0,"public void testInconsistentEquations()throws EstimationException {EstimatedParameter[]p={new EstimatedParameter(""p0"",1),new EstimatedParameter(""p1"",1)};LinearProblem problem=new LinearProblem(new LinearMeasurement[]{new LinearMeasurement(new double[]{1.0,1.0},new EstimatedParameter[]{p[0],p[1]},3.0),new LinearMeasurement(new double[]{1.0,-1.0},new EstimatedParameter[]{p[0],p[1]},1.0),new LinearMeasurement(new double[]{1.0,3.0},new EstimatedParameter[]{p[0],p[1]},4.0)});GaussNewtonEstimator estimator=new GaussNewtonEstimator(100,1.0e-6,1.0e-6);estimator.estimate(problem);assertTrue(estimator.getRMS(problem)> 0.1);}"
"org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testBoundParameters",0,"public void testBoundParameters()throws EstimationException {EstimatedParameter[]p={new EstimatedParameter(""unbound0"",2,false),new EstimatedParameter(""unbound1"",2,false),new EstimatedParameter(""bound"",2,true)};LinearProblem problem=new LinearProblem(new LinearMeasurement[]{new LinearMeasurement(new double[]{1.0,1.0,1.0},new EstimatedParameter[]{p[0],p[1],p[2]},3.0),new LinearMeasurement(new double[]{1.0,-1.0,1.0},new EstimatedParameter[]{p[0],p[1],p[2]},1.0),new LinearMeasurement(new double[]{1.0,3.0,2.0},new EstimatedParameter[]{p[0],p[1],p[2]},7.0)});GaussNewtonEstimator estimator=new GaussNewtonEstimator(100,1.0e-6,1.0e-6);estimator.estimate(problem);assertTrue(estimator.getRMS(problem)< 1.0e-10);double[][]covariances=estimator.getCovariances(problem);int i0=0,i1=1;if (problem.getUnboundParameters()[0].getName().endsWith(""1"")){i0=1;i1=0;}assertEquals(11.0 / 24,covariances[i0][i0],1.0e-10);assertEquals(-3.0 / 24,covariances[i0][i1],1.0e-10);assertEquals(-3.0 / 24,covariances[i1][i0],1.0e-10);assertEquals(3.0 / 24,covariances[i1][i1],1.0e-10);double[]errors=estimator.guessParametersErrors(problem);assertEquals(0,errors[i0],1.0e-10);assertEquals(0,errors[i1],1.0e-10);}"
"org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testMaxIterations",0,"public void testMaxIterations(){Circle circle=new Circle(98.680,47.345);circle.addPoint(30.0,68.0);circle.addPoint(50.0,-6.0);circle.addPoint(110.0,-20.0);circle.addPoint(35.0,15.0);circle.addPoint(45.0,97.0);try {GaussNewtonEstimator estimator=new GaussNewtonEstimator(4,1.0e-14,1.0e-14);estimator.estimate(circle);fail(""an exception should have been caught"");}catch(EstimationException ee){}catch(Exception e){fail(""wrong exception type caught"");}}"
"org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testCircleFitting",0,"public void testCircleFitting()throws EstimationException {Circle circle=new Circle(98.680,47.345);circle.addPoint(30.0,68.0);circle.addPoint(50.0,-6.0);circle.addPoint(110.0,-20.0);circle.addPoint(35.0,15.0);circle.addPoint(45.0,97.0);GaussNewtonEstimator estimator=new GaussNewtonEstimator(100,1.0e-10,1.0e-10);estimator.estimate(circle);double rms=estimator.getRMS(circle);assertEquals(1.768262623567235,Math.sqrt(circle.getM())* rms,1.0e-10);assertEquals(69.96016176931406,circle.getRadius(),1.0e-10);assertEquals(96.07590211815305,circle.getX(),1.0e-10);assertEquals(48.13516790438953,circle.getY(),1.0e-10);}"
"org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testCircleFittingBadInit",0,"public void testCircleFittingBadInit()throws EstimationException {Circle circle=new Circle(-12,-12);double[][]points=new double[][]{{-0.312967,0.072366},{-0.339248,0.132965},{-0.379780,0.202724},{-0.390426,0.260487},{-0.361212,0.328325},{-0.346039,0.392619},{-0.280579,0.444306},{-0.216035,0.470009},{-0.149127,0.493832},{-0.075133,0.483271},{-0.007759,0.452680},{0.060071,0.410235},{0.103037,0.341076},{0.118438,0.273884},{0.131293,0.192201},{0.115869,0.129797},{0.072223,0.058396},{0.022884,0.000718},{-0.053355,-0.020405},{-0.123584,-0.032451},{-0.216248,-0.032862},{-0.278592,-0.005008},{-0.337655,0.056658},{-0.385899,0.112526},{-0.405517,0.186957},{-0.415374,0.262071},{-0.387482,0.343398},{-0.347322,0.397943},{-0.287623,0.458425},{-0.223502,0.475513},{-0.135352,0.478186},{-0.061221,0.483371},{0.003711,0.422737},{0.065054,0.375830},{0.108108,0.297099},{0.123882,0.222850},{0.117729,0.134382},{0.085195,0.056820},{0.029800,-0.019138},{-0.027520,-0.072374},{-0.102268,-0.091555},{-0.200299,-0.106578},{-0.292731,-0.091473},{-0.356288,-0.051108},{-0.420561,0.014926},{-0.471036,0.074716},{-0.488638,0.182508},{-0.485990,0.254068},{-0.463943,0.338438},{-0.406453,0.404704},{-0.334287,0.466119},{-0.254244,0.503188},{-0.161548,0.495769},{-0.075733,0.495560},{0.001375,0.434937},{0.082787,0.385806},{0.115490,0.323807},{0.141089,0.223450},{0.138693,0.131703},{0.126415,0.049174},{0.066518,-0.010217},{-0.005184,-0.070647},{-0.080985,-0.103635},{-0.177377,-0.116887},{-0.260628,-0.100258},{-0.335756,-0.056251},{-0.405195,-0.000895},{-0.444937,0.085456},{-0.484357,0.175597},{-0.472453,0.248681},{-0.438580,0.347463},{-0.402304,0.422428},{-0.326777,0.479438},{-0.247797,0.505581},{-0.152676,0.519380},{-0.071754,0.516264},{0.015942,0.472802},{0.076608,0.419077},{0.127673,0.330264},{0.159951,0.262150},{0.153530,0.172681},{0.140653,0.089229},{0.078666,0.024981},{0.023807,-0.037022},{-0.048837,-0.077056},{-0.127729,-0.075338},{-0.221271,-0.067526}};for (int i=0;i < points.length;++i){circle.addPoint(points[i][0],points[i][1]);}GaussNewtonEstimator estimator=new GaussNewtonEstimator(100,1.0e-6,1.0e-6);try {estimator.estimate(circle);fail(""an exception should have been caught"");}catch(EstimationException ee){}catch(Exception e){fail(""wrong exception type caught"");}}"
"org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest.testDerivativesConsistency",0,"public void testDerivativesConsistency()throws DerivativeException,IntegratorException {TestProblem3 pb=new TestProblem3(0.1);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=scalAbsoluteTolerance;DormandPrince853Integrator integ=new DormandPrince853Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);checkDerivativesConsistency(integ,pb,1.0e-10);}"
"org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest.testSerialization",0,"public void testSerialization()throws DerivativeException,IntegratorException,IOException,ClassNotFoundException {TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=scalAbsoluteTolerance;DormandPrince853Integrator integ=new DormandPrince853Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);integ.addStepHandler(new ContinuousOutputModel());integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);ByteArrayOutputStream bos=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(bos);for(StepHandler handler : integ.getStepHandlers()){oos.writeObject(handler);}assertTrue(bos.size()> 86000);assertTrue(bos.size()< 87000);ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());ObjectInputStream ois=new ObjectInputStream(bis);ContinuousOutputModel cm=(ContinuousOutputModel)ois.readObject();Random random=new Random(347588535632l);double maxError=0.0;for (int i=0;i < 1000;++i){double r=random.nextDouble();double time=r * pb.getInitialTime()+ (1.0 - r)* pb.getFinalTime();cm.setInterpolatedTime(time);double[]interpolatedY=cm.getInterpolatedState();double[]theoreticalY=pb.computeTheoreticalState(time);double dx=interpolatedY[0]- theoreticalY[0];double dy=interpolatedY[1]- theoreticalY[1];double error=dx * dx + dy * dy;if (error > maxError){maxError=error;}}assertTrue(maxError < 2.4e-10);}"
"org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest.testClone",0,"public void testClone()throws DerivativeException,IntegratorException {TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=scalAbsoluteTolerance;DormandPrince853Integrator integ=new DormandPrince853Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);integ.addStepHandler(new StepHandler(){private static final long serialVersionUID=2209212559670665268L;public void handleStep(StepInterpolator interpolator,boolean isLast)throws DerivativeException {StepInterpolator cloned=interpolator.copy();double tA=cloned.getPreviousTime();double tB=cloned.getCurrentTime();double halfStep=Math.abs(tB - tA)/ 2;assertEquals(interpolator.getPreviousTime(),tA,1.0e-12);assertEquals(interpolator.getCurrentTime(),tB,1.0e-12);for (int i=0;i < 10;++i){double t=(i * tB + (9 - i)* tA)/ 9;interpolator.setInterpolatedTime(t);assertTrue(Math.abs(cloned.getInterpolatedTime()- t)> (halfStep / 10));cloned.setInterpolatedTime(t);assertEquals(t,cloned.getInterpolatedTime(),1.0e-12);double[]referenceState=interpolator.getInterpolatedState();double[]cloneState=cloned.getInterpolatedState();for (int j=0;j < referenceState.length;++j){assertEquals(referenceState[j],cloneState[j],1.0e-12);}}}public boolean requiresDenseOutput(){return true;}public void reset(){}});integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);}"
"org.apache.commons.math.stat.inference.ChiSquareFactoryTest.testChiSquare",0,"public void testChiSquare()throws Exception {long[]observed={10,9,11};double[]expected={10,10,10};assertEquals(""chi-square statistic"",0.2,testStatistic.chiSquare(expected,observed),10E-12);assertEquals(""chi-square p-value"",0.904837418036,testStatistic.chiSquareTest(expected,observed),1E-10);long[]observed1={500,623,72,70,31};double[]expected1={485,541,82,61,37};assertEquals(""chi-square test statistic"",9.023307936427388,testStatistic.chiSquare(expected1,observed1),1E-10);assertEquals(""chi-square p-value"",0.06051952647453607,testStatistic.chiSquareTest(expected1,observed1),1E-9);assertTrue(""chi-square test reject"",testStatistic.chiSquareTest(expected1,observed1,0.08));assertTrue(""chi-square test accept"",!testStatistic.chiSquareTest(expected1,observed1,0.05));try {testStatistic.chiSquareTest(expected1,observed1,95);fail(""alpha out of range,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}long[]tooShortObs={0};double[]tooShortEx={1};try {testStatistic.chiSquare(tooShortEx,tooShortObs);fail(""arguments too short,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}long[]unMatchedObs={0,1,2,3};double[]unMatchedEx={1,1,2};try {testStatistic.chiSquare(unMatchedEx,unMatchedObs);fail(""arrays have different lengths,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}expected[0]=0;try {testStatistic.chiSquareTest(expected,observed,.01);fail(""bad expected count,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}expected[0]=1;observed[0]=-1;try {testStatistic.chiSquareTest(expected,observed,.01);fail(""bad expected count,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.stat.inference.ChiSquareFactoryTest.testChiSquareIndependence",0,"public void testChiSquareIndependence()throws Exception {long[][]counts={{40,22,43},{91,21,28},{60,10,22}};assertEquals(""chi-square test statistic"",22.709027688,testStatistic.chiSquare(counts),1E-9);assertEquals(""chi-square p-value"",0.000144751460134,testStatistic.chiSquareTest(counts),1E-9);assertTrue(""chi-square test reject"",testStatistic.chiSquareTest(counts,0.0002));assertTrue(""chi-square test accept"",!testStatistic.chiSquareTest(counts,0.0001));long[][]counts2={{10,15},{30,40},{60,90}};assertEquals(""chi-square test statistic"",0.168965517241,testStatistic.chiSquare(counts2),1E-9);assertEquals(""chi-square p-value"",0.918987499852,testStatistic.chiSquareTest(counts2),1E-9);assertTrue(""chi-square test accept"",!testStatistic.chiSquareTest(counts2,0.1));long[][]counts3={{40,22,43},{91,21,28},{60,10}};try {testStatistic.chiSquare(counts3);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}long[][]counts4={{40,22,43}};try {testStatistic.chiSquare(counts4);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}long[][]counts5={{40},{40},{30},{10}};try {testStatistic.chiSquare(counts5);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}long[][]counts6={{10,-2},{30,40},{60,90}};try {testStatistic.chiSquare(counts6);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}try {testStatistic.chiSquareTest(counts,0);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.stat.inference.ChiSquareFactoryTest.testChiSquareLargeTestStatistic",0,"public void testChiSquareLargeTestStatistic()throws Exception {double[]exp=new double[]{3389119.5,649136.6,285745.4,25357364.76,11291189.78,543628.0,232921.0,437665.75};long[]obs=new long[]{2372383,584222,257170,17750155,7903832,489265,209628,393899};org.apache.commons.math.stat.inference.ChiSquareTestImpl csti=new org.apache.commons.math.stat.inference.ChiSquareTestImpl();double cst=csti.chiSquareTest(exp,obs);assertEquals(""chi-square p-value"",0.0,cst,1E-3);assertEquals(""chi-square test statistic"",114875.90421929007,testStatistic.chiSquare(exp,obs),1E-9);}"
"org.apache.commons.math.stat.inference.ChiSquareFactoryTest.testChiSquareZeroCount",0,"/** * Contingency table containing zeros - PR # 32531 */public void testChiSquareZeroCount()throws Exception {long[][]counts={{40,0,4},{91,1,2},{60,2,0}};assertEquals(""chi-square test statistic"",9.67444662263,testStatistic.chiSquare(counts),1E-9);assertEquals(""chi-square p-value"",0.0462835770603,testStatistic.chiSquareTest(counts),1E-9);}"
"org.apache.commons.math.stat.inference.ChiSquareFactoryTest.testChiSquareDataSetsComparisonEqualCounts",0,"/** * Target values verified using DATAPLOT version 2006.3 */public void testChiSquareDataSetsComparisonEqualCounts()throws Exception {long[]observed1={10,12,12,10};long[]observed2={5,15,14,10};assertEquals(""chi-square p value"",0.541096,testStatistic.chiSquareTestDataSetsComparison(observed1,observed2),1E-6);assertEquals(""chi-square test statistic"",2.153846,testStatistic.chiSquareDataSetsComparison(observed1,observed2),1E-6);assertFalse(""chi-square test result"",testStatistic.chiSquareTestDataSetsComparison(observed1,observed2,0.4));}"
"org.apache.commons.math.stat.inference.ChiSquareFactoryTest.testChiSquareDataSetsComparisonUnEqualCounts",0,"/** * Target values verified using DATAPLOT version 2006.3 */public void testChiSquareDataSetsComparisonUnEqualCounts()throws Exception {long[]observed1={10,12,12,10,15};long[]observed2={15,10,10,15,5};assertEquals(""chi-square p value"",0.124115,testStatistic.chiSquareTestDataSetsComparison(observed1,observed2),1E-6);assertEquals(""chi-square test statistic"",7.232189,testStatistic.chiSquareDataSetsComparison(observed1,observed2),1E-6);assertTrue(""chi-square test result"",testStatistic.chiSquareTestDataSetsComparison(observed1,observed2,0.13));assertFalse(""chi-square test result"",testStatistic.chiSquareTestDataSetsComparison(observed1,observed2,0.12));}"
"org.apache.commons.math.stat.inference.ChiSquareFactoryTest.testChiSquareDataSetsComparisonBadCounts",0,"public void testChiSquareDataSetsComparisonBadCounts()throws Exception {long[]observed1={10,-1,12,10,15};long[]observed2={15,10,10,15,5};try {testStatistic.chiSquareTestDataSetsComparison(observed1,observed2);fail(""Expecting IllegalArgumentException - negative count"");}catch(IllegalArgumentException ex){}long[]observed3={10,0,12,10,15};long[]observed4={15,0,10,15,5};try {testStatistic.chiSquareTestDataSetsComparison(observed3,observed4);fail(""Expecting IllegalArgumentException - double 0's"");}catch(IllegalArgumentException ex){}long[]observed5={10,10,12,10,15};long[]observed6={0,0,0,0,0};try {testStatistic.chiSquareTestDataSetsComparison(observed5,observed6);fail(""Expecting IllegalArgumentException - vanishing counts"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.MathConfigurationExceptionTest.testConstructor",0,"public void testConstructor(){MathConfigurationException ex=new MathConfigurationException();assertNull(ex.getCause());assertNull(ex.getMessage());assertEquals(0,ex.getMessage(Locale.FRENCH).length());}"
"org.apache.commons.math.MathConfigurationExceptionTest.testConstructorPatternArguments",0,"public void testConstructorPatternArguments(){String pattern=""a {0}x{1}matrix cannot be a rotation matrix"";Object[]arguments={Integer.valueOf(6),Integer.valueOf(4)};MathConfigurationException ex=new MathConfigurationException(pattern,arguments);assertNull(ex.getCause());assertEquals(pattern,ex.getPattern());assertEquals(arguments.length,ex.getArguments().length);for (int i=0;i < arguments.length;++i){assertEquals(arguments[i],ex.getArguments()[i]);}assertFalse(pattern.equals(ex.getMessage()));assertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));}"
"org.apache.commons.math.MathConfigurationExceptionTest.testConstructorCause",0,"public void testConstructorCause(){String inMsg=""inner message"";Exception cause=new Exception(inMsg);MathConfigurationException ex=new MathConfigurationException(cause);assertEquals(cause,ex.getCause());}"
"org.apache.commons.math.MathConfigurationExceptionTest.testConstructorPatternArgumentsCause",0,"public void testConstructorPatternArgumentsCause(){String pattern=""a {0}x{1}matrix cannot be a rotation matrix"";Object[]arguments={Integer.valueOf(6),Integer.valueOf(4)};String inMsg=""inner message"";Exception cause=new Exception(inMsg);MathConfigurationException ex=new MathConfigurationException(pattern,arguments,cause);assertEquals(cause,ex.getCause());assertEquals(pattern,ex.getPattern());assertEquals(arguments.length,ex.getArguments().length);for (int i=0;i < arguments.length;++i){assertEquals(arguments[i],ex.getArguments()[i]);}assertFalse(pattern.equals(ex.getMessage()));assertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));}"
"org.apache.commons.math.stat.descriptive.summary.SumSqTest.testSpecialValues",0,"public void testSpecialValues(){SumOfSquares sumSq=new SumOfSquares();assertTrue(Double.isNaN(sumSq.getResult()));sumSq.increment(2d);assertEquals(4d,sumSq.getResult(),0);sumSq.increment(Double.POSITIVE_INFINITY);assertEquals(Double.POSITIVE_INFINITY,sumSq.getResult(),0);sumSq.increment(Double.NEGATIVE_INFINITY);assertEquals(Double.POSITIVE_INFINITY,sumSq.getResult(),0);sumSq.increment(Double.NaN);assertTrue(Double.isNaN(sumSq.getResult()));sumSq.increment(1);assertTrue(Double.isNaN(sumSq.getResult()));}"
"org.apache.commons.math.linear.EigenDecompositionImplTest.testDimension1",0,"public void testDimension1(){RealMatrix matrix=MatrixUtils.createRealMatrix(new double[][]{{1.5}});EigenDecomposition ed=new EigenDecompositionImpl(matrix,MathUtils.SAFE_MIN);assertEquals(1.5,ed.getRealEigenvalue(0),1.0e-15);}"
"org.apache.commons.math.linear.EigenDecompositionImplTest.testDimension2",0,"public void testDimension2(){RealMatrix matrix=MatrixUtils.createRealMatrix(new double[][]{{59.0,12.0},{12.0,66.0}});EigenDecomposition ed=new EigenDecompositionImpl(matrix,MathUtils.SAFE_MIN);assertEquals(75.0,ed.getRealEigenvalue(0),1.0e-15);assertEquals(50.0,ed.getRealEigenvalue(1),1.0e-15);}"
"org.apache.commons.math.linear.EigenDecompositionImplTest.testDimension3",0,"public void testDimension3(){RealMatrix matrix=MatrixUtils.createRealMatrix(new double[][]{{39632.0,-4824.0,-16560.0},{-4824.0,8693.0,7920.0},{-16560.0,7920.0,17300.0}});EigenDecomposition ed=new EigenDecompositionImpl(matrix,MathUtils.SAFE_MIN);assertEquals(50000.0,ed.getRealEigenvalue(0),3.0e-11);assertEquals(12500.0,ed.getRealEigenvalue(1),3.0e-11);assertEquals(3125.0,ed.getRealEigenvalue(2),3.0e-11);}"
"org.apache.commons.math.linear.EigenDecompositionImplTest.testDimension4WithSplit",0,"public void testDimension4WithSplit(){RealMatrix matrix=MatrixUtils.createRealMatrix(new double[][]{{0.784,-0.288,0.000,0.000},{-0.288,0.616,0.000,0.000},{0.000,0.000,0.164,-0.048},{0.000,0.000,-0.048,0.136}});EigenDecomposition ed=new EigenDecompositionImpl(matrix,MathUtils.SAFE_MIN);assertEquals(1.0,ed.getRealEigenvalue(0),1.0e-15);assertEquals(0.4,ed.getRealEigenvalue(1),1.0e-15);assertEquals(0.2,ed.getRealEigenvalue(2),1.0e-15);assertEquals(0.1,ed.getRealEigenvalue(3),1.0e-15);}"
"org.apache.commons.math.linear.EigenDecompositionImplTest.testDimension4WithoutSplit",0,"public void testDimension4WithoutSplit(){RealMatrix matrix=MatrixUtils.createRealMatrix(new double[][]{{0.5608,-0.2016,0.1152,-0.2976},{-0.2016,0.4432,-0.2304,0.1152},{0.1152,-0.2304,0.3088,-0.1344},{-0.2976,0.1152,-0.1344,0.3872}});EigenDecomposition ed=new EigenDecompositionImpl(matrix,MathUtils.SAFE_MIN);assertEquals(1.0,ed.getRealEigenvalue(0),1.0e-15);assertEquals(0.4,ed.getRealEigenvalue(1),1.0e-15);assertEquals(0.2,ed.getRealEigenvalue(2),1.0e-15);assertEquals(0.1,ed.getRealEigenvalue(3),1.0e-15);}"
"org.apache.commons.math.linear.EigenDecompositionImplTest.testTridiagonal",0,"/** * test a matrix already in tridiagonal form. */public void testTridiagonal(){Random r=new Random(4366663527842l);double[]ref=new double[30];for (int i=0;i < ref.length;++i){if (i < 5){ref[i]=2 * r.nextDouble()- 1;}else {ref[i]=0.0001 * r.nextDouble()+ 6;}}Arrays.sort(ref);TriDiagonalTransformer t=new TriDiagonalTransformer(createTestMatrix(r,ref));EigenDecomposition ed=new EigenDecompositionImpl(t.getMainDiagonalRef(),t.getSecondaryDiagonalRef(),MathUtils.SAFE_MIN);double[]eigenValues=ed.getRealEigenvalues();assertEquals(ref.length,eigenValues.length);for (int i=0;i < ref.length;++i){assertEquals(ref[ref.length - i - 1],eigenValues[i],2.0e-14);}}"
"org.apache.commons.math.linear.EigenDecompositionImplTest.testDimensions",0,"/** * test dimensions */public void testDimensions(){final int m=matrix.getRowDimension();EigenDecomposition ed=new EigenDecompositionImpl(matrix,MathUtils.SAFE_MIN);assertEquals(m,ed.getV().getRowDimension());assertEquals(m,ed.getV().getColumnDimension());assertEquals(m,ed.getD().getColumnDimension());assertEquals(m,ed.getD().getColumnDimension());assertEquals(m,ed.getVT().getRowDimension());assertEquals(m,ed.getVT().getColumnDimension());}"
"org.apache.commons.math.linear.EigenDecompositionImplTest.testEigenvalues",0,"/** * test eigenvalues */public void testEigenvalues(){EigenDecomposition ed=new EigenDecompositionImpl(matrix,MathUtils.SAFE_MIN);double[]eigenValues=ed.getRealEigenvalues();assertEquals(refValues.length,eigenValues.length);for (int i=0;i < refValues.length;++i){assertEquals(refValues[i],eigenValues[i],3.0e-15);}}"
"org.apache.commons.math.linear.EigenDecompositionImplTest.testBigMatrix",0,"/** * test eigenvalues for a big matrix. */public void testBigMatrix(){Random r=new Random(17748333525117l);double[]bigValues=new double[200];for (int i=0;i < bigValues.length;++i){bigValues[i]=2 * r.nextDouble()- 1;}Arrays.sort(bigValues);EigenDecomposition ed=new EigenDecompositionImpl(createTestMatrix(r,bigValues),MathUtils.SAFE_MIN);double[]eigenValues=ed.getRealEigenvalues();assertEquals(bigValues.length,eigenValues.length);for (int i=0;i < bigValues.length;++i){assertEquals(bigValues[bigValues.length - i - 1],eigenValues[i],2.0e-14);}}"
"org.apache.commons.math.linear.EigenDecompositionImplTest.testEigenvectors",0,"/** * test eigenvectors */public void testEigenvectors(){EigenDecomposition ed=new EigenDecompositionImpl(matrix,MathUtils.SAFE_MIN);for (int i=0;i < matrix.getRowDimension();++i){double lambda=ed.getRealEigenvalue(i);RealVector v=ed.getEigenvector(i);RealVector mV=matrix.operate(v);assertEquals(0,mV.subtract(v.mapMultiplyToSelf(lambda)).getNorm(),1.0e-13);}}"
"org.apache.commons.math.linear.EigenDecompositionImplTest.testAEqualVDVt",0,"/** * test A = VDVt */public void testAEqualVDVt(){EigenDecomposition ed=new EigenDecompositionImpl(matrix,MathUtils.SAFE_MIN);RealMatrix v=ed.getV();RealMatrix d=ed.getD();RealMatrix vT=ed.getVT();double norm=v.multiply(d).multiply(vT).subtract(matrix).getNorm();assertEquals(0,norm,6.0e-13);}"
"org.apache.commons.math.linear.EigenDecompositionImplTest.testVOrthogonal",0,"/** * test that V is orthogonal */public void testVOrthogonal(){RealMatrix v=new EigenDecompositionImpl(matrix,MathUtils.SAFE_MIN).getV();RealMatrix vTv=v.transpose().multiply(v);RealMatrix id=MatrixUtils.createRealIdentityMatrix(vTv.getRowDimension());assertEquals(0,vTv.subtract(id).getNorm(),2.0e-13);}"
"org.apache.commons.math.linear.EigenDecompositionImplTest.testDiagonal",0,"/** * test diagonal matrix */public void testDiagonal(){double[]diagonal=new double[]{-3.0,-2.0,2.0,5.0};RealMatrix m=createDiagonalMatrix(diagonal,diagonal.length,diagonal.length);EigenDecomposition ed=new EigenDecompositionImpl(m,MathUtils.SAFE_MIN);assertEquals(diagonal[0],ed.getRealEigenvalue(3),2.0e-15);assertEquals(diagonal[1],ed.getRealEigenvalue(2),2.0e-15);assertEquals(diagonal[2],ed.getRealEigenvalue(1),2.0e-15);assertEquals(diagonal[3],ed.getRealEigenvalue(0),2.0e-15);}"
"org.apache.commons.math.linear.EigenDecompositionImplTest.testRepeatedEigenvalue",0,"/** * Matrix with eigenvalues {8,-1,-1}*/public void testRepeatedEigenvalue(){RealMatrix repeated=MatrixUtils.createRealMatrix(new double[][]{{3,2,4},{2,0,2},{4,2,3}});EigenDecomposition ed=new EigenDecompositionImpl(repeated,MathUtils.SAFE_MIN);checkEigenValues((new double[]{8,-1,-1}),ed,1E-12);checkEigenVector((new double[]{2,1,2}),ed,1E-12);}"
"org.apache.commons.math.linear.EigenDecompositionImplTest.testDistinctEigenvalues",0,"/** * Matrix with eigenvalues {2,0,12}*/public void testDistinctEigenvalues(){RealMatrix distinct=MatrixUtils.createRealMatrix(new double[][]{{3,1,-4},{1,3,-4},{-4,-4,8}});EigenDecomposition ed=new EigenDecompositionImpl(distinct,MathUtils.SAFE_MIN);checkEigenValues((new double[]{2,0,12}),ed,1E-12);checkEigenVector((new double[]{1,-1,0}),ed,1E-12);checkEigenVector((new double[]{1,1,1}),ed,1E-12);checkEigenVector((new double[]{-1,-1,2}),ed,1E-12);}"
"org.apache.commons.math.linear.MatrixUtilsTest.testCreateRealMatrix",0,"public void testCreateRealMatrix(){assertEquals(new DenseRealMatrix(testData),MatrixUtils.createRealMatrix(testData));try {MatrixUtils.createRealMatrix(new double[][]{{1},{1,2}});fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}try {MatrixUtils.createRealMatrix(new double[][]{{},{}});fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}try {MatrixUtils.createRealMatrix(null);fail(""Expecting NullPointerException"");}catch(NullPointerException ex){}}"
"org.apache.commons.math.linear.MatrixUtilsTest.testCreateBigMatrix",0,"public void testCreateBigMatrix(){assertEquals(new BigMatrixImpl(testData),MatrixUtils.createBigMatrix(testData));assertEquals(new BigMatrixImpl(BigMatrixImplTest.asBigDecimal(testData),true),MatrixUtils.createBigMatrix(BigMatrixImplTest.asBigDecimal(testData),false));assertEquals(new BigMatrixImpl(BigMatrixImplTest.asBigDecimal(testData),false),MatrixUtils.createBigMatrix(BigMatrixImplTest.asBigDecimal(testData),true));assertEquals(new BigMatrixImpl(bigColMatrix),MatrixUtils.createBigMatrix(bigColMatrix));assertEquals(new BigMatrixImpl(stringColMatrix),MatrixUtils.createBigMatrix(stringColMatrix));try {MatrixUtils.createBigMatrix(new double[][]{{1},{1,2}});fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}try {MatrixUtils.createBigMatrix(new double[][]{{},{}});fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}try {MatrixUtils.createBigMatrix(nullMatrix);fail(""Expecting NullPointerException"");}catch(NullPointerException ex){}}"
"org.apache.commons.math.linear.MatrixUtilsTest.testCreateRowRealMatrix",0,"public void testCreateRowRealMatrix(){assertEquals(MatrixUtils.createRowRealMatrix(row),new DenseRealMatrix(rowMatrix));try {MatrixUtils.createRowRealMatrix(new double[]{});fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}try {MatrixUtils.createRowRealMatrix(null);fail(""Expecting NullPointerException"");}catch(NullPointerException ex){}}"
"org.apache.commons.math.linear.MatrixUtilsTest.testCreateRowBigMatrix",0,"public void testCreateRowBigMatrix(){assertEquals((BigMatrixImpl)MatrixUtils.createRowBigMatrix(row),new BigMatrixImpl(rowMatrix));assertEquals((BigMatrixImpl)MatrixUtils.createRowBigMatrix(bigRow),new BigMatrixImpl(bigRowMatrix));assertEquals((BigMatrixImpl)MatrixUtils.createRowBigMatrix(stringRow),new BigMatrixImpl(stringRowMatrix));try {MatrixUtils.createRowBigMatrix(new double[]{});fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}try {MatrixUtils.createRowBigMatrix(nullDoubleArray);fail(""Expecting NullPointerException"");}catch(NullPointerException ex){}}"
"org.apache.commons.math.linear.MatrixUtilsTest.testCreateColumnRealMatrix",0,"public void testCreateColumnRealMatrix(){assertEquals(MatrixUtils.createColumnRealMatrix(col),new DenseRealMatrix(colMatrix));try {MatrixUtils.createColumnRealMatrix(new double[]{});fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}try {MatrixUtils.createColumnRealMatrix(null);fail(""Expecting NullPointerException"");}catch(NullPointerException ex){}}"
"org.apache.commons.math.linear.MatrixUtilsTest.testCreateColumnBigMatrix",0,"public void testCreateColumnBigMatrix(){assertEquals((BigMatrixImpl)MatrixUtils.createColumnBigMatrix(col),new BigMatrixImpl(colMatrix));assertEquals((BigMatrixImpl)MatrixUtils.createColumnBigMatrix(bigCol),new BigMatrixImpl(bigColMatrix));assertEquals((BigMatrixImpl)MatrixUtils.createColumnBigMatrix(stringCol),new BigMatrixImpl(stringColMatrix));try {MatrixUtils.createColumnBigMatrix(new double[]{});fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}try {MatrixUtils.createColumnBigMatrix(nullDoubleArray);fail(""Expecting NullPointerException"");}catch(NullPointerException ex){}}"
"org.apache.commons.math.linear.MatrixUtilsTest.testCreateIdentityMatrix",0,"public void testCreateIdentityMatrix(){checkIdentityMatrix(MatrixUtils.createRealIdentityMatrix(3));checkIdentityMatrix(MatrixUtils.createRealIdentityMatrix(2));checkIdentityMatrix(MatrixUtils.createRealIdentityMatrix(1));try {MatrixUtils.createRealIdentityMatrix(0);}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.linear.MatrixUtilsTest.testCreateBigIdentityMatrix",0,"public void testCreateBigIdentityMatrix(){checkIdentityBigMatrix(MatrixUtils.createBigIdentityMatrix(3));checkIdentityBigMatrix(MatrixUtils.createBigIdentityMatrix(2));checkIdentityBigMatrix(MatrixUtils.createBigIdentityMatrix(1));try {MatrixUtils.createRealIdentityMatrix(0);}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.util.ContinuedFractionTest.testGoldenRatio",0,"public void testGoldenRatio(){ContinuedFraction cf=new ContinuedFraction(){private static final long serialVersionUID=4696264881688589546L;public double getA(int n,double x){return 1.0;}public double getB(int n,double x){return 1.0;}};try {double gr=cf.evaluate(0.0,10e-9);assertEquals(1.61803399,gr,10e-9);}catch(MathException e){fail(e.getMessage());}}"
"org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest.testDerivativesConsistency",0,"public void testDerivativesConsistency()throws DerivativeException,IntegratorException {TestProblem3 pb=new TestProblem3();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.001;ClassicalRungeKuttaIntegrator integ=new ClassicalRungeKuttaIntegrator(step);checkDerivativesConsistency(integ,pb,1.0e-10);}"
"org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest.testSerialization",0,"public void testSerialization()throws DerivativeException,IntegratorException,IOException,ClassNotFoundException {TestProblem3 pb=new TestProblem3(0.9);double step=(pb.getFinalTime()- pb.getInitialTime())* 0.0003;ClassicalRungeKuttaIntegrator integ=new ClassicalRungeKuttaIntegrator(step);integ.addStepHandler(new ContinuousOutputModel());integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);ByteArrayOutputStream bos=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(bos);for(StepHandler handler : integ.getStepHandlers()){oos.writeObject(handler);}assertTrue(bos.size()> 700000);assertTrue(bos.size()< 701000);ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());ObjectInputStream ois=new ObjectInputStream(bis);ContinuousOutputModel cm=(ContinuousOutputModel)ois.readObject();Random random=new Random(347588535632l);double maxError=0.0;for (int i=0;i < 1000;++i){double r=random.nextDouble();double time=r * pb.getInitialTime()+ (1.0 - r)* pb.getFinalTime();cm.setInterpolatedTime(time);double[]interpolatedY=cm.getInterpolatedState();double[]theoreticalY=pb.computeTheoreticalState(time);double dx=interpolatedY[0]- theoreticalY[0];double dy=interpolatedY[1]- theoreticalY[1];double error=dx * dx + dy * dy;if (error > maxError){maxError=error;}}assertTrue(maxError > 0.005);}"
"org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest.testSetterInjection",0,"public void testSetterInjection()throws Exception {MultivariateSummaryStatistics u=new MultivariateSummaryStatistics(2,true);u.setMeanImpl(new StorelessUnivariateStatistic[]{new sumMean(),new sumMean()});u.addValue(new double[]{1,2});u.addValue(new double[]{3,4});assertEquals(4,u.getMean()[0],1E-14);assertEquals(6,u.getMean()[1],1E-14);u.clear();u.addValue(new double[]{1,2});u.addValue(new double[]{3,4});assertEquals(4,u.getMean()[0],1E-14);assertEquals(6,u.getMean()[1],1E-14);u.clear();u.setMeanImpl(new StorelessUnivariateStatistic[]{new Mean(),new Mean()});u.addValue(new double[]{1,2});u.addValue(new double[]{3,4});assertEquals(2,u.getMean()[0],1E-14);assertEquals(3,u.getMean()[1],1E-14);}"
"org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest.testSetterIllegalState",0,"public void testSetterIllegalState()throws Exception {MultivariateSummaryStatistics u=new MultivariateSummaryStatistics(2,true);u.addValue(new double[]{1,2});u.addValue(new double[]{3,4});try {u.setMeanImpl(new StorelessUnivariateStatistic[]{new sumMean(),new sumMean()});fail(""Expecting IllegalStateException"");}catch(IllegalStateException ex){}}"
"org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest.testDimension",0,"public void testDimension(){try {new MultivariateSummaryStatistics(2,true).addValue(new double[3]);}catch(DimensionMismatchException dme){}catch(Exception e){fail(""wrong exception caught"");}}"
"org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest.testStats",0,"/** * test stats */public void testStats()throws DimensionMismatchException {MultivariateSummaryStatistics u=new MultivariateSummaryStatistics(2,true);assertEquals(0,u.getN());u.addValue(new double[]{1,2});u.addValue(new double[]{2,3});u.addValue(new double[]{2,3});u.addValue(new double[]{3,4});assertEquals(4,u.getN());assertEquals(8,u.getSum()[0],1.0e-10);assertEquals(12,u.getSum()[1],1.0e-10);assertEquals(18,u.getSumSq()[0],1.0e-10);assertEquals(38,u.getSumSq()[1],1.0e-10);assertEquals(1,u.getMin()[0],1.0e-10);assertEquals(2,u.getMin()[1],1.0e-10);assertEquals(3,u.getMax()[0],1.0e-10);assertEquals(4,u.getMax()[1],1.0e-10);assertEquals(2.4849066497880003102,u.getSumLog()[0],1.0e-10);assertEquals(4.276666119016055311,u.getSumLog()[1],1.0e-10);assertEquals(1.8612097182041991979,u.getGeometricMean()[0],1.0e-10);assertEquals(2.9129506302439405217,u.getGeometricMean()[1],1.0e-10);assertEquals(2,u.getMean()[0],1.0e-10);assertEquals(3,u.getMean()[1],1.0e-10);assertEquals(Math.sqrt(2.0 / 3.0),u.getStandardDeviation()[0],1.0e-10);assertEquals(Math.sqrt(2.0 / 3.0),u.getStandardDeviation()[1],1.0e-10);assertEquals(2.0 / 3.0,u.getCovariance().getEntry(0,0),1.0e-10);assertEquals(2.0 / 3.0,u.getCovariance().getEntry(0,1),1.0e-10);assertEquals(2.0 / 3.0,u.getCovariance().getEntry(1,0),1.0e-10);assertEquals(2.0 / 3.0,u.getCovariance().getEntry(1,1),1.0e-10);u.clear();assertEquals(0,u.getN());}"
"org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest.testN0andN1Conditions",0,"public void testN0andN1Conditions()throws Exception {MultivariateSummaryStatistics u=new MultivariateSummaryStatistics(1,true);assertTrue(Double.isNaN(u.getMean()[0]));assertTrue(Double.isNaN(u.getStandardDeviation()[0]));u.addValue(new double[]{1});assertEquals(1.0,u.getMean()[0],1.0e-10);assertEquals(1.0,u.getGeometricMean()[0],1.0e-10);assertEquals(0.0,u.getStandardDeviation()[0],1.0e-10);u.addValue(new double[]{2});assertTrue(u.getStandardDeviation()[0]> 0);}"
"org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest.testNaNContracts",0,"public void testNaNContracts()throws DimensionMismatchException {MultivariateSummaryStatistics u=new MultivariateSummaryStatistics(1,true);assertTrue(Double.isNaN(u.getMean()[0]));assertTrue(Double.isNaN(u.getMin()[0]));assertTrue(Double.isNaN(u.getStandardDeviation()[0]));assertTrue(Double.isNaN(u.getGeometricMean()[0]));u.addValue(new double[]{1.0});assertFalse(Double.isNaN(u.getMean()[0]));assertFalse(Double.isNaN(u.getMin()[0]));assertFalse(Double.isNaN(u.getStandardDeviation()[0]));assertFalse(Double.isNaN(u.getGeometricMean()[0]));}"
"org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest.testSerialization",0,"public void testSerialization()throws DimensionMismatchException {MultivariateSummaryStatistics u=new MultivariateSummaryStatistics(2,true);TestUtils.checkSerializedEquality(u);MultivariateSummaryStatistics s=(MultivariateSummaryStatistics)TestUtils.serializeAndRecover(u);assertEquals(u,s);u.addValue(new double[]{2d,1d});u.addValue(new double[]{1d,1d});u.addValue(new double[]{3d,1d});u.addValue(new double[]{4d,1d});u.addValue(new double[]{5d,1d});TestUtils.checkSerializedEquality(u);s=(MultivariateSummaryStatistics)TestUtils.serializeAndRecover(u);assertEquals(u,s);}"
"org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest.testEqualsAndHashCode",0,"public void testEqualsAndHashCode()throws DimensionMismatchException {MultivariateSummaryStatistics u=new MultivariateSummaryStatistics(2,true);MultivariateSummaryStatistics t=null;int emptyHash=u.hashCode();assertTrue(u.equals(u));assertFalse(u.equals(t));assertFalse(u.equals(Double.valueOf(0)));t=new MultivariateSummaryStatistics(2,true);assertTrue(t.equals(u));assertTrue(u.equals(t));assertEquals(emptyHash,t.hashCode());u.addValue(new double[]{2d,1d});u.addValue(new double[]{1d,1d});u.addValue(new double[]{3d,1d});u.addValue(new double[]{4d,1d});u.addValue(new double[]{5d,1d});assertFalse(t.equals(u));assertFalse(u.equals(t));assertTrue(u.hashCode()!= t.hashCode());t.addValue(new double[]{2d,1d});t.addValue(new double[]{1d,1d});t.addValue(new double[]{3d,1d});t.addValue(new double[]{4d,1d});t.addValue(new double[]{5d,1d});assertTrue(t.equals(u));assertTrue(u.equals(t));assertEquals(u.hashCode(),t.hashCode());u.clear();t.clear();assertTrue(t.equals(u));assertTrue(u.equals(t));assertEquals(emptyHash,t.hashCode());assertEquals(emptyHash,u.hashCode());}"
"org.apache.commons.math.distribution.GammaDistributionTest.testParameterAccessors",0,"public void testParameterAccessors(){GammaDistribution distribution=(GammaDistribution)getDistribution();assertEquals(4d,distribution.getAlpha(),0);distribution.setAlpha(3d);assertEquals(3d,distribution.getAlpha(),0);assertEquals(2d,distribution.getBeta(),0);distribution.setBeta(4d);assertEquals(4d,distribution.getBeta(),0);try {distribution.setAlpha(0d);fail(""Expecting IllegalArgumentException for alpha = 0"");}catch(IllegalArgumentException ex){}try {distribution.setBeta(0d);fail(""Expecting IllegalArgumentException for beta = 0"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.distribution.GammaDistributionTest.testProbabilities",0,"public void testProbabilities()throws Exception {testProbability(-1.000,4.0,2.0,.0000);testProbability(15.501,4.0,2.0,.9499);testProbability(0.504,4.0,1.0,.0018);testProbability(10.011,1.0,2.0,.9933);testProbability(5.000,2.0,2.0,.7127);}"
"org.apache.commons.math.distribution.GammaDistributionTest.testValues",0,"public void testValues()throws Exception {testValue(15.501,4.0,2.0,.9499);testValue(0.504,4.0,1.0,.0018);testValue(10.011,1.0,2.0,.9933);testValue(5.000,2.0,2.0,.7127);}"
"org.apache.commons.math.distribution.GammaDistributionTest.testDensity",0,"public void testDensity(){double[]x=new double[]{-0.1,1e-6,0.5,1,2,5};checkDensity(1,1,x,new double[]{0.000000000000,0.999999000001,0.606530659713,0.367879441171,0.135335283237,0.006737946999});checkDensity(2,1,x,new double[]{0.000000000000,0.000000999999,0.303265329856,0.367879441171,0.270670566473,0.033689734995});checkDensity(4,1,x,new double[]{0.000000000e+00,1.666665000e-19,1.263605541e-02,6.131324020e-02,1.804470443e-01,1.403738958e-01});checkDensity(4,10,x,new double[]{0.000000000e+00,1.666650000e-15,1.403738958e+00,7.566654960e-02,2.748204830e-05,4.018228850e-17});checkDensity(0.1,10,x,new double[]{0.000000000e+00,3.323953832e+04,1.663849010e-03,6.007786726e-06,1.461647647e-10,5.996008322e-24});checkDensity(0.1,20,x,new double[]{0.000000000e+00,3.562489883e+04,1.201557345e-05,2.923295295e-10,3.228910843e-19,1.239484589e-45});checkDensity(0.1,4,x,new double[]{0.000000000e+00,3.032938388e+04,3.049322494e-02,2.211502311e-03,2.170613371e-05,5.846590589e-11});checkDensity(0.1,1,x,new double[]{0.000000000e+00,2.640334143e+04,1.189704437e-01,3.866916944e-02,7.623306235e-03,1.663849010e-04});}"
"org.apache.commons.math.distribution.GammaDistributionTest.testInverseCumulativeProbabilityExtremes",0,"public void testInverseCumulativeProbabilityExtremes()throws Exception {setInverseCumulativeTestPoints(new double[]{0,1});setInverseCumulativeTestValues(new double[]{0,Double.POSITIVE_INFINITY});verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math.distribution.GammaDistributionTest.testCumulativeProbabilities",0,"/** * Verifies that cumulative probability density calculations match expected values using default test instance data*/public void testCumulativeProbabilities()throws Exception {verifyCumulativeProbabilities();}"
"org.apache.commons.math.distribution.GammaDistributionTest.testInverseCumulativeProbabilities",0,"/** * Verifies that inverse cumulative probability density calculations match expected values using default test instance data*/public void testInverseCumulativeProbabilities()throws Exception {verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math.distribution.GammaDistributionTest.testConsistency",0,"/** * Verifies that probability computations are consistent*/public void testConsistency()throws Exception {for (int i=1;i < cumulativeTestPoints.length;i++){TestUtils.assertEquals(0d,distribution.cumulativeProbability(cumulativeTestPoints[i],cumulativeTestPoints[i]),tolerance);double upper=Math.max(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double lower=Math.min(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double diff=distribution.cumulativeProbability(upper)- distribution.cumulativeProbability(lower);double direct=distribution.cumulativeProbability(lower,upper);TestUtils.assertEquals(""Inconsistent cumulative probabilities for ("" + lower + "",""+ upper+ "")"",diff,direct,tolerance);}}"
"org.apache.commons.math.distribution.GammaDistributionTest.testIllegalArguments",0,"/** * Verifies that illegal arguments are correctly handled*/public void testIllegalArguments()throws Exception {try {distribution.cumulativeProbability(1,0);fail(""Expecting IllegalArgumentException for bad cumulativeProbability interval"");}catch(IllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(-1);fail(""Expecting IllegalArgumentException for p = -1"");}catch(IllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(2);fail(""Expecting IllegalArgumentException for p = 2"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest.testStats",0,"/** * test stats */public void testStats(){SummaryStatistics u=createSummaryStatistics();assertEquals(""total count"",0,u.getN(),tolerance);u.addValue(one);u.addValue(twoF);u.addValue(twoL);u.addValue(three);assertEquals(""N"",n,u.getN(),tolerance);assertEquals(""sum"",sum,u.getSum(),tolerance);assertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);assertEquals(""var"",var,u.getVariance(),tolerance);assertEquals(""std"",std,u.getStandardDeviation(),tolerance);assertEquals(""mean"",mean,u.getMean(),tolerance);assertEquals(""min"",min,u.getMin(),tolerance);assertEquals(""max"",max,u.getMax(),tolerance);u.clear();assertEquals(""total count"",0,u.getN(),tolerance);}"
"org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest.testN0andN1Conditions",0,"public void testN0andN1Conditions()throws Exception {SummaryStatistics u=createSummaryStatistics();assertTrue(""Mean of n = 0 set should be NaN"",Double.isNaN(u.getMean()));assertTrue(""Standard Deviation of n = 0 set should be NaN"",Double.isNaN(u.getStandardDeviation()));assertTrue(""Variance of n = 0 set should be NaN"",Double.isNaN(u.getVariance()));u.addValue(one);assertTrue(""mean should be one (n = 1)"",u.getMean()== one);assertTrue(""geometric should be one (n = 1)instead it is "" + u.getGeometricMean(),u.getGeometricMean()== one);assertTrue(""Std should be zero (n = 1)"",u.getStandardDeviation()== 0.0);assertTrue(""variance should be zero (n = 1)"",u.getVariance()== 0.0);u.addValue(twoF);assertTrue(""Std should not be zero (n = 2)"",u.getStandardDeviation()!= 0.0);assertTrue(""variance should not be zero (n = 2)"",u.getVariance()!= 0.0);}"
"org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest.testProductAndGeometricMean",0,"public void testProductAndGeometricMean()throws Exception {SummaryStatistics u=createSummaryStatistics();u.addValue(1.0);u.addValue(2.0);u.addValue(3.0);u.addValue(4.0);assertEquals(""Geometric mean not expected"",2.213364,u.getGeometricMean(),0.00001);}"
"org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest.testNaNContracts",0,"public void testNaNContracts(){SummaryStatistics u=createSummaryStatistics();assertTrue(""mean not NaN"",Double.isNaN(u.getMean()));assertTrue(""min not NaN"",Double.isNaN(u.getMin()));assertTrue(""std dev not NaN"",Double.isNaN(u.getStandardDeviation()));assertTrue(""var not NaN"",Double.isNaN(u.getVariance()));assertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));u.addValue(1.0);assertEquals(""mean not expected"",1.0,u.getMean(),Double.MIN_VALUE);assertEquals(""variance not expected"",0.0,u.getVariance(),Double.MIN_VALUE);assertEquals(""geometric mean not expected"",1.0,u.getGeometricMean(),Double.MIN_VALUE);u.addValue(-1.0);assertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));u.addValue(0.0);assertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));}"
"org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest.testGetSummary",0,"public void testGetSummary(){SummaryStatistics u=createSummaryStatistics();StatisticalSummary summary=u.getSummary();verifySummary(u,summary);u.addValue(1d);summary=u.getSummary();verifySummary(u,summary);u.addValue(2d);summary=u.getSummary();verifySummary(u,summary);u.addValue(2d);summary=u.getSummary();verifySummary(u,summary);}"
"org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest.testSerialization",0,"public void testSerialization(){SummaryStatistics u=createSummaryStatistics();TestUtils.checkSerializedEquality(u);SummaryStatistics s=(SummaryStatistics)TestUtils.serializeAndRecover(u);StatisticalSummary summary=s.getSummary();verifySummary(u,summary);u.addValue(2d);u.addValue(1d);u.addValue(3d);u.addValue(4d);u.addValue(5d);TestUtils.checkSerializedEquality(u);s=(SummaryStatistics)TestUtils.serializeAndRecover(u);summary=s.getSummary();verifySummary(u,summary);}"
"org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest.testEqualsAndHashCode",0,"public void testEqualsAndHashCode(){SummaryStatistics u=createSummaryStatistics();SummaryStatistics t=null;int emptyHash=u.hashCode();assertTrue(""reflexive"",u.equals(u));assertFalse(""non-null compared to null"",u.equals(t));assertFalse(""wrong type"",u.equals(Double.valueOf(0)));t=createSummaryStatistics();assertTrue(""empty instances should be equal"",t.equals(u));assertTrue(""empty instances should be equal"",u.equals(t));assertEquals(""empty hash code"",emptyHash,t.hashCode());u.addValue(2d);u.addValue(1d);u.addValue(3d);u.addValue(4d);assertFalse(""different n's should make instances not equal"",t.equals(u));assertFalse(""different n's should make instances not equal"",u.equals(t));assertTrue(""different n's should make hashcodes different"",u.hashCode()!= t.hashCode());t.addValue(2d);t.addValue(1d);t.addValue(3d);t.addValue(4d);assertTrue(""summaries based on same data should be equal"",t.equals(u));assertTrue(""summaries based on same data should be equal"",u.equals(t));assertEquals(""summaries based on same data should have same hashcodes"",u.hashCode(),t.hashCode());u.clear();t.clear();assertTrue(""empty instances should be equal"",t.equals(u));assertTrue(""empty instances should be equal"",u.equals(t));assertEquals(""empty hash code"",emptyHash,t.hashCode());assertEquals(""empty hash code"",emptyHash,u.hashCode());}"
"org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest.testCopy",0,"public void testCopy()throws Exception {SummaryStatistics u=createSummaryStatistics();u.addValue(2d);u.addValue(1d);u.addValue(3d);u.addValue(4d);SummaryStatistics v=new SummaryStatistics(u);assertEquals(u,v);assertEquals(v,u);assertTrue(v.geoMean == v.getGeoMeanImpl());assertTrue(v.mean == v.getMeanImpl());assertTrue(v.min == v.getMinImpl());assertTrue(v.max == v.getMaxImpl());assertTrue(v.sum == v.getSumImpl());assertTrue(v.sumsq == v.getSumsqImpl());assertTrue(v.sumLog == v.getSumLogImpl());assertTrue(v.variance == v.getVarianceImpl());u.addValue(7d);u.addValue(9d);u.addValue(11d);u.addValue(23d);v.addValue(7d);v.addValue(9d);v.addValue(11d);v.addValue(23d);assertEquals(u,v);assertEquals(v,u);u.clear();u.setSumImpl(new Sum());SummaryStatistics.copy(u,v);assertEquals(u.sum,v.sum);assertEquals(u.getSumImpl(),v.getSumImpl());}"
"org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest.testSetterInjection",0,"public void testSetterInjection()throws Exception {SummaryStatistics u=createSummaryStatistics();u.setMeanImpl(new Sum());u.setSumLogImpl(new Sum());u.addValue(1);u.addValue(3);assertEquals(4,u.getMean(),1E-14);assertEquals(4,u.getSumOfLogs(),1E-14);assertEquals(Math.exp(2),u.getGeometricMean(),1E-14);u.clear();u.addValue(1);u.addValue(2);assertEquals(3,u.getMean(),1E-14);u.clear();u.setMeanImpl(new Mean());}"
"org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest.testSetterIllegalState",0,"public void testSetterIllegalState()throws Exception {SummaryStatistics u=createSummaryStatistics();u.addValue(1);u.addValue(3);try {u.setMeanImpl(new Sum());fail(""Expecting IllegalStateException"");}catch(IllegalStateException ex){}}"
"org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest.cannotAddXSampleData",0,"@Test(expected=IllegalArgumentException.class)public void cannotAddXSampleData(){createRegression().newSampleData(new double[]{},null,null);}"
"org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest.cannotAddNullYSampleData",0,"@Test(expected=IllegalArgumentException.class)public void cannotAddNullYSampleData(){createRegression().newSampleData(null,new double[][]{},null);}"
"org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest.cannotAddSampleDataWithSizeMismatch",0,"@Test(expected=IllegalArgumentException.class)public void cannotAddSampleDataWithSizeMismatch(){double[]y=new double[]{1.0,2.0};double[][]x=new double[1][];x[0]=new double[]{1.0,0};createRegression().newSampleData(y,x,null);}"
"org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest.cannotAddNullCovarianceData",0,"@Test(expected=IllegalArgumentException.class)public void cannotAddNullCovarianceData(){createRegression().newSampleData(new double[]{},new double[][]{},null);}"
"org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest.cannotAddCovarianceDataWithSampleSizeMismatch",0,"@Test(expected=IllegalArgumentException.class)public void cannotAddCovarianceDataWithSampleSizeMismatch(){double[]y=new double[]{1.0,2.0};double[][]x=new double[2][];x[0]=new double[]{1.0,0};x[1]=new double[]{0,1.0};double[][]omega=new double[1][];omega[0]=new double[]{1.0,0};createRegression().newSampleData(y,x,omega);}"
"org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest.cannotAddCovarianceDataThatIsNotSquare",0,"@Test(expected=IllegalArgumentException.class)public void cannotAddCovarianceDataThatIsNotSquare(){double[]y=new double[]{1.0,2.0};double[][]x=new double[2][];x[0]=new double[]{1.0,0};x[1]=new double[]{0,1.0};double[][]omega=new double[3][];omega[0]=new double[]{1.0,0};omega[1]=new double[]{0,1.0};omega[2]=new double[]{0,2.0};createRegression().newSampleData(y,x,omega);}"
"org.apache.commons.math.stat.descriptive.rank.PercentileTest.testHighPercentile",0,"public void testHighPercentile(){double[]d=new double[]{1,2,3};Percentile p=new Percentile(75);assertEquals(3.0,p.evaluate(d),1.0e-5);}"
"org.apache.commons.math.stat.descriptive.rank.PercentileTest.testPercentile",0,"public void testPercentile(){double[]d=new double[]{1,3,2,4};Percentile p=new Percentile(30);assertEquals(1.5,p.evaluate(d),1.0e-5);p.setQuantile(25);assertEquals(1.25,p.evaluate(d),1.0e-5);p.setQuantile(75);assertEquals(3.75,p.evaluate(d),1.0e-5);p.setQuantile(50);assertEquals(2.5,p.evaluate(d),1.0e-5);try {p.evaluate(d,0,d.length,-1.0);fail();}catch(IllegalArgumentException ex){}try {p.evaluate(d,0,d.length,101.0);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.stat.descriptive.rank.PercentileTest.testNISTExample",0,"public void testNISTExample(){double[]d=new double[]{95.1772,95.1567,95.1937,95.1959,95.1442,95.0610,95.1591,95.1195,95.1772,95.0925,95.1990,95.1682};Percentile p=new Percentile(90);assertEquals(95.1981,p.evaluate(d),1.0e-4);assertEquals(95.1990,p.evaluate(d,0,d.length,100d),0);}"
"org.apache.commons.math.stat.descriptive.rank.PercentileTest.test5",0,"public void test5(){Percentile percentile=new Percentile(5);assertEquals(this.percentile5,percentile.evaluate(testArray),getTolerance());}"
"org.apache.commons.math.stat.descriptive.rank.PercentileTest.testNullEmpty",0,"public void testNullEmpty(){Percentile percentile=new Percentile(50);double[]nullArray=null;double[]emptyArray=new double[]{};try {percentile.evaluate(nullArray);fail(""Expecting IllegalArgumentException for null array"");}catch(IllegalArgumentException ex){}assertTrue(Double.isNaN(percentile.evaluate(emptyArray)));}"
"org.apache.commons.math.stat.descriptive.rank.PercentileTest.testSingleton",0,"public void testSingleton(){Percentile percentile=new Percentile(50);double[]singletonArray=new double[]{1d};assertEquals(1d,percentile.evaluate(singletonArray),0);assertEquals(1d,percentile.evaluate(singletonArray,0,1),0);assertEquals(1d,percentile.evaluate(singletonArray,0,1,5),0);assertEquals(1d,percentile.evaluate(singletonArray,0,1,100),0);assertTrue(Double.isNaN(percentile.evaluate(singletonArray,0,0)));}"
"org.apache.commons.math.stat.descriptive.rank.PercentileTest.testSpecialValues",0,"public void testSpecialValues(){Percentile percentile=new Percentile(50);double[]specialValues=new double[]{0d,1d,2d,3d,4d,Double.NaN};assertEquals(2.5d,percentile.evaluate(specialValues),0);specialValues=new double[]{Double.NEGATIVE_INFINITY,1d,2d,3d,Double.NaN,Double.POSITIVE_INFINITY};assertEquals(2.5d,percentile.evaluate(specialValues),0);specialValues=new double[]{1d,1d,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY};assertTrue(Double.isInfinite(percentile.evaluate(specialValues)));specialValues=new double[]{1d,1d,Double.NaN,Double.NaN};assertTrue(Double.isNaN(percentile.evaluate(specialValues)));specialValues=new double[]{1d,1d,Double.NEGATIVE_INFINITY,Double.NEGATIVE_INFINITY};assertTrue(Double.isNaN(percentile.evaluate(specialValues)));}"
"org.apache.commons.math.stat.descriptive.rank.PercentileTest.testSetQuantile",0,"public void testSetQuantile(){Percentile percentile=new Percentile(10);percentile.setQuantile(100);assertEquals(100,percentile.getQuantile(),0);try {percentile.setQuantile(0);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}try {new Percentile(0);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest.testDerivativesConsistency",0,"public void testDerivativesConsistency()throws DerivativeException,IntegratorException {TestProblem3 pb=new TestProblem3();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.001;GillIntegrator integ=new GillIntegrator(step);checkDerivativesConsistency(integ,pb,1.0e-10);}"
"org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest.testSerialization",0,"public void testSerialization()throws DerivativeException,IntegratorException,IOException,ClassNotFoundException {TestProblem3 pb=new TestProblem3(0.9);double step=(pb.getFinalTime()- pb.getInitialTime())* 0.0003;GillIntegrator integ=new GillIntegrator(step);integ.addStepHandler(new ContinuousOutputModel());integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);ByteArrayOutputStream bos=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(bos);for(StepHandler handler : integ.getStepHandlers()){oos.writeObject(handler);}assertTrue(bos.size()> 700000);assertTrue(bos.size()< 701000);ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());ObjectInputStream ois=new ObjectInputStream(bis);ContinuousOutputModel cm=(ContinuousOutputModel)ois.readObject();Random random=new Random(347588535632l);double maxError=0.0;for (int i=0;i < 1000;++i){double r=random.nextDouble();double time=r * pb.getInitialTime()+ (1.0 - r)* pb.getFinalTime();cm.setInterpolatedTime(time);double[]interpolatedY=cm.getInterpolatedState();double[]theoreticalY=pb.computeTheoreticalState(time);double dx=interpolatedY[0]- theoreticalY[0];double dy=interpolatedY[1]- theoreticalY[1];double error=dx * dx + dy * dy;if (error > maxError){maxError=error;}}assertTrue(maxError < 0.003);}"
"org.apache.commons.math.linear.SingularValueDecompositionImplTest.testMoreRows",0,"public void testMoreRows(){final double[]singularValues={123.456,2.3,1.001,0.999};final int rows=singularValues.length + 2;final int columns=singularValues.length;Random r=new Random(15338437322523l);SingularValueDecomposition svd=new SingularValueDecompositionImpl(createTestMatrix(r,rows,columns,singularValues));double[]computedSV=svd.getSingularValues();assertEquals(singularValues.length,computedSV.length);for (int i=0;i < singularValues.length;++i){assertEquals(singularValues[i],computedSV[i],1.0e-10);}}"
"org.apache.commons.math.linear.SingularValueDecompositionImplTest.testMoreColumns",0,"public void testMoreColumns(){final double[]singularValues={123.456,2.3,1.001,0.999};final int rows=singularValues.length;final int columns=singularValues.length + 2;Random r=new Random(732763225836210l);SingularValueDecomposition svd=new SingularValueDecompositionImpl(createTestMatrix(r,rows,columns,singularValues));double[]computedSV=svd.getSingularValues();assertEquals(singularValues.length,computedSV.length);for (int i=0;i < singularValues.length;++i){assertEquals(singularValues[i],computedSV[i],1.0e-10);}}"
"org.apache.commons.math.linear.SingularValueDecompositionImplTest.testDimensions",0,"/** * test dimensions */public void testDimensions(){RealMatrix matrix=MatrixUtils.createRealMatrix(testSquare);final int m=matrix.getRowDimension();final int n=matrix.getColumnDimension();SingularValueDecomposition svd=new SingularValueDecompositionImpl(matrix);assertEquals(m,svd.getU().getRowDimension());assertEquals(m,svd.getU().getColumnDimension());assertEquals(m,svd.getS().getColumnDimension());assertEquals(n,svd.getS().getColumnDimension());assertEquals(n,svd.getV().getRowDimension());assertEquals(n,svd.getV().getColumnDimension());}"
"org.apache.commons.math.linear.SingularValueDecompositionImplTest.testAEqualUSVt",0,"/** * test A = USVt */public void testAEqualUSVt(){checkAEqualUSVt(MatrixUtils.createRealMatrix(testSquare));checkAEqualUSVt(MatrixUtils.createRealMatrix(testNonSquare));checkAEqualUSVt(MatrixUtils.createRealMatrix(testNonSquare).transpose());}"
"org.apache.commons.math.linear.SingularValueDecompositionImplTest.testUOrthogonal",0,"/** * test that U is orthogonal */public void testUOrthogonal(){checkOrthogonal(new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testSquare)).getU());checkOrthogonal(new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testNonSquare)).getU());checkOrthogonal(new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testNonSquare).transpose()).getU());}"
"org.apache.commons.math.linear.SingularValueDecompositionImplTest.testVOrthogonal",0,"/** * test that V is orthogonal */public void testVOrthogonal(){checkOrthogonal(new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testSquare)).getV());checkOrthogonal(new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testNonSquare)).getV());checkOrthogonal(new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testNonSquare).transpose()).getV());}"
"org.apache.commons.math.linear.SingularValueDecompositionImplTest.testMatricesValues1",0,"/** * test matrices values */public void testMatricesValues1(){SingularValueDecomposition svd=new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testSquare));RealMatrix uRef=MatrixUtils.createRealMatrix(new double[][]{{3.0 / 5.0,-4.0 / 5.0},{4.0 / 5.0,3.0 / 5.0}});RealMatrix sRef=MatrixUtils.createRealMatrix(new double[][]{{3.0,0.0},{0.0,1.0}});RealMatrix vRef=MatrixUtils.createRealMatrix(new double[][]{{4.0 / 5.0,3.0 / 5.0},{3.0 / 5.0,-4.0 / 5.0}});RealMatrix u=svd.getU();assertEquals(0,u.subtract(uRef).getNorm(),normTolerance);RealMatrix s=svd.getS();assertEquals(0,s.subtract(sRef).getNorm(),normTolerance);RealMatrix v=svd.getV();assertEquals(0,v.subtract(vRef).getNorm(),normTolerance);assertTrue(u == svd.getU());assertTrue(s == svd.getS());assertTrue(v == svd.getV());}"
"org.apache.commons.math.linear.SingularValueDecompositionImplTest.testMatricesValues2",0,"/** * test matrices values */public void testMatricesValues2(){RealMatrix uRef=MatrixUtils.createRealMatrix(new double[][]{{0.0 / 5.0,3.0 / 5.0,0.0 / 5.0},{-4.0 / 5.0,0.0 / 5.0,-3.0 / 5.0},{0.0 / 5.0,4.0 / 5.0,0.0 / 5.0},{-3.0 / 5.0,0.0 / 5.0,4.0 / 5.0}});RealMatrix sRef=MatrixUtils.createRealMatrix(new double[][]{{4.0,0.0,0.0},{0.0,3.0,0.0},{0.0,0.0,2.0}});RealMatrix vRef=MatrixUtils.createRealMatrix(new double[][]{{80.0 / 125.0,-60.0 / 125.0,75.0 / 125.0},{24.0 / 125.0,107.0 / 125.0,60.0 / 125.0},{-93.0 / 125.0,-24.0 / 125.0,80.0 / 125.0}});SingularValueDecomposition svd=new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testNonSquare));RealMatrix u=svd.getU();assertEquals(0,u.subtract(uRef).getNorm(),normTolerance);RealMatrix s=svd.getS();assertEquals(0,s.subtract(sRef).getNorm(),normTolerance);RealMatrix v=svd.getV();assertEquals(0,v.subtract(vRef).getNorm(),normTolerance);assertTrue(u == svd.getU());assertTrue(s == svd.getS());assertTrue(v == svd.getV());}"
"org.apache.commons.math.linear.SingularValueDecompositionImplTest.testConditionNumber",0,"/** * test condition number */public void testConditionNumber(){SingularValueDecompositionImpl svd=new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testSquare));assertEquals(3.0,svd.getConditionNumber(),1.0e-15);}"
"org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest.testNoReset",0,"public void testNoReset(){double[]y={0.0,1.0,-2.0};double[][]yDot={{1.0,2.0,-2.0}};EulerStepInterpolator interpolator=new EulerStepInterpolator();interpolator.reinitialize(new DummyEquations(),y,yDot,true);interpolator.storeTime(0);interpolator.shift();interpolator.storeTime(1);double[]result=interpolator.getInterpolatedState();for (int i=0;i < result.length;++i){assertTrue(Math.abs(result[i]- y[i])< 1.0e-10);}}"
"org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest.testInterpolationAtBounds",0,"public void testInterpolationAtBounds()throws DerivativeException {double t0=0;double[]y0={0.0,1.0,-2.0};double[]y=(double[])y0.clone();double[][]yDot={new double[y0.length]};EulerStepInterpolator interpolator=new EulerStepInterpolator();interpolator.reinitialize(new DummyEquations(),y,yDot,true);interpolator.storeTime(t0);double dt=1.0;y[0]=1.0;y[1]=3.0;y[2]=-4.0;yDot[0][0]=(y[0]- y0[0])/ dt;yDot[0][1]=(y[1]- y0[1])/ dt;yDot[0][2]=(y[2]- y0[2])/ dt;interpolator.shift();interpolator.storeTime(t0 + dt);interpolator.setInterpolatedTime(interpolator.getPreviousTime());double[]result=interpolator.getInterpolatedState();for (int i=0;i < result.length;++i){assertTrue(Math.abs(result[i]- y0[i])< 1.0e-10);}interpolator.setInterpolatedTime(interpolator.getCurrentTime());result=interpolator.getInterpolatedState();for (int i=0;i < result.length;++i){assertTrue(Math.abs(result[i]- y[i])< 1.0e-10);}}"
"org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest.testInterpolationInside",0,"public void testInterpolationInside()throws DerivativeException {double[]y={1.0,3.0,-4.0};double[][]yDot={{1.0,2.0,-2.0}};EulerStepInterpolator interpolator=new EulerStepInterpolator();interpolator.reinitialize(new DummyEquations(),y,yDot,true);interpolator.storeTime(0);interpolator.shift();interpolator.storeTime(1);interpolator.setInterpolatedTime(0.1);double[]result=interpolator.getInterpolatedState();assertTrue(Math.abs(result[0]- 0.1)< 1.0e-10);assertTrue(Math.abs(result[1]- 1.2)< 1.0e-10);assertTrue(Math.abs(result[2]+ 2.2)< 1.0e-10);interpolator.setInterpolatedTime(0.5);result=interpolator.getInterpolatedState();assertTrue(Math.abs(result[0]- 0.5)< 1.0e-10);assertTrue(Math.abs(result[1]- 2.0)< 1.0e-10);assertTrue(Math.abs(result[2]+ 3.0)< 1.0e-10);}"
"org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest.testDerivativesConsistency",0,"public void testDerivativesConsistency()throws DerivativeException,IntegratorException {TestProblem3 pb=new TestProblem3();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.001;EulerIntegrator integ=new EulerIntegrator(step);checkDerivativesConsistency(integ,pb,1.0e-10);}"
"org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest.testSerialization",0,"public void testSerialization()throws DerivativeException,IntegratorException,IOException,ClassNotFoundException {TestProblem1 pb=new TestProblem1();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.001;EulerIntegrator integ=new EulerIntegrator(step);integ.addStepHandler(new ContinuousOutputModel());integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);ByteArrayOutputStream bos=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(bos);for(StepHandler handler : integ.getStepHandlers()){oos.writeObject(handler);}assertTrue(bos.size()> 82000);assertTrue(bos.size()< 83000);ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());ObjectInputStream ois=new ObjectInputStream(bis);ContinuousOutputModel cm=(ContinuousOutputModel)ois.readObject();Random random=new Random(347588535632l);double maxError=0.0;for (int i=0;i < 1000;++i){double r=random.nextDouble();double time=r * pb.getInitialTime()+ (1.0 - r)* pb.getFinalTime();cm.setInterpolatedTime(time);double[]interpolatedY=cm.getInterpolatedState();double[]theoreticalY=pb.computeTheoreticalState(time);double dx=interpolatedY[0]- theoreticalY[0];double dy=interpolatedY[1]- theoreticalY[1];double error=dx * dx + dy * dy;if (error > maxError){maxError=error;}}assertTrue(maxError < 0.001);}"
"org.apache.commons.math.distribution.PoissonDistributionTest.testNormalApproximateProbability",0,"/** * Test the normal approximation of the Poisson distribution by calculating P(90 &le;X &le;110)for X = Po(100)and P(9900 &le;X &le;10200)for X  = Po(10000)*/public void testNormalApproximateProbability()throws Exception {PoissonDistribution dist=new PoissonDistributionImpl(100);double result=dist.normalApproximateProbability(110)- dist.normalApproximateProbability(89);assertEquals(0.706281887248,result,1E-10);dist.setMean(10000);result=dist.normalApproximateProbability(10200)- dist.normalApproximateProbability(9899);assertEquals(0.820070051552,result,1E-10);}"
"org.apache.commons.math.distribution.PoissonDistributionTest.testDegenerateInverseCumulativeProbability",0,"/** * Test the degenerate cases of a 0.0 and 1.0 inverse cumulative probability.* @throws Exception*/public void testDegenerateInverseCumulativeProbability()throws Exception {PoissonDistribution dist=new PoissonDistributionImpl(DEFAULT_TEST_POISSON_PARAMETER);assertEquals(Integer.MAX_VALUE,dist.inverseCumulativeProbability(1.0d));assertEquals(-1,dist.inverseCumulativeProbability(0d));}"
"org.apache.commons.math.distribution.PoissonDistributionTest.testMean",0,"public void testMean(){PoissonDistribution dist=new PoissonDistributionImpl(DEFAULT_TEST_POISSON_PARAMETER);try {dist.setMean(-1);fail(""negative mean.  IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}dist.setMean(10.0);assertEquals(10.0,dist.getMean(),0.0);}"
"org.apache.commons.math.distribution.PoissonDistributionTest.testLargeMeanCumulativeProbability",0,"public void testLargeMeanCumulativeProbability(){PoissonDistribution dist=new PoissonDistributionImpl(1.0);double mean=1.0;while (mean <= 10000000.0){dist.setMean(mean);double x=mean * 2.0;double dx=x / 10.0;while (x >= 0){try {dist.cumulativeProbability(x);}catch(MathException ex){fail(""mean of "" + mean + "" and x of ""+ x+ "" caused ""+ ex.getMessage());}x-=dx;}mean*=10.0;}}"
"org.apache.commons.math.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability",0,"public void testLargeMeanInverseCumulativeProbability(){PoissonDistribution dist=new PoissonDistributionImpl(1.0);double mean=1.0;while (mean <= 10000000.0){dist.setMean(mean);double p=0.1;double dp=p;while (p < 1.0){try {dist.inverseCumulativeProbability(p);}catch(MathException ex){fail(""mean of "" + mean + "" and p of ""+ p+ "" caused ""+ ex.getMessage());}p+=dp;}mean*=10.0;}}"
"org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.testSerialization",0,"public void testSerialization(){StatisticalSummaryValues u=new StatisticalSummaryValues(1,2,3,4,5,6);TestUtils.checkSerializedEquality(u);StatisticalSummaryValues t=(StatisticalSummaryValues)TestUtils.serializeAndRecover(u);verifyEquality(u,t);}"
"org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.testEqualsAndHashCode",0,"public void testEqualsAndHashCode(){StatisticalSummaryValues u=new StatisticalSummaryValues(1,2,3,4,5,6);StatisticalSummaryValues t=null;assertTrue(""reflexive"",u.equals(u));assertFalse(""non-null compared to null"",u.equals(t));assertFalse(""wrong type"",u.equals(Double.valueOf(0)));t=new StatisticalSummaryValues(1,2,3,4,5,6);assertTrue(""instances with same data should be equal"",t.equals(u));assertEquals(""hash code"",u.hashCode(),t.hashCode());u=new StatisticalSummaryValues(Double.NaN,2,3,4,5,6);t=new StatisticalSummaryValues(1,Double.NaN,3,4,5,6);assertFalse(""instances based on different data should be different"",(u.equals(t)|| t.equals(u)));}"
"org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.testDimensionCheck",0,"public void testDimensionCheck(){try {TestProblem1 pb=new TestProblem1();new MidpointIntegrator(0.01).integrate(pb,0.0,new double[pb.getDimension()+ 10],1.0,new double[pb.getDimension()+ 10]);fail(""an exception should have been thrown"");}catch(DerivativeException de){fail(""wrong exception caught"");}catch(IntegratorException ie){}}"
"org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.testDecreasingSteps",0,"public void testDecreasingSteps()throws DerivativeException,IntegratorException {TestProblemAbstract[]problems=TestProblemFactory.getProblems();for (int k=0;k < problems.length;++k){double previousError=Double.NaN;for (int i=4;i < 10;++i){TestProblemAbstract pb=(TestProblemAbstract)problems[k].clone();double step=(pb.getFinalTime()- pb.getInitialTime())* Math.pow(2.0,-i);FirstOrderIntegrator integ=new MidpointIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);EventHandler[]functions=pb.getEventsHandlers();for (int l=0;l < functions.length;++l){integ.addEventHandler(functions[l],Double.POSITIVE_INFINITY,1.0e-6 * step,1000);}double stopTime=integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);if (functions.length == 0){assertEquals(pb.getFinalTime(),stopTime,1.0e-10);}double error=handler.getMaximalValueError();if (i > 4){assertTrue(error < Math.abs(previousError));}previousError=error;assertEquals(0,handler.getMaximalTimeError(),1.0e-12);}}}"
"org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.testSmallStep",0,"public void testSmallStep()throws DerivativeException,IntegratorException {TestProblem1 pb=new TestProblem1();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.001;FirstOrderIntegrator integ=new MidpointIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.getLastError()< 2.0e-7);assertTrue(handler.getMaximalValueError()< 1.0e-6);assertEquals(0,handler.getMaximalTimeError(),1.0e-12);assertEquals(""midpoint"",integ.getName());}"
"org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.testBigStep",0,"public void testBigStep()throws DerivativeException,IntegratorException {TestProblem1 pb=new TestProblem1();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.2;FirstOrderIntegrator integ=new MidpointIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.getLastError()> 0.01);assertTrue(handler.getMaximalValueError()> 0.05);assertEquals(0,handler.getMaximalTimeError(),1.0e-12);}"
"org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.testBackward",0,"public void testBackward()throws DerivativeException,IntegratorException {TestProblem5 pb=new TestProblem5();double step=Math.abs(pb.getFinalTime()- pb.getInitialTime())* 0.001;FirstOrderIntegrator integ=new MidpointIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.getLastError()< 6.0e-4);assertTrue(handler.getMaximalValueError()< 6.0e-4);assertEquals(0,handler.getMaximalTimeError(),1.0e-12);assertEquals(""midpoint"",integ.getName());}"
"org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.testStepSize",0,"public void testStepSize()throws DerivativeException,IntegratorException {final double step=1.23456;FirstOrderIntegrator integ=new MidpointIntegrator(step);integ.addStepHandler(new StepHandler(){private static final long serialVersionUID=0L;public void handleStep(StepInterpolator interpolator,boolean isLast){if (!isLast){assertEquals(step,interpolator.getCurrentTime()- interpolator.getPreviousTime(),1.0e-12);}}public boolean requiresDenseOutput(){return false;}public void reset(){}});integ.integrate(new FirstOrderDifferentialEquations(){private static final long serialVersionUID=0L;public void computeDerivatives(double t,double[]y,double[]dot){dot[0]=1.0;}public int getDimension(){return 1;}},0.0,new double[]{0.0},5.0,new double[1]);}"
"org.apache.commons.math.special.ErfTest.testErf0",0,"public void testErf0()throws MathException {double actual=Erf.erf(0.0);double expected=0.0;assertEquals(expected,actual,1.0e-5);}"
"org.apache.commons.math.special.ErfTest.testErf1960",0,"public void testErf1960()throws MathException {double x=1.960 / Math.sqrt(2.0);double actual=Erf.erf(x);double expected=0.95;assertEquals(expected,actual,1.0e-5);actual=Erf.erf(-x);expected=-expected;assertEquals(expected,actual,1.0e-5);}"
"org.apache.commons.math.special.ErfTest.testErf2576",0,"public void testErf2576()throws MathException {double x=2.576 / Math.sqrt(2.0);double actual=Erf.erf(x);double expected=0.99;assertEquals(expected,actual,1.0e-5);actual=Erf.erf(-x);expected=-expected;assertEquals(expected,actual,1.0e-5);}"
"org.apache.commons.math.special.ErfTest.testErf2807",0,"public void testErf2807()throws MathException {double x=2.807 / Math.sqrt(2.0);double actual=Erf.erf(x);double expected=0.995;assertEquals(expected,actual,1.0e-5);actual=Erf.erf(-x);expected=-expected;assertEquals(expected,actual,1.0e-5);}"
"org.apache.commons.math.special.ErfTest.testErf3291",0,"public void testErf3291()throws MathException {double x=3.291 / Math.sqrt(2.0);double actual=Erf.erf(x);double expected=0.999;assertEquals(expected,actual,1.0e-5);actual=Erf.erf(-x);expected=-expected;assertEquals(expected,actual,1.0e-5);}"
"org.apache.commons.math.linear.MatrixIndexExceptionTest.testConstructorMessage",0,"/** */public void testConstructorMessage(){String msg=""message"";MatrixIndexException ex=new MatrixIndexException(msg,null);assertEquals(msg,ex.getMessage());}"
"org.apache.commons.math.geometry.Vector3DTest.testConstructors",0,"public void testConstructors(){double r=Math.sqrt(2)/ 2;checkVector(new Vector3D(2,new Vector3D(Math.PI / 3,-Math.PI / 4)),r,r * Math.sqrt(3),-2 * r);checkVector(new Vector3D(2,Vector3D.PLUS_I,-3,Vector3D.MINUS_K),2,0,3);checkVector(new Vector3D(2,Vector3D.PLUS_I,5,Vector3D.PLUS_J,-3,Vector3D.MINUS_K),2,5,3);checkVector(new Vector3D(2,Vector3D.PLUS_I,5,Vector3D.PLUS_J,5,Vector3D.MINUS_J,-3,Vector3D.MINUS_K),2,0,3);}"
"org.apache.commons.math.geometry.Vector3DTest.testCoordinates",0,"public void testCoordinates(){Vector3D v=new Vector3D(1,2,3);assertTrue(Math.abs(v.getX()- 1)< 1.0e-12);assertTrue(Math.abs(v.getY()- 2)< 1.0e-12);assertTrue(Math.abs(v.getZ()- 3)< 1.0e-12);}"
"org.apache.commons.math.geometry.Vector3DTest.testNorm",0,"public void testNorm(){assertTrue(Math.abs(Vector3D.ZERO.getNorm())< 1.0e-12);assertTrue(Math.abs(new Vector3D(1,2,3).getNorm()- Math.sqrt(14))< 1.0e-12);}"
"org.apache.commons.math.geometry.Vector3DTest.testSubtract",0,"public void testSubtract(){Vector3D v1=new Vector3D(1,2,3);Vector3D v2=new Vector3D(-3,-2,-1);v1=v1.subtract(v2);checkVector(v1,4,4,4);checkVector(v2.subtract(v1),-7,-6,-5);checkVector(v2.subtract(3,v1),-15,-14,-13);}"
"org.apache.commons.math.geometry.Vector3DTest.testAdd",0,"public void testAdd(){Vector3D v1=new Vector3D(1,2,3);Vector3D v2=new Vector3D(-3,-2,-1);v1=v1.add(v2);checkVector(v1,-2,0,2);checkVector(v2.add(v1),-5,-2,1);checkVector(v2.add(3,v1),-9,-2,5);}"
"org.apache.commons.math.geometry.Vector3DTest.testScalarProduct",0,"public void testScalarProduct(){Vector3D v=new Vector3D(1,2,3);v=v.scalarMultiply(3);checkVector(v,3,6,9);checkVector(v.scalarMultiply(0.5),1.5,3,4.5);}"
"org.apache.commons.math.geometry.Vector3DTest.testVectorialProducts",0,"public void testVectorialProducts(){Vector3D v1=new Vector3D(2,1,-4);Vector3D v2=new Vector3D(3,1,-1);assertTrue(Math.abs(Vector3D.dotProduct(v1,v2)- 11)< 1.0e-12);Vector3D v3=Vector3D.crossProduct(v1,v2);checkVector(v3,3,-10,-1);assertTrue(Math.abs(Vector3D.dotProduct(v1,v3))< 1.0e-12);assertTrue(Math.abs(Vector3D.dotProduct(v2,v3))< 1.0e-12);}"
"org.apache.commons.math.geometry.Vector3DTest.testAngular",0,"public void testAngular(){assertEquals(0,Vector3D.PLUS_I.getAlpha(),1.0e-10);assertEquals(0,Vector3D.PLUS_I.getDelta(),1.0e-10);assertEquals(Math.PI / 2,Vector3D.PLUS_J.getAlpha(),1.0e-10);assertEquals(0,Vector3D.PLUS_J.getDelta(),1.0e-10);assertEquals(0,Vector3D.PLUS_K.getAlpha(),1.0e-10);assertEquals(Math.PI / 2,Vector3D.PLUS_K.getDelta(),1.0e-10);Vector3D u=new Vector3D(-1,1,-1);assertEquals(3 * Math.PI / 4,u.getAlpha(),1.0e-10);assertEquals(-1.0 / Math.sqrt(3),Math.sin(u.getDelta()),1.0e-10);}"
"org.apache.commons.math.geometry.Vector3DTest.testAngularSeparation",0,"public void testAngularSeparation(){Vector3D v1=new Vector3D(2,-1,4);Vector3D k=v1.normalize();Vector3D i=k.orthogonal();Vector3D v2=k.scalarMultiply(Math.cos(1.2)).add(i.scalarMultiply(Math.sin(1.2)));assertTrue(Math.abs(Vector3D.angle(v1,v2)- 1.2)< 1.0e-12);}"
"org.apache.commons.math.geometry.Vector3DTest.testNormalize",0,"public void testNormalize(){assertEquals(1.0,new Vector3D(5,-4,2).normalize().getNorm(),1.0e-12);try {Vector3D.ZERO.normalize();fail(""an exception should have been thrown"");}catch(ArithmeticException ae){}catch(Exception e){fail(""wrong exception caught: "" + e.getMessage());}}"
"org.apache.commons.math.geometry.Vector3DTest.testOrthogonal",0,"public void testOrthogonal(){Vector3D v1=new Vector3D(0.1,2.5,1.3);assertEquals(0.0,Vector3D.dotProduct(v1,v1.orthogonal()),1.0e-12);Vector3D v2=new Vector3D(2.3,-0.003,7.6);assertEquals(0.0,Vector3D.dotProduct(v2,v2.orthogonal()),1.0e-12);Vector3D v3=new Vector3D(-1.7,1.4,0.2);assertEquals(0.0,Vector3D.dotProduct(v3,v3.orthogonal()),1.0e-12);try {new Vector3D(0,0,0).orthogonal();fail(""an exception should have been thrown"");}catch(ArithmeticException ae){}catch(Exception e){fail(""wrong exception caught: "" + e.getMessage());}}"
"org.apache.commons.math.geometry.Vector3DTest.testAngle",0,"public void testAngle(){assertEquals(0.22572612855273393616,Vector3D.angle(new Vector3D(1,2,3),new Vector3D(4,5,6)),1.0e-12);assertEquals(7.98595620686106654517199e-8,Vector3D.angle(new Vector3D(1,2,3),new Vector3D(2,4,6.000001)),1.0e-12);assertEquals(3.14159257373023116985197793156,Vector3D.angle(new Vector3D(1,2,3),new Vector3D(-2,-4,-6.000001)),1.0e-12);try {Vector3D.angle(Vector3D.ZERO,Vector3D.PLUS_I);fail(""an exception should have been thrown"");}catch(ArithmeticException ae){}catch(Exception e){fail(""wrong exception caught: "" + e.getMessage());}}"
"org.apache.commons.math.stat.descriptive.rank.MinTest.testSpecialValues",0,"public void testSpecialValues(){double[]testArray={0d,Double.NaN,Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY};Min min=new Min();assertTrue(Double.isNaN(min.getResult()));min.increment(testArray[0]);assertEquals(0d,min.getResult(),0);min.increment(testArray[1]);assertEquals(0d,min.getResult(),0);min.increment(testArray[2]);assertEquals(0d,min.getResult(),0);min.increment(testArray[3]);assertEquals(Double.NEGATIVE_INFINITY,min.getResult(),0);assertEquals(Double.NEGATIVE_INFINITY,min.evaluate(testArray),0);}"
"org.apache.commons.math.stat.descriptive.rank.MinTest.testNaNs",0,"public void testNaNs(){Min min=new Min();double nan=Double.NaN;assertEquals(2d,min.evaluate(new double[]{nan,2d,3d}),0);assertEquals(1d,min.evaluate(new double[]{1d,nan,3d}),0);assertEquals(1d,min.evaluate(new double[]{1d,2d,nan}),0);assertTrue(Double.isNaN(min.evaluate(new double[]{nan,nan,nan})));}"
"org.apache.commons.math.stat.inference.TTestTest.testOneSampleT",0,"public void testOneSampleT()throws Exception {double[]observed={93.0,103.0,95.0,101.0,91.0,105.0,96.0,94.0,101.0,88.0,98.0,94.0,101.0,92.0,95.0};double mu=100.0;SummaryStatistics sampleStats=null;sampleStats=new SummaryStatistics();for (int i=0;i < observed.length;i++){sampleStats.addValue(observed[i]);}assertEquals(""t statistic"",-2.81976445346,testStatistic.t(mu,observed),10E-10);assertEquals(""t statistic"",-2.81976445346,testStatistic.t(mu,sampleStats),10E-10);assertEquals(""p value"",0.0136390585873,testStatistic.tTest(mu,observed),10E-10);assertEquals(""p value"",0.0136390585873,testStatistic.tTest(mu,sampleStats),10E-10);try {testStatistic.t(mu,(double[])null);fail(""arguments too short,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {testStatistic.t(mu,(SummaryStatistics)null);fail(""arguments too short,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {testStatistic.t(mu,emptyObs);fail(""arguments too short,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {testStatistic.t(mu,emptyStats);fail(""arguments too short,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {testStatistic.t(mu,tooShortObs);fail(""insufficient data to compute t statistic,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {testStatistic.tTest(mu,tooShortObs);fail(""insufficient data to perform t test,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {testStatistic.t(mu,tooShortStats);fail(""insufficient data to compute t statistic,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {testStatistic.tTest(mu,tooShortStats);fail(""insufficient data to perform t test,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.stat.inference.TTestTest.testOneSampleTTest",0,"public void testOneSampleTTest()throws Exception {double[]oneSidedP={2d,0d,6d,6d,3d,3d,2d,3d,-6d,6d,6d,6d,3d,0d,1d,1d,0d,2d,3d,3d};SummaryStatistics oneSidedPStats=new SummaryStatistics();for (int i=0;i < oneSidedP.length;i++){oneSidedPStats.addValue(oneSidedP[i]);}assertEquals(""one sample t stat"",3.86485535541,testStatistic.t(0d,oneSidedP),10E-10);assertEquals(""one sample t stat"",3.86485535541,testStatistic.t(0d,oneSidedPStats),1E-10);assertEquals(""one sample p value"",0.000521637019637,testStatistic.tTest(0d,oneSidedP)/ 2d,10E-10);assertEquals(""one sample p value"",0.000521637019637,testStatistic.tTest(0d,oneSidedPStats)/ 2d,10E-5);assertTrue(""one sample t-test reject"",testStatistic.tTest(0d,oneSidedP,0.01));assertTrue(""one sample t-test reject"",testStatistic.tTest(0d,oneSidedPStats,0.01));assertTrue(""one sample t-test accept"",!testStatistic.tTest(0d,oneSidedP,0.0001));assertTrue(""one sample t-test accept"",!testStatistic.tTest(0d,oneSidedPStats,0.0001));try {testStatistic.tTest(0d,oneSidedP,95);fail(""alpha out of range,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {testStatistic.tTest(0d,oneSidedPStats,95);fail(""alpha out of range,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.stat.inference.TTestTest.testTwoSampleTHeterscedastic",0,"public void testTwoSampleTHeterscedastic()throws Exception {double[]sample1={7d,-4d,18d,17d,-3d,-5d,1d,10d,11d,-2d};double[]sample2={-1d,12d,-1d,-3d,3d,-5d,5d,2d,-11d,-1d,-3d};SummaryStatistics sampleStats1=new SummaryStatistics();for (int i=0;i < sample1.length;i++){sampleStats1.addValue(sample1[i]);}SummaryStatistics sampleStats2=new SummaryStatistics();for (int i=0;i < sample2.length;i++){sampleStats2.addValue(sample2[i]);}assertEquals(""two sample heteroscedastic t stat"",1.60371728768,testStatistic.t(sample1,sample2),1E-10);assertEquals(""two sample heteroscedastic t stat"",1.60371728768,testStatistic.t(sampleStats1,sampleStats2),1E-10);assertEquals(""two sample heteroscedastic p value"",0.128839369622,testStatistic.tTest(sample1,sample2),1E-10);assertEquals(""two sample heteroscedastic p value"",0.128839369622,testStatistic.tTest(sampleStats1,sampleStats2),1E-10);assertTrue(""two sample heteroscedastic t-test reject"",testStatistic.tTest(sample1,sample2,0.2));assertTrue(""two sample heteroscedastic t-test reject"",testStatistic.tTest(sampleStats1,sampleStats2,0.2));assertTrue(""two sample heteroscedastic t-test accept"",!testStatistic.tTest(sample1,sample2,0.1));assertTrue(""two sample heteroscedastic t-test accept"",!testStatistic.tTest(sampleStats1,sampleStats2,0.1));try {testStatistic.tTest(sample1,sample2,.95);fail(""alpha out of range,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {testStatistic.tTest(sampleStats1,sampleStats2,.95);fail(""alpha out of range,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {testStatistic.tTest(sample1,tooShortObs,.01);fail(""insufficient data,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {testStatistic.tTest(sampleStats1,tooShortStats,.01);fail(""insufficient data,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {testStatistic.tTest(sample1,tooShortObs);fail(""insufficient data,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {testStatistic.tTest(sampleStats1,tooShortStats);fail(""insufficient data,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {testStatistic.t(sample1,tooShortObs);fail(""insufficient data,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {testStatistic.t(sampleStats1,tooShortStats);fail(""insufficient data,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.stat.inference.TTestTest.testTwoSampleTHomoscedastic",0,"public void testTwoSampleTHomoscedastic()throws Exception {double[]sample1={2,4,6,8,10,97};double[]sample2={4,6,8,10,16};SummaryStatistics sampleStats1=new SummaryStatistics();for (int i=0;i < sample1.length;i++){sampleStats1.addValue(sample1[i]);}SummaryStatistics sampleStats2=new SummaryStatistics();for (int i=0;i < sample2.length;i++){sampleStats2.addValue(sample2[i]);}assertEquals(""two sample homoscedastic t stat"",0.73096310086,testStatistic.homoscedasticT(sample1,sample2),10E-11);assertEquals(""two sample homoscedastic p value"",0.4833963785,testStatistic.homoscedasticTTest(sampleStats1,sampleStats2),1E-10);assertTrue(""two sample homoscedastic t-test reject"",testStatistic.homoscedasticTTest(sample1,sample2,0.49));assertTrue(""two sample homoscedastic t-test accept"",!testStatistic.homoscedasticTTest(sample1,sample2,0.48));}"
"org.apache.commons.math.stat.inference.TTestTest.testSmallSamples",0,"public void testSmallSamples()throws Exception {double[]sample1={1d,3d};double[]sample2={4d,5d};assertEquals(-2.2360679775,testStatistic.t(sample1,sample2),1E-10);assertEquals(0.198727388935,testStatistic.tTest(sample1,sample2),1E-10);}"
"org.apache.commons.math.stat.inference.TTestTest.testPaired",0,"public void testPaired()throws Exception {double[]sample1={1d,3d,5d,7d};double[]sample2={0d,6d,11d,2d};double[]sample3={5d,7d,8d,10d};assertEquals(-0.3133,testStatistic.pairedT(sample1,sample2),1E-4);assertEquals(0.774544295819,testStatistic.pairedTTest(sample1,sample2),1E-10);assertEquals(0.001208,testStatistic.pairedTTest(sample1,sample3),1E-6);assertFalse(testStatistic.pairedTTest(sample1,sample3,.001));assertTrue(testStatistic.pairedTTest(sample1,sample3,.002));}"
"org.apache.commons.math.linear.EigenSolverTest.testNonInvertible",0,"/** * test non invertible matrix */public void testNonInvertible(){Random r=new Random(9994100315209l);RealMatrix m=EigenDecompositionImplTest.createTestMatrix(r,new double[]{1.0,0.0,-1.0,-2.0,-3.0});DecompositionSolver es=new EigenDecompositionImpl(m,MathUtils.SAFE_MIN).getSolver();assertFalse(es.isNonSingular());try {es.getInverse();fail(""an exception should have been thrown"");}catch(InvalidMatrixException ime){}catch(Exception e){fail(""wrong exception caught"");}}"
"org.apache.commons.math.linear.EigenSolverTest.testInvertible",0,"/** * test invertible matrix */public void testInvertible(){Random r=new Random(9994100315209l);RealMatrix m=EigenDecompositionImplTest.createTestMatrix(r,new double[]{1.0,0.5,-1.0,-2.0,-3.0});DecompositionSolver es=new EigenDecompositionImpl(m,MathUtils.SAFE_MIN).getSolver();assertTrue(es.isNonSingular());RealMatrix inverse=es.getInverse();RealMatrix error=m.multiply(inverse).subtract(MatrixUtils.createRealIdentityMatrix(m.getRowDimension()));assertEquals(0,error.getNorm(),4.0e-15);}"
"org.apache.commons.math.linear.EigenSolverTest.testSolveDimensionErrors",0,"/** * test solve dimension errors */public void testSolveDimensionErrors(){DecompositionSolver es=new EigenDecompositionImpl(matrix,MathUtils.SAFE_MIN).getSolver();RealMatrix b=MatrixUtils.createRealMatrix(new double[2][2]);try {es.solve(b);fail(""an exception should have been thrown"");}catch(IllegalArgumentException iae){}catch(Exception e){fail(""wrong exception caught"");}try {es.solve(b.getColumn(0));fail(""an exception should have been thrown"");}catch(IllegalArgumentException iae){}catch(Exception e){fail(""wrong exception caught"");}try {es.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)));fail(""an exception should have been thrown"");}catch(IllegalArgumentException iae){}catch(Exception e){fail(""wrong exception caught"");}}"
"org.apache.commons.math.linear.EigenSolverTest.testSolve",0,"/** * test solve */public void testSolve(){RealMatrix m=MatrixUtils.createRealMatrix(new double[][]{{91,5,29,32,40,14},{5,34,-1,0,2,-1},{29,-1,12,9,21,8},{32,0,9,14,9,0},{40,2,21,9,51,19},{14,-1,8,0,19,14}});DecompositionSolver es=new EigenDecompositionImpl(m,MathUtils.SAFE_MIN).getSolver();RealMatrix b=MatrixUtils.createRealMatrix(new double[][]{{1561,269,188},{69,-21,70},{739,108,63},{324,86,59},{1624,194,107},{796,69,36}});RealMatrix xRef=MatrixUtils.createRealMatrix(new double[][]{{1,2,1},{2,-1,2},{4,2,3},{8,-1,0},{16,2,0},{32,-1,0}});assertEquals(0,es.solve(b).subtract(xRef).getNorm(),2.0e-12);for (int i=0;i < b.getColumnDimension();++i){assertEquals(0,new RealVectorImpl(es.solve(b.getColumn(i))).subtract(xRef.getColumnVector(i)).getNorm(),2.0e-11);}for (int i=0;i < b.getColumnDimension();++i){assertEquals(0,es.solve(b.getColumnVector(i)).subtract(xRef.getColumnVector(i)).getNorm(),2.0e-11);}for (int i=0;i < b.getColumnDimension();++i){RealVectorImplTest.RealVectorTestImpl v=new RealVectorImplTest.RealVectorTestImpl(b.getColumn(i));assertEquals(0,es.solve(v).subtract(xRef.getColumnVector(i)).getNorm(),2.0e-11);}}"
"org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest.testDimensionCheck",0,"public void testDimensionCheck(){try {TestProblem1 pb=new TestProblem1();DormandPrince54Integrator integrator=new DormandPrince54Integrator(0.0,1.0,1.0e-10,1.0e-10);integrator.integrate(pb,0.0,new double[pb.getDimension()+ 10],1.0,new double[pb.getDimension()+ 10]);fail(""an exception should have been thrown"");}catch(DerivativeException de){fail(""wrong exception caught"");}catch(IntegratorException ie){}}"
"org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest.testMinStep",0,"public void testMinStep()throws DerivativeException,IntegratorException {try {TestProblem1 pb=new TestProblem1();double minStep=0.1 * (pb.getFinalTime()- pb.getInitialTime());double maxStep=pb.getFinalTime()- pb.getInitialTime();double[]vecAbsoluteTolerance={1.0e-15,1.0e-16};double[]vecRelativeTolerance={1.0e-15,1.0e-16};FirstOrderIntegrator integ=new DormandPrince54Integrator(minStep,maxStep,vecAbsoluteTolerance,vecRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);fail(""an exception should have been thrown"");}catch(DerivativeException de){fail(""wrong exception caught"");}catch(IntegratorException ie){}}"
"org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest.testSmallLastStep",0,"public void testSmallLastStep()throws DerivativeException,IntegratorException {TestProblemAbstract pb=new TestProblem5();double minStep=1.25;double maxStep=Math.abs(pb.getFinalTime()- pb.getInitialTime());double scalAbsoluteTolerance=6.0e-4;double scalRelativeTolerance=6.0e-4;AdaptiveStepsizeIntegrator integ=new DormandPrince54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);DP54SmallLastHandler handler=new DP54SmallLastHandler(minStep);integ.addStepHandler(handler);integ.setInitialStepSize(1.7);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.wasLastSeen());assertEquals(""Dormand-Prince 5(4)"",integ.getName());}"
"org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest.testBackward",0,"public void testBackward()throws DerivativeException,IntegratorException {TestProblem5 pb=new TestProblem5();double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=0.01 * scalAbsoluteTolerance;FirstOrderIntegrator integ=new DormandPrince54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.getLastError()< 2.0e-7);assertTrue(handler.getMaximalValueError()< 2.0e-7);assertEquals(0,handler.getMaximalTimeError(),1.0e-12);assertEquals(""Dormand-Prince 5(4)"",integ.getName());}"
"org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest.testIncreasingTolerance",0,"public void testIncreasingTolerance()throws DerivativeException,IntegratorException {int previousCalls=Integer.MAX_VALUE;for (int i=-12;i < -2;++i){TestProblem1 pb=new TestProblem1();double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=Math.pow(10.0,i);double scalRelativeTolerance=0.01 * scalAbsoluteTolerance;EmbeddedRungeKuttaIntegrator integ=new DormandPrince54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.setSafety(0.8);integ.setMaxGrowth(5.0);integ.setMinReduction(0.3);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertEquals(0.8,integ.getSafety(),1.0e-12);assertEquals(5.0,integ.getMaxGrowth(),1.0e-12);assertEquals(0.3,integ.getMinReduction(),1.0e-12);assertTrue(handler.getMaximalValueError()< (0.7 * scalAbsoluteTolerance));assertEquals(0,handler.getMaximalTimeError(),1.0e-12);int calls=pb.getCalls();assertTrue(calls <= previousCalls);previousCalls=calls;}}"
"org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest.testEvents",0,"public void testEvents()throws DerivativeException,IntegratorException {TestProblem4 pb=new TestProblem4();double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=0.01 * scalAbsoluteTolerance;FirstOrderIntegrator integ=new DormandPrince54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);EventHandler[]functions=pb.getEventsHandlers();for (int l=0;l < functions.length;++l){integ.addEventHandler(functions[l],Double.POSITIVE_INFINITY,1.0e-8 * maxStep,1000);}assertEquals(functions.length,integ.getEventHandlers().size());integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.getMaximalValueError()< 5.0e-6);assertEquals(0,handler.getMaximalTimeError(),1.0e-12);assertEquals(12.0,handler.getLastTime(),1.0e-8 * maxStep);integ.clearEventHandlers();assertEquals(0,integ.getEventHandlers().size());}"
"org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest.testKepler",0,"public void testKepler()throws DerivativeException,IntegratorException {final TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=scalAbsoluteTolerance;FirstOrderIntegrator integ=new DormandPrince54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);integ.addStepHandler(new KeplerHandler(pb));integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(pb.getCalls()< 2800);}"
"org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest.testVariableSteps",0,"public void testVariableSteps()throws DerivativeException,IntegratorException {final TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=scalAbsoluteTolerance;FirstOrderIntegrator integ=new DormandPrince54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);integ.addStepHandler(new VariableHandler());double stopTime=integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertEquals(pb.getFinalTime(),stopTime,1.0e-10);}"
"org.apache.commons.math.analysis.RombergIntegratorTest.testSinFunction",0,"/** * Test of integrator for the sine function.*/public void testSinFunction()throws MathException {UnivariateRealFunction f=new SinFunction();UnivariateRealIntegrator integrator=new RombergIntegrator(f);double min,max,expected,result,tolerance;min=0;max=Math.PI;expected=2;tolerance=Math.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(min,max);assertEquals(expected,result,tolerance);min=-Math.PI / 3;max=0;expected=-0.5;tolerance=Math.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(min,max);assertEquals(expected,result,tolerance);}"
"org.apache.commons.math.analysis.RombergIntegratorTest.testQuinticFunction",0,"/** * Test of integrator for the quintic function.*/public void testQuinticFunction()throws MathException {UnivariateRealFunction f=new QuinticFunction();UnivariateRealIntegrator integrator=new RombergIntegrator(f);double min,max,expected,result,tolerance;min=0;max=1;expected=-1.0 / 48;tolerance=Math.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(min,max);assertEquals(expected,result,tolerance);min=0;max=0.5;expected=11.0 / 768;tolerance=Math.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(min,max);assertEquals(expected,result,tolerance);min=-1;max=4;expected=2048 / 3.0 - 78 + 1.0 / 48;tolerance=Math.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(min,max);assertEquals(expected,result,tolerance);}"
"org.apache.commons.math.analysis.RombergIntegratorTest.testParameters",0,"/** * Test of parameters for the integrator.*/public void testParameters()throws Exception {UnivariateRealFunction f=new SinFunction();UnivariateRealIntegrator integrator=new RombergIntegrator(f);try {integrator.integrate(1,-1);fail(""Expecting IllegalArgumentException - bad interval"");}catch(IllegalArgumentException ex){}try {integrator.setMinimalIterationCount(5);integrator.setMaximalIterationCount(4);integrator.integrate(-1,1);fail(""Expecting IllegalArgumentException - bad iteration limits"");}catch(IllegalArgumentException ex){}try {integrator.setMinimalIterationCount(10);integrator.setMaximalIterationCount(50);integrator.integrate(-1,1);fail(""Expecting IllegalArgumentException - bad iteration limits"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.stat.descriptive.summary.ProductTest.testSpecialValues",0,"public void testSpecialValues(){Product product=new Product();assertTrue(Double.isNaN(product.getResult()));product.increment(1);assertEquals(1,product.getResult(),0);product.increment(Double.POSITIVE_INFINITY);assertEquals(Double.POSITIVE_INFINITY,product.getResult(),0);product.increment(Double.NEGATIVE_INFINITY);assertEquals(Double.NEGATIVE_INFINITY,product.getResult(),0);product.increment(Double.NaN);assertTrue(Double.isNaN(product.getResult()));product.increment(1);assertTrue(Double.isNaN(product.getResult()));}"
"org.apache.commons.math.stat.CertifiedDataTest.testSummaryStatistics",0,"/** * Test SummaryStatistics - implementations that do not store the data and use single pass algorithms to compute statistics*/public void testSummaryStatistics()throws Exception {SummaryStatistics u=new SummaryStatistics();loadStats(""data/PiDigits.txt"",u);assertEquals(""PiDigits: std"",std,u.getStandardDeviation(),1E-13);assertEquals(""PiDigits: mean"",mean,u.getMean(),1E-13);loadStats(""data/Mavro.txt"",u);assertEquals(""Mavro: std"",std,u.getStandardDeviation(),1E-14);assertEquals(""Mavro: mean"",mean,u.getMean(),1E-14);loadStats(""data/Michelso.txt"",u);assertEquals(""Michelso: std"",std,u.getStandardDeviation(),1E-13);assertEquals(""Michelso: mean"",mean,u.getMean(),1E-13);loadStats(""data/NumAcc1.txt"",u);assertEquals(""NumAcc1: std"",std,u.getStandardDeviation(),1E-14);assertEquals(""NumAcc1: mean"",mean,u.getMean(),1E-14);loadStats(""data/NumAcc2.txt"",u);assertEquals(""NumAcc2: std"",std,u.getStandardDeviation(),1E-14);assertEquals(""NumAcc2: mean"",mean,u.getMean(),1E-14);}"
"org.apache.commons.math.stat.CertifiedDataTest.testDescriptiveStatistics",0,"/** * Test DescriptiveStatistics - implementations that store full array of values and execute multi-pass algorithms*/public void testDescriptiveStatistics()throws Exception {DescriptiveStatistics u=new DescriptiveStatistics();loadStats(""data/PiDigits.txt"",u);assertEquals(""PiDigits: std"",std,u.getStandardDeviation(),1E-14);assertEquals(""PiDigits: mean"",mean,u.getMean(),1E-14);loadStats(""data/Mavro.txt"",u);assertEquals(""Mavro: std"",std,u.getStandardDeviation(),1E-14);assertEquals(""Mavro: mean"",mean,u.getMean(),1E-14);loadStats(""data/Michelso.txt"",u);assertEquals(""Michelso: std"",std,u.getStandardDeviation(),1E-14);assertEquals(""Michelso: mean"",mean,u.getMean(),1E-14);loadStats(""data/NumAcc1.txt"",u);assertEquals(""NumAcc1: std"",std,u.getStandardDeviation(),1E-14);assertEquals(""NumAcc1: mean"",mean,u.getMean(),1E-14);loadStats(""data/NumAcc2.txt"",u);assertEquals(""NumAcc2: std"",std,u.getStandardDeviation(),1E-14);assertEquals(""NumAcc2: mean"",mean,u.getMean(),1E-14);}"
"org.apache.commons.math.stat.descriptive.moment.VarianceTest.testNaN",0,"/** * Make sure Double.NaN is returned iff n = 0*/public void testNaN(){StandardDeviation std=new StandardDeviation();assertTrue(Double.isNaN(std.getResult()));std.increment(1d);assertEquals(0d,std.getResult(),0);}"
"org.apache.commons.math.stat.descriptive.moment.VarianceTest.testPopulation",0,"/** * Test population version of variance*/public void testPopulation(){double[]values={-1.0d,3.1d,4.0d,-2.1d,22d,11.7d,3d,14d};SecondMoment m=new SecondMoment();m.evaluate(values);Variance v1=new Variance();v1.setBiasCorrected(false);assertEquals(populationVariance(values),v1.evaluate(values),1E-14);v1.incrementAll(values);assertEquals(populationVariance(values),v1.getResult(),1E-14);v1=new Variance(false,m);assertEquals(populationVariance(values),v1.getResult(),1E-14);v1=new Variance(false);assertEquals(populationVariance(values),v1.evaluate(values),1E-14);v1.incrementAll(values);assertEquals(populationVariance(values),v1.getResult(),1E-14);}"
"org.apache.commons.math.stat.descriptive.moment.MeanTest.testSmallSamples",0,"public void testSmallSamples(){Mean mean=new Mean();assertTrue(Double.isNaN(mean.getResult()));mean.increment(1d);assertEquals(1d,mean.getResult(),0);}"
"org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testStats",0,"/** * test stats */public void testStats(){List<Object> externalList=new ArrayList<Object>();DescriptiveStatistics u=new ListUnivariateImpl(externalList,transformers);assertEquals(""total count"",0,u.getN(),tolerance);u.addValue(one);u.addValue(two);u.addValue(two);u.addValue(three);assertEquals(""N"",n,u.getN(),tolerance);assertEquals(""sum"",sum,u.getSum(),tolerance);assertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);assertEquals(""var"",var,u.getVariance(),tolerance);assertEquals(""std"",std,u.getStandardDeviation(),tolerance);assertEquals(""mean"",mean,u.getMean(),tolerance);assertEquals(""min"",min,u.getMin(),tolerance);assertEquals(""max"",max,u.getMax(),tolerance);u.clear();assertEquals(""total count"",0,u.getN(),tolerance);}"
"org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testN0andN1Conditions",0,"public void testN0andN1Conditions()throws Exception {DescriptiveStatistics u=new ListUnivariateImpl(new ArrayList<Object>(),transformers);assertTrue(""Mean of n = 0 set should be NaN"",Double.isNaN(u.getMean()));assertTrue(""Standard Deviation of n = 0 set should be NaN"",Double.isNaN(u.getStandardDeviation()));assertTrue(""Variance of n = 0 set should be NaN"",Double.isNaN(u.getVariance()));u.addValue(one);assertTrue(""Mean of n = 1 set should be value of single item n1,instead it is "" + u.getMean(),u.getMean()== one);assertTrue(""StdDev of n = 1 set should be zero,instead it is: "" + u.getStandardDeviation(),u.getStandardDeviation()== 0);assertTrue(""Variance of n = 1 set should be zero"",u.getVariance()== 0);}"
"org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testSkewAndKurtosis",0,"public void testSkewAndKurtosis(){ListUnivariateImpl u=new ListUnivariateImpl(new ArrayList<Object>(),transformers);u.addObject(""12.5"");u.addObject(Integer.valueOf(12));u.addObject(""11.8"");u.addObject(""14.2"");u.addObject(new Foo());u.addObject(""14.5"");u.addObject(Long.valueOf(21));u.addObject(""8.2"");u.addObject(""10.3"");u.addObject(""11.3"");u.addObject(Float.valueOf(14.1f));u.addObject(""9.9"");u.addObject(""12.2"");u.addObject(new Bar());u.addObject(""12.1"");u.addObject(""11"");u.addObject(Double.valueOf(19.8));u.addObject(""11"");u.addObject(""10"");u.addObject(""8.8"");u.addObject(""9"");u.addObject(""12.3"");assertEquals(""mean"",12.40455,u.getMean(),0.0001);assertEquals(""variance"",10.00236,u.getVariance(),0.0001);assertEquals(""skewness"",1.437424,u.getSkewness(),0.0001);assertEquals(""kurtosis"",2.37719,u.getKurtosis(),0.0001);}"
"org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testProductAndGeometricMean",0,"public void testProductAndGeometricMean()throws Exception {ListUnivariateImpl u=new ListUnivariateImpl(new ArrayList<Object>(),transformers);u.setWindowSize(10);u.addValue(1.0);u.addValue(2.0);u.addValue(3.0);u.addValue(4.0);assertEquals(""Geometric mean not expected"",2.213364,u.getGeometricMean(),0.00001);for (int i=0;i < 10;i++){u.addValue(i + 2);}assertEquals(""Geometric mean not expected"",5.755931,u.getGeometricMean(),0.00001);}"
"org.apache.commons.math.linear.SparseRealMatrixTest.testDimensions",0,"/** * test dimensions */public void testDimensions(){SparseRealMatrix m=createSparseMatrix(testData);SparseRealMatrix m2=createSparseMatrix(testData2);assertEquals(""testData row dimension"",3,m.getRowDimension());assertEquals(""testData column dimension"",3,m.getColumnDimension());assertTrue(""testData is square"",m.isSquare());assertEquals(""testData2 row dimension"",m2.getRowDimension(),2);assertEquals(""testData2 column dimension"",m2.getColumnDimension(),3);assertTrue(""testData2 is not square"",!m2.isSquare());}"
"org.apache.commons.math.linear.SparseRealMatrixTest.testCopyFunctions",0,"/** * test copy functions */public void testCopyFunctions(){SparseRealMatrix m1=createSparseMatrix(testData);RealMatrix m2=m1.copy();assertTrue(m2 instanceof SparseRealMatrix);assertEquals(((SparseRealMatrix)m2),m1);SparseRealMatrix m3=createSparseMatrix(testData);RealMatrix m4=m3.copy();assertTrue(m4 instanceof SparseRealMatrix);assertEquals(((SparseRealMatrix)m4),m3);}"
"org.apache.commons.math.linear.SparseRealMatrixTest.testAdd",0,"/** * test add */public void testAdd(){SparseRealMatrix m=createSparseMatrix(testData);SparseRealMatrix mInv=createSparseMatrix(testDataInv);SparseRealMatrix mDataPlusInv=createSparseMatrix(testDataPlusInv);RealMatrix mPlusMInv=m.add(mInv);for (int row=0;row < m.getRowDimension();row++){for (int col=0;col < m.getColumnDimension();col++){assertEquals(""sum entry entry"",mDataPlusInv.getEntry(row,col),mPlusMInv.getEntry(row,col),entryTolerance);}}}"
"org.apache.commons.math.linear.SparseRealMatrixTest.testAddFail",0,"/** * test add failure */public void testAddFail(){SparseRealMatrix m=createSparseMatrix(testData);SparseRealMatrix m2=createSparseMatrix(testData2);try {m.add(m2);fail(""IllegalArgumentException expected"");}catch(IllegalArgumentException ex){;}}"
"org.apache.commons.math.linear.SparseRealMatrixTest.testNorm",0,"/** * test norm */public void testNorm(){SparseRealMatrix m=createSparseMatrix(testData);SparseRealMatrix m2=createSparseMatrix(testData2);assertEquals(""testData norm"",14d,m.getNorm(),entryTolerance);assertEquals(""testData2 norm"",7d,m2.getNorm(),entryTolerance);}"
"org.apache.commons.math.linear.SparseRealMatrixTest.testPlusMinus",0,"/** * test m-n = m + -n */public void testPlusMinus(){SparseRealMatrix m=createSparseMatrix(testData);SparseRealMatrix n=createSparseMatrix(testDataInv);assertClose(""m-n = m + -n"",m.subtract(n),n.scalarMultiply(-1d).add(m),entryTolerance);try {m.subtract(createSparseMatrix(testData2));fail(""Expecting illegalArgumentException"");}catch(IllegalArgumentException ex){;}}"
"org.apache.commons.math.linear.SparseRealMatrixTest.testMultiply",0,"/** * test multiply */public void testMultiply(){SparseRealMatrix m=createSparseMatrix(testData);SparseRealMatrix mInv=createSparseMatrix(testDataInv);SparseRealMatrix identity=createSparseMatrix(id);SparseRealMatrix m2=createSparseMatrix(testData2);assertClose(""inverse multiply"",m.multiply(mInv),identity,entryTolerance);assertClose(""inverse multiply"",mInv.multiply(m),identity,entryTolerance);assertClose(""identity multiply"",m.multiply(identity),m,entryTolerance);assertClose(""identity multiply"",identity.multiply(mInv),mInv,entryTolerance);assertClose(""identity multiply"",m2.multiply(identity),m2,entryTolerance);try {m.multiply(createSparseMatrix(bigSingular));fail(""Expecting illegalArgumentException"");}catch(IllegalArgumentException ex){;}}"
"org.apache.commons.math.linear.SparseRealMatrixTest.testMultiply2",0,"public void testMultiply2(){RealMatrix m3=createSparseMatrix(d3);RealMatrix m4=createSparseMatrix(d4);RealMatrix m5=createSparseMatrix(d5);assertClose(""m3*m4=m5"",m3.multiply(m4),m5,entryTolerance);}"
"org.apache.commons.math.linear.SparseRealMatrixTest.testTrace",0,"/** * test trace */public void testTrace(){RealMatrix m=createSparseMatrix(id);assertEquals(""identity trace"",3d,m.getTrace(),entryTolerance);m=createSparseMatrix(testData2);try {m.getTrace();fail(""Expecting NonSquareMatrixException"");}catch(NonSquareMatrixException ex){;}}"
"org.apache.commons.math.linear.SparseRealMatrixTest.testScalarAdd",0,"/** * test sclarAdd */public void testScalarAdd(){RealMatrix m=createSparseMatrix(testData);assertClose(""scalar add"",createSparseMatrix(testDataPlus2),m.scalarAdd(2d),entryTolerance);}"
"org.apache.commons.math.linear.SparseRealMatrixTest.testOperate",0,"/** * test operate */public void testOperate(){RealMatrix m=createSparseMatrix(id);assertClose(""identity operate"",testVector,m.operate(testVector),entryTolerance);assertClose(""identity operate"",testVector,m.operate(new RealVectorImpl(testVector)).getData(),entryTolerance);m=createSparseMatrix(bigSingular);try {m.operate(testVector);fail(""Expecting illegalArgumentException"");}catch(IllegalArgumentException ex){;}}"
"org.apache.commons.math.linear.SparseRealMatrixTest.testMath209",0,"/** * test issue MATH-209 */public void testMath209(){RealMatrix a=createSparseMatrix(new double[][]{{1,2},{3,4},{5,6}});double[]b=a.operate(new double[]{1,1});assertEquals(a.getRowDimension(),b.length);assertEquals(3.0,b[0],1.0e-12);assertEquals(7.0,b[1],1.0e-12);assertEquals(11.0,b[2],1.0e-12);}"
"org.apache.commons.math.linear.SparseRealMatrixTest.testTranspose",0,"/** * test transpose */public void testTranspose(){RealMatrix m=createSparseMatrix(testData);RealMatrix mIT=new LUDecompositionImpl(m).getSolver().getInverse().transpose();RealMatrix mTI=new LUDecompositionImpl(m.transpose()).getSolver().getInverse();assertClose(""inverse-transpose"",mIT,mTI,normTolerance);m=createSparseMatrix(testData2);RealMatrix mt=createSparseMatrix(testData2T);assertClose(""transpose"",mt,m.transpose(),normTolerance);}"
"org.apache.commons.math.linear.SparseRealMatrixTest.testPremultiplyVector",0,"/** * test preMultiply by vector */public void testPremultiplyVector(){RealMatrix m=createSparseMatrix(testData);assertClose(""premultiply"",m.preMultiply(testVector),preMultTest,normTolerance);assertClose(""premultiply"",m.preMultiply(new RealVectorImpl(testVector).getData()),preMultTest,normTolerance);m=createSparseMatrix(bigSingular);try {m.preMultiply(testVector);fail(""expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){;}}"
"org.apache.commons.math.linear.SparseRealMatrixTest.testPremultiply",0,"public void testPremultiply(){RealMatrix m3=createSparseMatrix(d3);RealMatrix m4=createSparseMatrix(d4);RealMatrix m5=createSparseMatrix(d5);assertClose(""m3*m4=m5"",m4.preMultiply(m3),m5,entryTolerance);SparseRealMatrix m=createSparseMatrix(testData);SparseRealMatrix mInv=createSparseMatrix(testDataInv);SparseRealMatrix identity=createSparseMatrix(id);assertClose(""inverse multiply"",m.preMultiply(mInv),identity,entryTolerance);assertClose(""inverse multiply"",mInv.preMultiply(m),identity,entryTolerance);assertClose(""identity multiply"",m.preMultiply(identity),m,entryTolerance);assertClose(""identity multiply"",identity.preMultiply(mInv),mInv,entryTolerance);try {m.preMultiply(createSparseMatrix(bigSingular));fail(""Expecting illegalArgumentException"");}catch(IllegalArgumentException ex){;}}"
"org.apache.commons.math.linear.SparseRealMatrixTest.testGetVectors",0,"public void testGetVectors(){RealMatrix m=createSparseMatrix(testData);assertClose(""get row"",m.getRow(0),testDataRow1,entryTolerance);assertClose(""get col"",m.getColumn(2),testDataCol3,entryTolerance);try {m.getRow(10);fail(""expecting MatrixIndexException"");}catch(MatrixIndexException ex){;}try {m.getColumn(-1);fail(""expecting MatrixIndexException"");}catch(MatrixIndexException ex){;}}"
"org.apache.commons.math.linear.SparseRealMatrixTest.testGetEntry",0,"public void testGetEntry(){RealMatrix m=createSparseMatrix(testData);assertEquals(""get entry"",m.getEntry(0,1),2d,entryTolerance);try {m.getEntry(10,4);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}}"
"org.apache.commons.math.linear.SparseRealMatrixTest.testExamples",0,"/** * test examples in user guide */public void testExamples(){double[][]matrixData={{1d,2d,3d},{2d,5d,3d}};RealMatrix m=createSparseMatrix(matrixData);double[][]matrixData2={{1d,2d},{2d,5d},{1d,7d}};RealMatrix n=createSparseMatrix(matrixData2);RealMatrix p=m.multiply(n);assertEquals(2,p.getRowDimension());assertEquals(2,p.getColumnDimension());RealMatrix pInverse=new LUDecompositionImpl(p).getSolver().getInverse();assertEquals(2,pInverse.getRowDimension());assertEquals(2,pInverse.getColumnDimension());double[][]coefficientsData={{2,3,-2},{-1,7,6},{4,-3,-5}};RealMatrix coefficients=createSparseMatrix(coefficientsData);double[]constants={1,-2,1};double[]solution=new LUDecompositionImpl(coefficients).getSolver().solve(constants);assertEquals(2 * solution[0]+ 3 * solution[1]- 2 * solution[2],constants[0],1E-12);assertEquals(-1 * solution[0]+ 7 * solution[1]+ 6 * solution[2],constants[1],1E-12);assertEquals(4 * solution[0]- 3 * solution[1]- 5 * solution[2],constants[2],1E-12);}"
"org.apache.commons.math.linear.SparseRealMatrixTest.testSubMatrix",0,"public void testSubMatrix(){RealMatrix m=createSparseMatrix(subTestData);RealMatrix mRows23Cols00=createSparseMatrix(subRows23Cols00);RealMatrix mRows00Cols33=createSparseMatrix(subRows00Cols33);RealMatrix mRows01Cols23=createSparseMatrix(subRows01Cols23);RealMatrix mRows02Cols13=createSparseMatrix(subRows02Cols13);RealMatrix mRows03Cols12=createSparseMatrix(subRows03Cols12);RealMatrix mRows03Cols123=createSparseMatrix(subRows03Cols123);RealMatrix mRows20Cols123=createSparseMatrix(subRows20Cols123);RealMatrix mRows31Cols31=createSparseMatrix(subRows31Cols31);assertEquals(""Rows23Cols00"",mRows23Cols00,m.getSubMatrix(2,3,0,0));assertEquals(""Rows00Cols33"",mRows00Cols33,m.getSubMatrix(0,0,3,3));assertEquals(""Rows01Cols23"",mRows01Cols23,m.getSubMatrix(0,1,2,3));assertEquals(""Rows02Cols13"",mRows02Cols13,m.getSubMatrix(new int[]{0,2},new int[]{1,3}));assertEquals(""Rows03Cols12"",mRows03Cols12,m.getSubMatrix(new int[]{0,3},new int[]{1,2}));assertEquals(""Rows03Cols123"",mRows03Cols123,m.getSubMatrix(new int[]{0,3},new int[]{1,2,3}));assertEquals(""Rows20Cols123"",mRows20Cols123,m.getSubMatrix(new int[]{2,0},new int[]{1,2,3}));assertEquals(""Rows31Cols31"",mRows31Cols31,m.getSubMatrix(new int[]{3,1},new int[]{3,1}));assertEquals(""Rows31Cols31"",mRows31Cols31,m.getSubMatrix(new int[]{3,1},new int[]{3,1}));try {m.getSubMatrix(1,0,2,4);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.getSubMatrix(-1,1,2,2);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.getSubMatrix(1,0,2,2);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.getSubMatrix(1,0,2,4);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.getSubMatrix(new int[]{},new int[]{0});fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.getSubMatrix(new int[]{0},new int[]{4});fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}}"
"org.apache.commons.math.linear.SparseRealMatrixTest.testGetRowMatrix",0,"public void testGetRowMatrix(){RealMatrix m=createSparseMatrix(subTestData);RealMatrix mRow0=createSparseMatrix(subRow0);RealMatrix mRow3=createSparseMatrix(subRow3);assertEquals(""Row0"",mRow0,m.getRowMatrix(0));assertEquals(""Row3"",mRow3,m.getRowMatrix(3));try {m.getRowMatrix(-1);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.getRowMatrix(4);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}}"
"org.apache.commons.math.linear.SparseRealMatrixTest.testGetColumnMatrix",0,"public void testGetColumnMatrix(){RealMatrix m=createSparseMatrix(subTestData);RealMatrix mColumn1=createSparseMatrix(subColumn1);RealMatrix mColumn3=createSparseMatrix(subColumn3);assertEquals(""Column1"",mColumn1,m.getColumnMatrix(1));assertEquals(""Column3"",mColumn3,m.getColumnMatrix(3));try {m.getColumnMatrix(-1);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.getColumnMatrix(4);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}}"
"org.apache.commons.math.linear.SparseRealMatrixTest.testGetRowVector",0,"public void testGetRowVector(){RealMatrix m=createSparseMatrix(subTestData);RealVector mRow0=new RealVectorImpl(subRow0[0]);RealVector mRow3=new RealVectorImpl(subRow3[0]);assertEquals(""Row0"",mRow0,m.getRowVector(0));assertEquals(""Row3"",mRow3,m.getRowVector(3));try {m.getRowVector(-1);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.getRowVector(4);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}}"
"org.apache.commons.math.linear.SparseRealMatrixTest.testGetColumnVector",0,"public void testGetColumnVector(){RealMatrix m=createSparseMatrix(subTestData);RealVector mColumn1=columnToVector(subColumn1);RealVector mColumn3=columnToVector(subColumn3);assertEquals(""Column1"",mColumn1,m.getColumnVector(1));assertEquals(""Column3"",mColumn3,m.getColumnVector(3));try {m.getColumnVector(-1);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.getColumnVector(4);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}}"
"org.apache.commons.math.linear.SparseRealMatrixTest.testEqualsAndHashCode",0,"public void testEqualsAndHashCode(){SparseRealMatrix m=createSparseMatrix(testData);SparseRealMatrix m1=(SparseRealMatrix)m.copy();SparseRealMatrix mt=(SparseRealMatrix)m.transpose();assertTrue(m.hashCode()!= mt.hashCode());assertEquals(m.hashCode(),m1.hashCode());assertEquals(m,m);assertEquals(m,m1);assertFalse(m.equals(null));assertFalse(m.equals(mt));assertFalse(m.equals(createSparseMatrix(bigSingular)));}"
"org.apache.commons.math.linear.SparseRealMatrixTest.testToString",0,"public void testToString(){SparseRealMatrix m=createSparseMatrix(testData);assertEquals(""SparseRealMatrix{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}"",m.toString());m=new SparseRealMatrix(1,1);assertEquals(""SparseRealMatrix{{0.0}}"",m.toString());}"
"org.apache.commons.math.linear.SparseRealMatrixTest.testSetSubMatrix",0,"public void testSetSubMatrix()throws Exception {SparseRealMatrix m=createSparseMatrix(testData);m.setSubMatrix(detData2,1,1);RealMatrix expected=createSparseMatrix(new double[][]{{1.0,2.0,3.0},{2.0,1.0,3.0},{1.0,2.0,4.0}});assertEquals(expected,m);m.setSubMatrix(detData2,0,0);expected=createSparseMatrix(new double[][]{{1.0,3.0,3.0},{2.0,4.0,3.0},{1.0,2.0,4.0}});assertEquals(expected,m);m.setSubMatrix(testDataPlus2,0,0);expected=createSparseMatrix(new double[][]{{3.0,4.0,5.0},{4.0,7.0,5.0},{3.0,2.0,10.0}});assertEquals(expected,m);SparseRealMatrix matrix=(SparseRealMatrix)createSparseMatrix(new double[][]{{1,2,3,4},{5,6,7,8},{9,0,1,2}});matrix.setSubMatrix(new double[][]{{3,4},{5,6}},1,1);expected=createSparseMatrix(new double[][]{{1,2,3,4},{5,3,4,8},{9,5,6,2}});assertEquals(expected,matrix);try {m.setSubMatrix(testData,1,1);fail(""expecting MatrixIndexException"");}catch(MatrixIndexException e){}try {m.setSubMatrix(testData,-1,1);fail(""expecting MatrixIndexException"");}catch(MatrixIndexException e){}try {m.setSubMatrix(testData,1,-1);fail(""expecting MatrixIndexException"");}catch(MatrixIndexException e){}try {m.setSubMatrix(null,1,1);fail(""expecting NullPointerException"");}catch(NullPointerException e){}try {new SparseRealMatrix(0,0);fail(""expecting IllegalArgumentException"");}catch(IllegalArgumentException e){}try {m.setSubMatrix(new double[][]{{1},{2,3}},0,0);fail(""expecting IllegalArgumentException"");}catch(IllegalArgumentException e){}try {m.setSubMatrix(new double[][]{{}},0,0);fail(""expecting IllegalArgumentException"");}catch(IllegalArgumentException e){}}"
"org.apache.commons.math.distribution.FDistributionTest.testCumulativeProbabilityExtremes",0,"public void testCumulativeProbabilityExtremes()throws Exception {setCumulativeTestPoints(new double[]{-2,0});setCumulativeTestValues(new double[]{0,0});verifyCumulativeProbabilities();}"
"org.apache.commons.math.distribution.FDistributionTest.testInverseCumulativeProbabilityExtremes",0,"public void testInverseCumulativeProbabilityExtremes()throws Exception {setInverseCumulativeTestPoints(new double[]{0,1});setInverseCumulativeTestValues(new double[]{0,Double.POSITIVE_INFINITY});verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math.distribution.FDistributionTest.testDfAccessors",0,"public void testDfAccessors(){FDistribution distribution=(FDistribution)getDistribution();assertEquals(5d,distribution.getNumeratorDegreesOfFreedom(),Double.MIN_VALUE);distribution.setNumeratorDegreesOfFreedom(4d);assertEquals(4d,distribution.getNumeratorDegreesOfFreedom(),Double.MIN_VALUE);assertEquals(6d,distribution.getDenominatorDegreesOfFreedom(),Double.MIN_VALUE);distribution.setDenominatorDegreesOfFreedom(4d);assertEquals(4d,distribution.getDenominatorDegreesOfFreedom(),Double.MIN_VALUE);try {distribution.setNumeratorDegreesOfFreedom(0d);fail(""Expecting IllegalArgumentException for df = 0"");}catch(IllegalArgumentException ex){}try {distribution.setDenominatorDegreesOfFreedom(0d);fail(""Expecting IllegalArgumentException for df = 0"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.distribution.FDistributionTest.testLargeDegreesOfFreedom",0,"public void testLargeDegreesOfFreedom()throws Exception {org.apache.commons.math.distribution.FDistributionImpl fd=new org.apache.commons.math.distribution.FDistributionImpl(100000.,100000.);double p=fd.cumulativeProbability(.999);double x=fd.inverseCumulativeProbability(p);assertEquals(.999,x,1.0e-5);}"
"org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom",0,"public void testSmallDegreesOfFreedom()throws Exception {org.apache.commons.math.distribution.FDistributionImpl fd=new org.apache.commons.math.distribution.FDistributionImpl(1.0,1.0);double p=fd.cumulativeProbability(0.975);double x=fd.inverseCumulativeProbability(p);assertEquals(0.975,x,1.0e-5);fd.setDenominatorDegreesOfFreedom(2.0);p=fd.cumulativeProbability(0.975);x=fd.inverseCumulativeProbability(p);assertEquals(0.975,x,1.0e-5);}"
"org.apache.commons.math.distribution.FDistributionTest.testCumulativeProbabilities",0,"/** * Verifies that cumulative probability density calculations match expected values using default test instance data*/public void testCumulativeProbabilities()throws Exception {verifyCumulativeProbabilities();}"
"org.apache.commons.math.distribution.FDistributionTest.testInverseCumulativeProbabilities",0,"/** * Verifies that inverse cumulative probability density calculations match expected values using default test instance data*/public void testInverseCumulativeProbabilities()throws Exception {verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math.distribution.FDistributionTest.testConsistency",0,"/** * Verifies that probability computations are consistent*/public void testConsistency()throws Exception {for (int i=1;i < cumulativeTestPoints.length;i++){TestUtils.assertEquals(0d,distribution.cumulativeProbability(cumulativeTestPoints[i],cumulativeTestPoints[i]),tolerance);double upper=Math.max(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double lower=Math.min(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double diff=distribution.cumulativeProbability(upper)- distribution.cumulativeProbability(lower);double direct=distribution.cumulativeProbability(lower,upper);TestUtils.assertEquals(""Inconsistent cumulative probabilities for ("" + lower + "",""+ upper+ "")"",diff,direct,tolerance);}}"
"org.apache.commons.math.distribution.FDistributionTest.testIllegalArguments",0,"/** * Verifies that illegal arguments are correctly handled*/public void testIllegalArguments()throws Exception {try {distribution.cumulativeProbability(1,0);fail(""Expecting IllegalArgumentException for bad cumulativeProbability interval"");}catch(IllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(-1);fail(""Expecting IllegalArgumentException for p = -1"");}catch(IllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(2);fail(""Expecting IllegalArgumentException for p = 2"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.distribution.WeibullDistributionTest.testInverseCumulativeProbabilityExtremes",0,"public void testInverseCumulativeProbabilityExtremes()throws Exception {setInverseCumulativeTestPoints(new double[]{0.0,1.0});setInverseCumulativeTestValues(new double[]{0.0,Double.POSITIVE_INFINITY});verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math.distribution.WeibullDistributionTest.testAlpha",0,"public void testAlpha(){WeibullDistribution distribution=(WeibullDistribution)getDistribution();double expected=Math.random();distribution.setShape(expected);assertEquals(expected,distribution.getShape(),0.0);}"
"org.apache.commons.math.distribution.WeibullDistributionTest.testBeta",0,"public void testBeta(){WeibullDistribution distribution=(WeibullDistribution)getDistribution();double expected=Math.random();distribution.setScale(expected);assertEquals(expected,distribution.getScale(),0.0);}"
"org.apache.commons.math.distribution.WeibullDistributionTest.testSetAlpha",0,"public void testSetAlpha(){WeibullDistribution distribution=(WeibullDistribution)getDistribution();try {distribution.setShape(0.0);fail(""Can not have 0.0 alpha."");}catch(IllegalArgumentException ex){}try {distribution.setShape(-1.0);fail(""Can not have negative alpha."");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.distribution.WeibullDistributionTest.testSetBeta",0,"public void testSetBeta(){WeibullDistribution distribution=(WeibullDistribution)getDistribution();try {distribution.setScale(0.0);fail(""Can not have 0.0 beta."");}catch(IllegalArgumentException ex){}try {distribution.setScale(-1.0);fail(""Can not have negative beta."");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.distribution.WeibullDistributionTest.testSampling",0,"public void testSampling(){}"
"org.apache.commons.math.distribution.WeibullDistributionTest.testCumulativeProbabilities",0,"/** * Verifies that cumulative probability density calculations match expected values using default test instance data*/public void testCumulativeProbabilities()throws Exception {verifyCumulativeProbabilities();}"
"org.apache.commons.math.distribution.WeibullDistributionTest.testInverseCumulativeProbabilities",0,"/** * Verifies that inverse cumulative probability density calculations match expected values using default test instance data*/public void testInverseCumulativeProbabilities()throws Exception {verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math.distribution.WeibullDistributionTest.testConsistency",0,"/** * Verifies that probability computations are consistent*/public void testConsistency()throws Exception {for (int i=1;i < cumulativeTestPoints.length;i++){TestUtils.assertEquals(0d,distribution.cumulativeProbability(cumulativeTestPoints[i],cumulativeTestPoints[i]),tolerance);double upper=Math.max(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double lower=Math.min(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double diff=distribution.cumulativeProbability(upper)- distribution.cumulativeProbability(lower);double direct=distribution.cumulativeProbability(lower,upper);TestUtils.assertEquals(""Inconsistent cumulative probabilities for ("" + lower + "",""+ upper+ "")"",diff,direct,tolerance);}}"
"org.apache.commons.math.distribution.WeibullDistributionTest.testIllegalArguments",0,"/** * Verifies that illegal arguments are correctly handled*/public void testIllegalArguments()throws Exception {try {distribution.cumulativeProbability(1,0);fail(""Expecting IllegalArgumentException for bad cumulativeProbability interval"");}catch(IllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(-1);fail(""Expecting IllegalArgumentException for p = -1"");}catch(IllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(2);fail(""Expecting IllegalArgumentException for p = 2"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.testLinearFunction",0,"/** * Test of polynomial for the linear function.*/public void testLinearFunction()throws MathException {PolynomialFunctionNewtonForm p;double coefficients[],z,expected,result,tolerance=1E-12;double a[]={2.0,1.5};double c[]={4.0};p=new PolynomialFunctionNewtonForm(a,c);z=2.0;expected=-1.0;result=p.value(z);assertEquals(expected,result,tolerance);z=4.5;expected=2.75;result=p.value(z);assertEquals(expected,result,tolerance);z=6.0;expected=5.0;result=p.value(z);assertEquals(expected,result,tolerance);assertEquals(1,p.degree());coefficients=p.getCoefficients();assertEquals(2,coefficients.length);assertEquals(-4.0,coefficients[0],tolerance);assertEquals(1.5,coefficients[1],tolerance);}"
"org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.testQuadraticFunction",0,"/** * Test of polynomial for the quadratic function.*/public void testQuadraticFunction()throws MathException {PolynomialFunctionNewtonForm p;double coefficients[],z,expected,result,tolerance=1E-12;double a[]={4.0,3.0,2.0};double c[]={1.0,-2.0};p=new PolynomialFunctionNewtonForm(a,c);z=1.0;expected=4.0;result=p.value(z);assertEquals(expected,result,tolerance);z=2.5;expected=22.0;result=p.value(z);assertEquals(expected,result,tolerance);z=-2.0;expected=-5.0;result=p.value(z);assertEquals(expected,result,tolerance);assertEquals(2,p.degree());coefficients=p.getCoefficients();assertEquals(3,coefficients.length);assertEquals(-3.0,coefficients[0],tolerance);assertEquals(5.0,coefficients[1],tolerance);assertEquals(2.0,coefficients[2],tolerance);}"
"org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.testQuinticFunction",0,"/** * Test of polynomial for the quintic function.*/public void testQuinticFunction()throws MathException {PolynomialFunctionNewtonForm p;double coefficients[],z,expected,result,tolerance=1E-12;double a[]={0.0,6.0,-6.0,-6.0,1.0,1.0};double c[]={0.0,0.0,1.0,-1.0,2.0};p=new PolynomialFunctionNewtonForm(a,c);z=0.0;expected=0.0;result=p.value(z);assertEquals(expected,result,tolerance);z=-2.0;expected=0.0;result=p.value(z);assertEquals(expected,result,tolerance);z=4.0;expected=360.0;result=p.value(z);assertEquals(expected,result,tolerance);assertEquals(5,p.degree());coefficients=p.getCoefficients();assertEquals(6,coefficients.length);assertEquals(0.0,coefficients[0],tolerance);assertEquals(6.0,coefficients[1],tolerance);assertEquals(1.0,coefficients[2],tolerance);assertEquals(-7.0,coefficients[3],tolerance);assertEquals(-1.0,coefficients[4],tolerance);assertEquals(1.0,coefficients[5],tolerance);}"
"org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.testParameters",0,"/** * Test of parameters for the polynomial.*/public void testParameters()throws Exception {try {double a[]={1.0};double c[]={2.0};new PolynomialFunctionNewtonForm(a,c);fail(""Expecting IllegalArgumentException - bad input array length"");}catch(IllegalArgumentException ex){}try {double a[]={1.0,2.0,3.0,4.0};double c[]={4.0,3.0,2.0,1.0};new PolynomialFunctionNewtonForm(a,c);fail(""Expecting IllegalArgumentException - mismatch input arrays"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.analysis.PolynomialFunctionTest.testConstants",0,"/** * tests the value of a constant polynomial. <p>value of this is 2.5 everywhere.</p>*/public void testConstants()throws MathException {double[]c={2.5};PolynomialFunction f=new PolynomialFunction(c);assertEquals(f.value(0.0),c[0],tolerance);assertEquals(f.value(-1.0),c[0],tolerance);assertEquals(f.value(-123.5),c[0],tolerance);assertEquals(f.value(3.0),c[0],tolerance);assertEquals(f.value(456.89),c[0],tolerance);assertEquals(f.degree(),0);assertEquals(f.derivative().value(0),0,tolerance);assertEquals(f.polynomialDerivative().derivative().value(0),0,tolerance);}"
"org.apache.commons.math.analysis.PolynomialFunctionTest.testLinear",0,"/** * tests the value of a linear polynomial. <p>This will test the function f(x)= 3*x - 1.5</p> <p>This will have the values  <tt>f(0.0)= -1.5,f(-1.0)= -4.5,f(-2.5)= -9.0,f(0.5)= 0.0,f(1.5)= 3.0</tt> and <tt>f(3.0)= 7.5</tt> </p>*/public void testLinear()throws MathException {double[]c={-1.5,3.0};PolynomialFunction f=new PolynomialFunction(c);assertEquals(f.value(0.0),c[0],tolerance);assertEquals(-4.5,f.value(-1.0),tolerance);assertEquals(-9.0,f.value(-2.5),tolerance);assertEquals(0.0,f.value(0.5),tolerance);assertEquals(3.0,f.value(1.5),tolerance);assertEquals(7.5,f.value(3.0),tolerance);assertEquals(f.degree(),1);assertEquals(f.polynomialDerivative().derivative().value(0),0,tolerance);}"
"org.apache.commons.math.analysis.PolynomialFunctionTest.testQuadratic",0,"/** * Tests a second order polynomial. <p> This will test the function f(x)= 2x^2 - 3x -2 = (2x+1)(x-2)</p>*/public void testQuadratic()throws MathException {double[]c={-2.0,-3.0,2.0};PolynomialFunction f=new PolynomialFunction(c);assertEquals(f.value(0.0),c[0],tolerance);assertEquals(0.0,f.value(-0.5),tolerance);assertEquals(0.0,f.value(2.0),tolerance);assertEquals(-2.0,f.value(1.5),tolerance);assertEquals(7.0,f.value(-1.5),tolerance);assertEquals(265.5312,f.value(12.34),tolerance);}"
"org.apache.commons.math.analysis.PolynomialFunctionTest.testQuintic",0,"/** * This will test the quintic function  f(x)= x^2(x-5)(x+3)(x-1)= x^5 - 3x^4 -13x^3 + 15x^2</p>*/public void testQuintic()throws MathException {double[]c={0.0,0.0,15.0,-13.0,-3.0,1.0};PolynomialFunction f=new PolynomialFunction(c);assertEquals(f.value(0.0),c[0],tolerance);assertEquals(0.0,f.value(5.0),tolerance);assertEquals(0.0,f.value(1.0),tolerance);assertEquals(0.0,f.value(-3.0),tolerance);assertEquals(54.84375,f.value(-1.5),tolerance);assertEquals(-8.06637,f.value(1.3),tolerance);assertEquals(f.degree(),5);}"
"org.apache.commons.math.analysis.PolynomialFunctionTest.testfirstDerivativeComparison",0,"/** * tests the firstDerivative function by comparison <p>This will test the functions  <tt>f(x)= x^3 - 2x^2 + 6x + 3,g(x)= 3x^2 - 4x + 6</tt> and <tt>h(x)= 6x - 4</tt>*/public void testfirstDerivativeComparison()throws MathException {double[]f_coeff={3.0,6.0,-2.0,1.0};double[]g_coeff={6.0,-4.0,3.0};double[]h_coeff={-4.0,6.0};PolynomialFunction f=new PolynomialFunction(f_coeff);PolynomialFunction g=new PolynomialFunction(g_coeff);PolynomialFunction h=new PolynomialFunction(h_coeff);assertEquals(f.derivative().value(0.0),g.value(0.0),tolerance);assertEquals(f.derivative().value(1.0),g.value(1.0),tolerance);assertEquals(f.derivative().value(100.0),g.value(100.0),tolerance);assertEquals(f.derivative().value(4.1),g.value(4.1),tolerance);assertEquals(f.derivative().value(-3.25),g.value(-3.25),tolerance);assertEquals(g.derivative().value(Math.PI),h.value(Math.PI),tolerance);assertEquals(g.derivative().value(Math.E),h.value(Math.E),tolerance);}"
"org.apache.commons.math.stat.descriptive.InteractionTest.testInteraction",0,"public void testInteraction(){FourthMoment m4=new FourthMoment();Mean m=new Mean(m4);Variance v=new Variance(m4);Skewness s=new Skewness(m4);Kurtosis k=new Kurtosis(m4);for (int i=0;i < testArray.length;i++){m4.increment(testArray[i]);}assertEquals(mean,m.getResult(),tolerance);assertEquals(var,v.getResult(),tolerance);assertEquals(skew,s.getResult(),tolerance);assertEquals(kurt,k.getResult(),tolerance);}"
"org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.testLinearFunction",0,"/** * Test of polynomial for the linear function.*/public void testLinearFunction()throws MathException {PolynomialFunctionLagrangeForm p;double c[],z,expected,result,tolerance=1E-12;double x[]={0.0,3.0};double y[]={-4.0,0.5};p=new PolynomialFunctionLagrangeForm(x,y);z=2.0;expected=-1.0;result=p.value(z);assertEquals(expected,result,tolerance);z=4.5;expected=2.75;result=p.value(z);assertEquals(expected,result,tolerance);z=6.0;expected=5.0;result=p.value(z);assertEquals(expected,result,tolerance);assertEquals(1,p.degree());c=p.getCoefficients();assertEquals(2,c.length);assertEquals(-4.0,c[0],tolerance);assertEquals(1.5,c[1],tolerance);}"
"org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.testQuadraticFunction",0,"/** * Test of polynomial for the quadratic function.*/public void testQuadraticFunction()throws MathException {PolynomialFunctionLagrangeForm p;double c[],z,expected,result,tolerance=1E-12;double x[]={0.0,-1.0,0.5};double y[]={-3.0,-6.0,0.0};p=new PolynomialFunctionLagrangeForm(x,y);z=1.0;expected=4.0;result=p.value(z);assertEquals(expected,result,tolerance);z=2.5;expected=22.0;result=p.value(z);assertEquals(expected,result,tolerance);z=-2.0;expected=-5.0;result=p.value(z);assertEquals(expected,result,tolerance);assertEquals(2,p.degree());c=p.getCoefficients();assertEquals(3,c.length);assertEquals(-3.0,c[0],tolerance);assertEquals(5.0,c[1],tolerance);assertEquals(2.0,c[2],tolerance);}"
"org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.testQuinticFunction",0,"/** * Test of polynomial for the quintic function.*/public void testQuinticFunction()throws MathException {PolynomialFunctionLagrangeForm p;double c[],z,expected,result,tolerance=1E-12;double x[]={1.0,-1.0,2.0,3.0,-3.0,0.5};double y[]={0.0,0.0,-24.0,0.0,-144.0,2.34375};p=new PolynomialFunctionLagrangeForm(x,y);z=0.0;expected=0.0;result=p.value(z);assertEquals(expected,result,tolerance);z=-2.0;expected=0.0;result=p.value(z);assertEquals(expected,result,tolerance);z=4.0;expected=360.0;result=p.value(z);assertEquals(expected,result,tolerance);assertEquals(5,p.degree());c=p.getCoefficients();assertEquals(6,c.length);assertEquals(0.0,c[0],tolerance);assertEquals(6.0,c[1],tolerance);assertEquals(1.0,c[2],tolerance);assertEquals(-7.0,c[3],tolerance);assertEquals(-1.0,c[4],tolerance);assertEquals(1.0,c[5],tolerance);}"
"org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.testParameters",0,"/** * Test of parameters for the polynomial.*/public void testParameters()throws Exception {try {double x[]={1.0};double y[]={2.0};new PolynomialFunctionLagrangeForm(x,y);fail(""Expecting IllegalArgumentException - bad input array length"");}catch(IllegalArgumentException ex){}try {double x[]={1.0,2.0,3.0,4.0};double y[]={0.0,-4.0,-24.0};new PolynomialFunctionLagrangeForm(x,y);fail(""Expecting IllegalArgumentException - mismatch input arrays"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.util.ResizableDoubleArrayTest.testConstructors",0,"public void testConstructors(){float defaultExpansionFactor=2.0f;float defaultContractionCriteria=2.5f;int defaultMode=ResizableDoubleArray.MULTIPLICATIVE_MODE;ResizableDoubleArray testDa=new ResizableDoubleArray(2);assertEquals(0,testDa.getNumElements());assertEquals(2,testDa.getInternalLength());assertEquals(defaultExpansionFactor,testDa.getExpansionFactor(),0);assertEquals(defaultContractionCriteria,testDa.getContractionCriteria(),0);assertEquals(defaultMode,testDa.getExpansionMode());try {da=new ResizableDoubleArray(-1);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}testDa=new ResizableDoubleArray(2,2.0f);assertEquals(0,testDa.getNumElements());assertEquals(2,testDa.getInternalLength());assertEquals(defaultExpansionFactor,testDa.getExpansionFactor(),0);assertEquals(defaultContractionCriteria,testDa.getContractionCriteria(),0);assertEquals(defaultMode,testDa.getExpansionMode());try {da=new ResizableDoubleArray(2,0.5f);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}testDa=new ResizableDoubleArray(2,3.0f);assertEquals(3.0f,testDa.getExpansionFactor(),0);assertEquals(3.5f,testDa.getContractionCriteria(),0);testDa=new ResizableDoubleArray(2,2.0f,3.0f);assertEquals(0,testDa.getNumElements());assertEquals(2,testDa.getInternalLength());assertEquals(defaultExpansionFactor,testDa.getExpansionFactor(),0);assertEquals(3.0f,testDa.getContractionCriteria(),0);assertEquals(defaultMode,testDa.getExpansionMode());try {da=new ResizableDoubleArray(2,2.0f,1.5f);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}testDa=new ResizableDoubleArray(2,2.0f,3.0f,ResizableDoubleArray.ADDITIVE_MODE);assertEquals(0,testDa.getNumElements());assertEquals(2,testDa.getInternalLength());assertEquals(defaultExpansionFactor,testDa.getExpansionFactor(),0);assertEquals(3.0f,testDa.getContractionCriteria(),0);assertEquals(ResizableDoubleArray.ADDITIVE_MODE,testDa.getExpansionMode());try {da=new ResizableDoubleArray(2,2.0f,2.5f,-1);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}testDa=new ResizableDoubleArray(2,2.0f,3.0f,ResizableDoubleArray.ADDITIVE_MODE);testDa.addElement(2.0);testDa.addElement(3.2);ResizableDoubleArray copyDa=new ResizableDoubleArray(testDa);assertEquals(copyDa,testDa);assertEquals(testDa,copyDa);}"
"org.apache.commons.math.util.ResizableDoubleArrayTest.testSetElementArbitraryExpansion",0,"public void testSetElementArbitraryExpansion(){da.addElement(2.0);da.addElement(4.0);da.addElement(6.0);da.setElement(1,3.0);da.setElement(1000,3.4);assertEquals(""The number of elements should now be 1001,it isn't"",da.getNumElements(),1001);assertEquals(""Uninitialized Elements are default value of 0.0,index 766 wasn't"",0.0,da.getElement(760),Double.MIN_VALUE);assertEquals(""The 1000th index should be 3.4,it isn't"",3.4,da.getElement(1000),Double.MIN_VALUE);assertEquals(""The 0th index should be 2.0,it isn't"",2.0,da.getElement(0),Double.MIN_VALUE);da.clear();da.addElement(2.0);da.addElement(4.0);da.addElement(6.0);assertEquals(4,((ResizableDoubleArray)da).getInternalLength());assertEquals(3,da.getNumElements());da.setElement(3,7.0);assertEquals(4,((ResizableDoubleArray)da).getInternalLength());assertEquals(4,da.getNumElements());da.setElement(10,10.0);assertEquals(11,((ResizableDoubleArray)da).getInternalLength());assertEquals(11,da.getNumElements());da.setElement(9,10.0);assertEquals(11,((ResizableDoubleArray)da).getInternalLength());assertEquals(11,da.getNumElements());try {da.setElement(-2,3);fail(""Expecting ArrayIndexOutOfBoundsException for negative index"");}catch(ArrayIndexOutOfBoundsException ex){}ResizableDoubleArray testDa=new ResizableDoubleArray(2,2.0f,3.0f,ResizableDoubleArray.ADDITIVE_MODE);assertEquals(2,testDa.getInternalLength());testDa.addElement(1d);testDa.addElement(1d);assertEquals(2,testDa.getInternalLength());testDa.addElement(1d);assertEquals(4,testDa.getInternalLength());}"
"org.apache.commons.math.util.ResizableDoubleArrayTest.testAdd1000",0,"public void testAdd1000(){super.testAdd1000();assertEquals(""Internal Storage length should be 1024 if we started out with initial capacity of "" + ""16 and an expansion factor of 2.0"",1024,((ResizableDoubleArray)da).getInternalLength());}"
"org.apache.commons.math.util.ResizableDoubleArrayTest.testAddElementRolling",0,"public void testAddElementRolling(){super.testAddElementRolling();da.clear();da.addElement(1);da.addElement(2);da.addElementRolling(3);assertEquals(3,da.getElement(1),0);da.addElementRolling(4);assertEquals(3,da.getElement(0),0);assertEquals(4,da.getElement(1),0);da.addElement(5);assertEquals(5,da.getElement(2),0);da.addElementRolling(6);assertEquals(4,da.getElement(0),0);assertEquals(5,da.getElement(1),0);assertEquals(6,da.getElement(2),0);ResizableDoubleArray testDa=new ResizableDoubleArray(2,2.0f,2.5f,ResizableDoubleArray.ADDITIVE_MODE);assertEquals(2,testDa.getInternalLength());testDa.addElement(1d);testDa.addElement(2d);testDa.addElement(3d);assertEquals(1d,testDa.getElement(0),0);assertEquals(2d,testDa.getElement(1),0);assertEquals(3d,testDa.getElement(2),0);assertEquals(4,testDa.getInternalLength());assertEquals(3,testDa.getNumElements());testDa.addElementRolling(4d);assertEquals(2d,testDa.getElement(0),0);assertEquals(3d,testDa.getElement(1),0);assertEquals(4d,testDa.getElement(2),0);assertEquals(4,testDa.getInternalLength());assertEquals(3,testDa.getNumElements());testDa.addElementRolling(5d);assertEquals(3d,testDa.getElement(0),0);assertEquals(4d,testDa.getElement(1),0);assertEquals(5d,testDa.getElement(2),0);assertEquals(4,testDa.getInternalLength());assertEquals(3,testDa.getNumElements());try {testDa.getElement(4);fail(""Expecting ArrayIndexOutOfBoundsException"");}catch(ArrayIndexOutOfBoundsException ex){}try {testDa.getElement(-1);fail(""Expecting ArrayIndexOutOfBoundsException"");}catch(ArrayIndexOutOfBoundsException ex){}}"
"org.apache.commons.math.util.ResizableDoubleArrayTest.testSetNumberOfElements",0,"public void testSetNumberOfElements(){da.addElement(1.0);da.addElement(1.0);da.addElement(1.0);da.addElement(1.0);da.addElement(1.0);da.addElement(1.0);assertEquals(""Number of elements should equal 6"",da.getNumElements(),6);((ResizableDoubleArray)da).setNumElements(3);assertEquals(""Number of elements should equal 3"",da.getNumElements(),3);try {((ResizableDoubleArray)da).setNumElements(-3);fail(""Setting number of elements to negative should've thrown an exception"");}catch(IllegalArgumentException iae){}((ResizableDoubleArray)da).setNumElements(1024);assertEquals(""Number of elements should now be 1024"",da.getNumElements(),1024);assertEquals(""Element 453 should be a default double"",da.getElement(453),0.0,Double.MIN_VALUE);}"
"org.apache.commons.math.util.ResizableDoubleArrayTest.testWithInitialCapacity",0,"public void testWithInitialCapacity(){ResizableDoubleArray eDA2=new ResizableDoubleArray(2);assertEquals(""Initial number of elements should be 0"",0,eDA2.getNumElements());RandomData randomData=new RandomDataImpl();int iterations=randomData.nextInt(100,1000);for (int i=0;i < iterations;i++){eDA2.addElement(i);}assertEquals(""Number of elements should be equal to "" + iterations,iterations,eDA2.getNumElements());eDA2.addElement(2.0);assertEquals(""Number of elements should be equals to "" + (iterations + 1),iterations + 1,eDA2.getNumElements());}"
"org.apache.commons.math.util.ResizableDoubleArrayTest.testWithInitialCapacityAndExpansionFactor",0,"public void testWithInitialCapacityAndExpansionFactor(){ResizableDoubleArray eDA3=new ResizableDoubleArray(3,3.0f,3.5f);assertEquals(""Initial number of elements should be 0"",0,eDA3.getNumElements());RandomData randomData=new RandomDataImpl();int iterations=randomData.nextInt(100,3000);for (int i=0;i < iterations;i++){eDA3.addElement(i);}assertEquals(""Number of elements should be equal to "" + iterations,iterations,eDA3.getNumElements());eDA3.addElement(2.0);assertEquals(""Number of elements should be equals to "" + (iterations + 1),iterations + 1,eDA3.getNumElements());assertEquals(""Expansion factor should equal 3.0"",3.0f,eDA3.getExpansionFactor(),Double.MIN_VALUE);}"
"org.apache.commons.math.util.ResizableDoubleArrayTest.testDiscard",0,"public void testDiscard(){da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);assertEquals(""Number of elements should be 11"",11,da.getNumElements());((ResizableDoubleArray)da).discardFrontElements(5);assertEquals(""Number of elements should be 6"",6,da.getNumElements());da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);assertEquals(""Number of elements should be 10"",10,da.getNumElements());((ResizableDoubleArray)da).discardMostRecentElements(2);assertEquals(""Number of elements should be 8"",8,da.getNumElements());try {((ResizableDoubleArray)da).discardFrontElements(-1);fail(""Trying to discard a negative number of element is not allowed"");}catch(Exception e){}try {((ResizableDoubleArray)da).discardMostRecentElements(-1);fail(""Trying to discard a negative number of element is not allowed"");}catch(Exception e){}try {((ResizableDoubleArray)da).discardFrontElements(10000);fail(""You can't discard more elements than the array contains"");}catch(Exception e){}try {((ResizableDoubleArray)da).discardMostRecentElements(10000);fail(""You can't discard more elements than the array contains"");}catch(Exception e){}}"
"org.apache.commons.math.util.ResizableDoubleArrayTest.testSubstitute",0,"public void testSubstitute(){da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);assertEquals(""Number of elements should be 11"",11,da.getNumElements());((ResizableDoubleArray)da).substituteMostRecentElement(24);assertEquals(""Number of elements should be 11"",11,da.getNumElements());try {((ResizableDoubleArray)da).discardMostRecentElements(10);}catch(Exception e){fail(""Trying to discard a negative number of element is not allowed"");}((ResizableDoubleArray)da).substituteMostRecentElement(24);assertEquals(""Number of elements should be 1"",1,da.getNumElements());}"
"org.apache.commons.math.util.ResizableDoubleArrayTest.testMutators",0,"public void testMutators(){((ResizableDoubleArray)da).setContractionCriteria(10f);assertEquals(10f,((ResizableDoubleArray)da).getContractionCriteria(),0);((ResizableDoubleArray)da).setExpansionFactor(8f);assertEquals(8f,((ResizableDoubleArray)da).getExpansionFactor(),0);try {((ResizableDoubleArray)da).setExpansionFactor(11f);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}((ResizableDoubleArray)da).setExpansionMode(ResizableDoubleArray.ADDITIVE_MODE);assertEquals(ResizableDoubleArray.ADDITIVE_MODE,((ResizableDoubleArray)da).getExpansionMode());try {((ResizableDoubleArray)da).setExpansionMode(-1);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.util.ResizableDoubleArrayTest.testEqualsAndHashCode",0,"public void testEqualsAndHashCode()throws Exception {ResizableDoubleArray first=new ResizableDoubleArray();Double other=new Double(2);assertFalse(first.equals(other));other=null;assertFalse(first.equals(other));assertTrue(first.equals(first));ResizableDoubleArray second=new ResizableDoubleArray();verifyEquality(first,second);ResizableDoubleArray third=new ResizableDoubleArray(3,2.0f,2.0f);verifyInequality(third,first);ResizableDoubleArray fourth=new ResizableDoubleArray(3,2.0f,2.0f);ResizableDoubleArray fifth=new ResizableDoubleArray(2,2.0f,2.0f);verifyEquality(third,fourth);verifyInequality(third,fifth);third.addElement(4.1);third.addElement(4.2);third.addElement(4.3);fourth.addElement(4.1);fourth.addElement(4.2);fourth.addElement(4.3);verifyEquality(third,fourth);fourth.addElement(4.4);verifyInequality(third,fourth);third.addElement(4.4);verifyEquality(third,fourth);fourth.addElement(4.4);verifyInequality(third,fourth);third.addElement(4.4);verifyEquality(third,fourth);fourth.addElementRolling(4.5);third.addElementRolling(4.5);verifyEquality(third,fourth);third.discardFrontElements(1);verifyInequality(third,fourth);fourth.discardFrontElements(1);verifyEquality(third,fourth);third.discardMostRecentElements(2);fourth.discardMostRecentElements(2);verifyEquality(third,fourth);third.addElement(18);fourth.addElement(17);third.addElement(17);fourth.addElement(18);verifyInequality(third,fourth);ResizableDoubleArray.copy(fourth,fifth);verifyEquality(fourth,fifth);verifyEquality(fourth,new ResizableDoubleArray(fourth));verifyEquality(fourth,fourth.copy());}"
"org.apache.commons.math.transform.FastSineTransformerTest.testAdHocData",0,"/** * Test of transformer for the ad hoc data.*/public void testAdHocData()throws MathException {FastSineTransformer transformer=new FastSineTransformer();double result[],tolerance=1E-12;double x[]={0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0};double y[]={0.0,20.1093579685034,-9.65685424949238,5.98642305066196,-4.0,2.67271455167720,-1.65685424949238,0.795649469518633};result=transformer.transform(x);for (int i=0;i < result.length;i++){assertEquals(y[i],result[i],tolerance);}result=transformer.inversetransform(y);for (int i=0;i < result.length;i++){assertEquals(x[i],result[i],tolerance);}FastFourierTransformer.scaleArray(x,Math.sqrt(x.length / 2.0));result=transformer.transform2(y);for (int i=0;i < result.length;i++){assertEquals(x[i],result[i],tolerance);}result=transformer.inversetransform2(x);for (int i=0;i < result.length;i++){assertEquals(y[i],result[i],tolerance);}}"
"org.apache.commons.math.transform.FastSineTransformerTest.testSinFunction",0,"/** * Test of transformer for the sine function.*/public void testSinFunction()throws MathException {UnivariateRealFunction f=new SinFunction();FastSineTransformer transformer=new FastSineTransformer();double min,max,result[],tolerance=1E-12;int N=1 << 8;min=0.0;max=2.0 * Math.PI;result=transformer.transform(f,min,max,N);assertEquals(N >> 1,result[2],tolerance);for (int i=0;i < N;i+=(i == 1 ? 2 : 1)){assertEquals(0.0,result[i],tolerance);}min=-Math.PI;max=Math.PI;result=transformer.transform(f,min,max,N);assertEquals(-(N >> 1),result[2],tolerance);for (int i=0;i < N;i+=(i == 1 ? 2 : 1)){assertEquals(0.0,result[i],tolerance);}}"
"org.apache.commons.math.transform.FastSineTransformerTest.testParameters",0,"/** * Test of parameters for the transformer.*/public void testParameters()throws Exception {UnivariateRealFunction f=new SinFunction();FastSineTransformer transformer=new FastSineTransformer();try {transformer.transform(f,1,-1,64);fail(""Expecting IllegalArgumentException - bad interval"");}catch(IllegalArgumentException ex){}try {transformer.transform(f,-1,1,0);fail(""Expecting IllegalArgumentException - bad samples number"");}catch(IllegalArgumentException ex){}try {transformer.transform(f,-1,1,100);fail(""Expecting IllegalArgumentException - bad samples number"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest.testCoefficients",0,"public void testCoefficients(){double[]coeffs1=new AdamsBashforthIntegrator(1,0.01).getCoeffs();assertEquals(1,coeffs1.length);assertEquals(1.0,coeffs1[0],1.0e-16);double[]coeffs2=new AdamsBashforthIntegrator(2,0.01).getCoeffs();assertEquals(2,coeffs2.length);assertEquals(3.0 / 2.0,coeffs2[0],1.0e-16);assertEquals(-1.0 / 2.0,coeffs2[1],1.0e-16);double[]coeffs3=new AdamsBashforthIntegrator(3,0.01).getCoeffs();assertEquals(3,coeffs3.length);assertEquals(23.0 / 12.0,coeffs3[0],1.0e-16);assertEquals(-16.0 / 12.0,coeffs3[1],1.0e-16);assertEquals(5.0 / 12.0,coeffs3[2],1.0e-16);double[]coeffs4=new AdamsBashforthIntegrator(4,0.01).getCoeffs();assertEquals(4,coeffs4.length);assertEquals(55.0 / 24.0,coeffs4[0],1.0e-16);assertEquals(-59.0 / 24.0,coeffs4[1],1.0e-16);assertEquals(37.0 / 24.0,coeffs4[2],1.0e-16);assertEquals(-9.0 / 24.0,coeffs4[3],1.0e-16);double[]coeffs5=new AdamsBashforthIntegrator(5,0.01).getCoeffs();assertEquals(5,coeffs5.length);assertEquals(1901.0 / 720.0,coeffs5[0],1.0e-16);assertEquals(-2774.0 / 720.0,coeffs5[1],1.0e-16);assertEquals(2616.0 / 720.0,coeffs5[2],1.0e-16);assertEquals(-1274.0 / 720.0,coeffs5[3],1.0e-16);assertEquals(251.0 / 720.0,coeffs5[4],1.0e-16);double[]coeffs6=new AdamsBashforthIntegrator(6,0.01).getCoeffs();assertEquals(6,coeffs6.length);assertEquals(4277.0 / 1440.0,coeffs6[0],1.0e-16);assertEquals(-7923.0 / 1440.0,coeffs6[1],1.0e-16);assertEquals(9982.0 / 1440.0,coeffs6[2],1.0e-16);assertEquals(-7298.0 / 1440.0,coeffs6[3],1.0e-16);assertEquals(2877.0 / 1440.0,coeffs6[4],1.0e-16);assertEquals(-475.0 / 1440.0,coeffs6[5],1.0e-16);double[]coeffs7=new AdamsBashforthIntegrator(7,0.01).getCoeffs();assertEquals(7,coeffs7.length);assertEquals(198721.0 / 60480.0,coeffs7[0],1.0e-16);assertEquals(-447288.0 / 60480.0,coeffs7[1],1.0e-16);assertEquals(705549.0 / 60480.0,coeffs7[2],1.0e-16);assertEquals(-688256.0 / 60480.0,coeffs7[3],1.0e-16);assertEquals(407139.0 / 60480.0,coeffs7[4],1.0e-16);assertEquals(-134472.0 / 60480.0,coeffs7[5],1.0e-16);assertEquals(19087.0 / 60480.0,coeffs7[6],1.0e-16);double[]coeffs8=new AdamsBashforthIntegrator(8,0.01).getCoeffs();assertEquals(8,coeffs8.length);assertEquals(434241.0 / 120960.0,coeffs8[0],1.0e-16);assertEquals(-1152169.0 / 120960.0,coeffs8[1],1.0e-16);assertEquals(2183877.0 / 120960.0,coeffs8[2],1.0e-16);assertEquals(-2664477.0 / 120960.0,coeffs8[3],1.0e-16);assertEquals(2102243.0 / 120960.0,coeffs8[4],1.0e-16);assertEquals(-1041723.0 / 120960.0,coeffs8[5],1.0e-16);assertEquals(295767.0 / 120960.0,coeffs8[6],1.0e-16);assertEquals(-36799.0 / 120960.0,coeffs8[7],1.0e-16);double[]coeffs9=new AdamsBashforthIntegrator(9,0.01).getCoeffs();assertEquals(9,coeffs9.length);assertEquals(14097247.0 / 3628800.0,coeffs9[0],1.0e-16);assertEquals(-43125206.0 / 3628800.0,coeffs9[1],1.0e-16);assertEquals(95476786.0 / 3628800.0,coeffs9[2],1.0e-16);assertEquals(-139855262.0 / 3628800.0,coeffs9[3],1.0e-16);assertEquals(137968480.0 / 3628800.0,coeffs9[4],1.0e-16);assertEquals(-91172642.0 / 3628800.0,coeffs9[5],1.0e-16);assertEquals(38833486.0 / 3628800.0,coeffs9[6],1.0e-16);assertEquals(-9664106.0 / 3628800.0,coeffs9[7],1.0e-16);assertEquals(1070017.0 / 3628800.0,coeffs9[8],1.0e-16);}"
"org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest.testDimensionCheck",0,"public void testDimensionCheck(){try {TestProblem1 pb=new TestProblem1();new AdamsBashforthIntegrator(3,0.01).integrate(pb,0.0,new double[pb.getDimension()+ 10],1.0,new double[pb.getDimension()+ 10]);fail(""an exception should have been thrown"");}catch(DerivativeException de){fail(""wrong exception caught"");}catch(IntegratorException ie){}}"
"org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest.testDecreasingSteps",0,"public void testDecreasingSteps()throws DerivativeException,IntegratorException {TestProblemAbstract[]problems=TestProblemFactory.getProblems();for (int k=0;k < problems.length;++k){double previousError=Double.NaN;for (int i=6;i < 10;++i){TestProblemAbstract pb=(TestProblemAbstract)problems[k].clone();double step=(pb.getFinalTime()- pb.getInitialTime())* Math.pow(2.0,-i);FirstOrderIntegrator integ=new AdamsBashforthIntegrator(5,step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);EventHandler[]functions=pb.getEventsHandlers();for (int l=0;l < functions.length;++l){integ.addEventHandler(functions[l],Double.POSITIVE_INFINITY,1.0e-6 * step,1000);}double stopTime=integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);if (functions.length == 0){assertEquals(pb.getFinalTime(),stopTime,1.0e-10);}double error=handler.getMaximalValueError();if (i > 6){assertTrue(error < Math.abs(previousError));}previousError=error;}}}"
"org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest.testSmallStep",0,"public void testSmallStep()throws DerivativeException,IntegratorException {TestProblem1 pb=new TestProblem1();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.001;FirstOrderIntegrator integ=new AdamsBashforthIntegrator(3,step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.getLastError()< 2.0e-9);assertTrue(handler.getMaximalValueError()< 3.0e-8);assertEquals(0,handler.getMaximalTimeError(),1.0e-14);assertEquals(""Adams-Bashforth"",integ.getName());}"
"org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest.testBigStep",0,"public void testBigStep()throws DerivativeException,IntegratorException {TestProblem1 pb=new TestProblem1();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.2;FirstOrderIntegrator integ=new AdamsBashforthIntegrator(3,step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.getLastError()> 0.05);assertTrue(handler.getMaximalValueError()> 0.1);assertEquals(0,handler.getMaximalTimeError(),1.0e-14);}"
"org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest.testBackward",0,"public void testBackward()throws DerivativeException,IntegratorException {TestProblem5 pb=new TestProblem5();double step=Math.abs(pb.getFinalTime()- pb.getInitialTime())* 0.001;FirstOrderIntegrator integ=new AdamsBashforthIntegrator(5,step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.getLastError()< 8.0e-11);assertTrue(handler.getMaximalValueError()< 8.0e-11);assertEquals(0,handler.getMaximalTimeError(),1.0e-12);assertEquals(""Adams-Bashforth"",integ.getName());}"
"org.apache.commons.math.analysis.SimpsonIntegratorTest.testSinFunction",0,"/** * Test of integrator for the sine function.*/public void testSinFunction()throws MathException {UnivariateRealFunction f=new SinFunction();UnivariateRealIntegrator integrator=new SimpsonIntegrator(f);double min,max,expected,result,tolerance;min=0;max=Math.PI;expected=2;tolerance=Math.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(min,max);assertEquals(expected,result,tolerance);min=-Math.PI / 3;max=0;expected=-0.5;tolerance=Math.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(min,max);assertEquals(expected,result,tolerance);}"
"org.apache.commons.math.analysis.SimpsonIntegratorTest.testQuinticFunction",0,"/** * Test of integrator for the quintic function.*/public void testQuinticFunction()throws MathException {UnivariateRealFunction f=new QuinticFunction();UnivariateRealIntegrator integrator=new SimpsonIntegrator(f);double min,max,expected,result,tolerance;min=0;max=1;expected=-1.0 / 48;tolerance=Math.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(min,max);assertEquals(expected,result,tolerance);min=0;max=0.5;expected=11.0 / 768;tolerance=Math.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(min,max);assertEquals(expected,result,tolerance);min=-1;max=4;expected=2048 / 3.0 - 78 + 1.0 / 48;tolerance=Math.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(min,max);assertEquals(expected,result,tolerance);}"
"org.apache.commons.math.analysis.SimpsonIntegratorTest.testParameters",0,"/** * Test of parameters for the integrator.*/public void testParameters()throws Exception {UnivariateRealFunction f=new SinFunction();UnivariateRealIntegrator integrator=new SimpsonIntegrator(f);try {integrator.integrate(1,-1);fail(""Expecting IllegalArgumentException - bad interval"");}catch(IllegalArgumentException ex){}try {integrator.setMinimalIterationCount(5);integrator.setMaximalIterationCount(4);integrator.integrate(-1,1);fail(""Expecting IllegalArgumentException - bad iteration limits"");}catch(IllegalArgumentException ex){}try {integrator.setMinimalIterationCount(10);integrator.setMaximalIterationCount(99);integrator.integrate(-1,1);fail(""Expecting IllegalArgumentException - bad iteration limits"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.distribution.BetaDistributionTest.testCumulative",0,"public void testCumulative()throws MathException {double[]x=new double[]{-0.1,0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.1};checkCumulative(0.1,0.1,x,new double[]{0.0000000000,0.0000000000,0.4063850939,0.4397091902,0.4628041861,0.4821200456,0.5000000000,0.5178799544,0.5371958139,0.5602908098,0.5936149061,1.0000000000,1.0000000000});checkCumulative(0.1,0.5,x,new double[]{0.0000000000,0.0000000000,0.7048336221,0.7593042194,0.7951765304,0.8234948385,0.8480017124,0.8706034370,0.8926585878,0.9156406404,0.9423662883,1.0000000000,1.0000000000});checkCumulative(0.1,1.0,x,new double[]{0.0000000000,0.0000000000,0.7943282347,0.8513399225,0.8865681506,0.9124435366,0.9330329915,0.9502002165,0.9649610951,0.9779327685,0.9895192582,1.0000000000,1.0000000000});checkCumulative(0.1,2.0,x,new double[]{0.0000000000,0.0000000000,0.8658177758,0.9194471163,0.9486279211,0.9671901487,0.9796846411,0.9882082252,0.9939099280,0.9974914239,0.9994144508,1.0000000000,1.0000000000});checkCumulative(0.1,4.0,x,new double[]{0.0000000000,0.0000000000,0.9234991121,0.9661958941,0.9842285085,0.9928444112,0.9970040660,0.9989112804,0.9996895625,0.9999440793,0.9999967829,1.0000000000,1.0000000000});checkCumulative(0.5,0.1,x,new double[]{0.00000000000,0.00000000000,0.05763371168,0.08435935962,0.10734141216,0.12939656302,0.15199828760,0.17650516146,0.20482346963,0.24069578055,0.29516637795,1.00000000000,1.00000000000});checkCumulative(0.5,0.5,x,new double[]{0.0000000000,0.0000000000,0.2048327647,0.2951672353,0.3690101196,0.4359057832,0.5000000000,0.5640942168,0.6309898804,0.7048327647,0.7951672353,1.0000000000,1.0000000000});checkCumulative(0.5,1.0,x,new double[]{0.0000000000,0.0000000000,0.3162277660,0.4472135955,0.5477225575,0.6324555320,0.7071067812,0.7745966692,0.8366600265,0.8944271910,0.9486832981,1.0000000000,1.0000000000});checkCumulative(0.5,2.0,x,new double[]{0.0000000000,0.0000000000,0.4585302607,0.6260990337,0.7394254526,0.8221921916,0.8838834765,0.9295160031,0.9621590305,0.9838699101,0.9961174630,1.0000000000,1.0000000000});checkCumulative(0.5,4.0,x,new double[]{0.0000000000,0.0000000000,0.6266250826,0.8049844719,0.8987784842,0.9502644369,0.9777960959,0.9914837366,0.9974556254,0.9995223859,0.9999714889,1.0000000000,1.0000000000});checkCumulative(1.0,0.1,x,new double[]{0.00000000000,0.00000000000,0.01048074179,0.02206723146,0.03503890488,0.04979978349,0.06696700846,0.08755646344,0.11343184943,0.14866007748,0.20567176528,1.00000000000,1.00000000000});checkCumulative(1.0,0.5,x,new double[]{0.00000000000,0.00000000000,0.05131670195,0.10557280900,0.16333997347,0.22540333076,0.29289321881,0.36754446797,0.45227744249,0.55278640450,0.68377223398,1.00000000000,1.00000000000});checkCumulative(1,1,x,new double[]{0.0,0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.0});checkCumulative(1,2,x,new double[]{0.00,0.00,0.19,0.36,0.51,0.64,0.75,0.84,0.91,0.96,0.99,1.00,1.00});checkCumulative(1,4,x,new double[]{0.0000,0.0000,0.3439,0.5904,0.7599,0.8704,0.9375,0.9744,0.9919,0.9984,0.9999,1.0000,1.0000});checkCumulative(2.0,0.1,x,new double[]{0.0000000000000,0.0000000000000,0.0005855492117,0.0025085760862,0.0060900720266,0.0117917748341,0.0203153588864,0.0328098512512,0.0513720788952,0.0805528836776,0.1341822241505,1.0000000000000,1.0000000000000});checkCumulative(2,1,x,new double[]{0.00,0.00,0.01,0.04,0.09,0.16,0.25,0.36,0.49,0.64,0.81,1.00,1.00});checkCumulative(2.0,0.5,x,new double[]{0.000000000000,0.000000000000,0.003882537047,0.016130089900,0.037840969486,0.070483996910,0.116116523517,0.177807808356,0.260574547368,0.373900966300,0.541469739276,1.000000000000,1.000000000000});checkCumulative(2,2,x,new double[]{0.000,0.000,0.028,0.104,0.216,0.352,0.500,0.648,0.784,0.896,0.972,1.000,1.000});checkCumulative(2,4,x,new double[]{0.00000,0.00000,0.08146,0.26272,0.47178,0.66304,0.81250,0.91296,0.96922,0.99328,0.99954,1.00000,1.00000});checkCumulative(4.0,0.1,x,new double[]{0.000000000e+00,0.000000000e+00,3.217128269e-06,5.592070271e-05,3.104375474e-04,1.088719595e-03,2.995933981e-03,7.155588777e-03,1.577149153e-02,3.380410585e-02,7.650088789e-02,1.000000000e+00,1.000000000e+00});checkCumulative(4.0,0.5,x,new double[]{0.000000000e+00,0.000000000e+00,2.851114863e-05,4.776140576e-04,2.544374616e-03,8.516263371e-03,2.220390414e-02,4.973556312e-02,1.012215158e-01,1.950155281e-01,3.733749174e-01,1.000000000e+00,1.000000000e+00});checkCumulative(4,1,x,new double[]{0.0000,0.0000,0.0001,0.0016,0.0081,0.0256,0.0625,0.1296,0.2401,0.4096,0.6561,1.0000,1.0000});checkCumulative(4,2,x,new double[]{0.00000,0.00000,0.00046,0.00672,0.03078,0.08704,0.18750,0.33696,0.52822,0.73728,0.91854,1.00000,1.00000});checkCumulative(4,4,x,new double[]{0.000000,0.000000,0.002728,0.033344,0.126036,0.289792,0.500000,0.710208,0.873964,0.966656,0.997272,1.000000,1.000000});}"
"org.apache.commons.math.distribution.BetaDistributionTest.testDensity",0,"public void testDensity()throws MathException {double[]x=new double[]{1e-6,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9};checkDensity(0.1,0.1,x,new double[]{12741.2357380649,0.4429889586665234,2.639378715e-01,2.066393611e-01,1.832401831e-01,1.766302780e-01,1.832404579e-01,2.066400696e-01,2.639396531e-01,4.429925026e-01});checkDensity(0.1,0.5,x,new double[]{2.218377102e+04,7.394524202e-01,4.203020268e-01,3.119435533e-01,2.600787829e-01,2.330648626e-01,2.211408259e-01,2.222728708e-01,2.414013907e-01,3.070567405e-01});checkDensity(0.1,1.0,x,new double[]{2.511886432e+04,7.943210858e-01,4.256680458e-01,2.955218303e-01,2.281103709e-01,1.866062624e-01,1.583664652e-01,1.378514078e-01,1.222414585e-01,1.099464743e-01});checkDensity(0.1,2.0,x,new double[]{2.763072312e+04,7.863770012e-01,3.745874120e-01,2.275514842e-01,1.505525939e-01,1.026332391e-01,6.968107049e-02,4.549081293e-02,2.689298641e-02,1.209399123e-02});checkDensity(0.1,4.0,x,new double[]{2.997927462e+04,6.911058917e-01,2.601128486e-01,1.209774010e-01,5.880564714e-02,2.783915474e-02,1.209657335e-02,4.442148268e-03,1.167143939e-03,1.312171805e-04});checkDensity(0.5,0.1,x,new double[]{88.3152184726,0.3070542841,0.2414007269,0.2222727015,0.2211409364,0.2330652355,0.2600795198,0.3119449793,0.4203052841,0.7394649088});checkDensity(0.5,0.5,x,new double[]{318.3100453389,1.0610282383,0.7957732234,0.6946084565,0.6497470636,0.6366197724,0.6497476051,0.6946097796,0.7957762075,1.0610376697});checkDensity(0.5,1.0,x,new double[]{500.0000000000,1.5811309244,1.1180311937,0.9128694077,0.7905684268,0.7071060741,0.6454966865,0.5976138778,0.5590166450,0.5270459839});checkDensity(0.5,2.0,x,new double[]{749.99925000000,2.134537420613655,1.34163575536,0.95851150881,0.71151039830,0.53032849490,0.38729704363,0.26892534859,0.16770415497,0.07905610701});checkDensity(0.5,4.0,x,new double[]{1.093746719e+03,2.52142232809988,1.252190241e+00,6.849343920e-01,3.735417140e-01,1.933481570e-01,9.036885833e-02,3.529621669e-02,9.782644546e-03,1.152878503e-03});checkDensity(1.0,0.1,x,new double[]{0.1000000900,0.1099466942,0.1222417336,0.1378517623,0.1583669403,0.1866069342,0.2281113974,0.2955236034,0.4256718768,0.7943353837});checkDensity(1.0,0.5,x,new double[]{0.5000002500,0.5270465695,0.5590173438,0.5976147315,0.6454977623,0.7071074883,0.7905704033,0.9128724506,1.1180367838,1.5811467358});checkDensity(1,1,x,new double[]{1,1,1,1,1,1,1,1,1,1});checkDensity(1,2,x,new double[]{1.999998,1.799998,1.599998,1.399998,1.199998,0.999998,0.799998,0.599998,0.399998,0.199998});checkDensity(1,4,x,new double[]{3.999988000012,2.915990280011,2.047992320010,1.371994120008,0.863995680007,0.499997000006,0.255998080005,0.107998920004,0.031999520002,0.003999880001});checkDensity(2.0,0.1,x,new double[]{1.100000990e-07,1.209425730e-02,2.689331586e-02,4.549123318e-02,6.968162794e-02,1.026340191e-01,1.505537732e-01,2.275534997e-01,3.745917198e-01,7.863929037e-01});checkDensity(2.0,0.5,x,new double[]{7.500003750e-07,7.905777599e-02,1.677060417e-01,2.689275256e-01,3.872996256e-01,5.303316769e-01,7.115145488e-01,9.585174425e-01,1.341645818e+00,2.134537420613655});checkDensity(2,1,x,new double[]{0.000002,0.200002,0.400002,0.600002,0.800002,1.000002,1.200002,1.400002,1.600002,1.800002});checkDensity(2,2,x,new double[]{5.9999940e-06,5.4000480e-01,9.6000360e-01,1.2600024e+00,1.4400012e+00,1.5000000e+00,1.4399988e+00,1.2599976e+00,9.5999640e-01,5.3999520e-01});checkDensity(2,4,x,new double[]{0.00001999994,1.45800971996,2.04800255997,2.05799803998,1.72799567999,1.24999500000,0.76799552000,0.37799676001,0.12799824001,0.01799948000});checkDensity(4.0,0.1,x,new double[]{1.193501074e-19,1.312253162e-04,1.167181580e-03,4.442248535e-03,1.209679109e-02,2.783958903e-02,5.880649983e-02,1.209791638e-01,2.601171405e-01,6.911229392e-01});checkDensity(4.0,0.5,x,new double[]{1.093750547e-18,1.152948959e-03,9.782950259e-03,3.529697305e-02,9.037036449e-02,1.933508639e-01,3.735463833e-01,6.849425461e-01,1.252205894e+00,2.52142232809988});checkDensity(4,1,x,new double[]{4.000000000e-18,4.000120001e-03,3.200048000e-02,1.080010800e-01,2.560019200e-01,5.000030000e-01,8.640043200e-01,1.372005880e+00,2.048007680e+00,2.916009720e+00});checkDensity(4,2,x,new double[]{1.999998000e-17,1.800052000e-02,1.280017600e-01,3.780032400e-01,7.680044800e-01,1.250005000e+00,1.728004320e+00,2.058001960e+00,2.047997440e+00,1.457990280e+00});checkDensity(4,4,x,new double[]{1.399995800e-16,1.020627216e-01,5.734464512e-01,1.296547409e+00,1.935364838e+00,2.187500000e+00,1.935355162e+00,1.296532591e+00,5.734335488e-01,1.020572784e-01});}"
"org.apache.commons.math.stat.descriptive.rank.MaxTest.testSpecialValues",0,"public void testSpecialValues(){double[]testArray={0d,Double.NaN,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY};Max max=new Max();assertTrue(Double.isNaN(max.getResult()));max.increment(testArray[0]);assertEquals(0d,max.getResult(),0);max.increment(testArray[1]);assertEquals(0d,max.getResult(),0);max.increment(testArray[2]);assertEquals(0d,max.getResult(),0);max.increment(testArray[3]);assertEquals(Double.POSITIVE_INFINITY,max.getResult(),0);assertEquals(Double.POSITIVE_INFINITY,max.evaluate(testArray),0);}"
"org.apache.commons.math.stat.descriptive.rank.MaxTest.testNaNs",0,"public void testNaNs(){Max max=new Max();double nan=Double.NaN;assertEquals(3d,max.evaluate(new double[]{nan,2d,3d}),0);assertEquals(3d,max.evaluate(new double[]{1d,nan,3d}),0);assertEquals(2d,max.evaluate(new double[]{1d,2d,nan}),0);assertTrue(Double.isNaN(max.evaluate(new double[]{nan,nan,nan})));}"
"org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testSanityChecks",0,"public void testSanityChecks(){try {TestProblem1 pb=new TestProblem1();new ClassicalRungeKuttaIntegrator(0.01).integrate(pb,0.0,new double[pb.getDimension()+ 10],1.0,new double[pb.getDimension()]);fail(""an exception should have been thrown"");}catch(DerivativeException de){fail(""wrong exception caught"");}catch(IntegratorException ie){}try {TestProblem1 pb=new TestProblem1();new ClassicalRungeKuttaIntegrator(0.01).integrate(pb,0.0,new double[pb.getDimension()],1.0,new double[pb.getDimension()+ 10]);fail(""an exception should have been thrown"");}catch(DerivativeException de){fail(""wrong exception caught"");}catch(IntegratorException ie){}try {TestProblem1 pb=new TestProblem1();new ClassicalRungeKuttaIntegrator(0.01).integrate(pb,0.0,new double[pb.getDimension()],0.0,new double[pb.getDimension()]);fail(""an exception should have been thrown"");}catch(DerivativeException de){fail(""wrong exception caught"");}catch(IntegratorException ie){}}"
"org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testDecreasingSteps",0,"public void testDecreasingSteps()throws DerivativeException,IntegratorException {TestProblemAbstract[]problems=TestProblemFactory.getProblems();for (int k=0;k < problems.length;++k){double previousError=Double.NaN;for (int i=4;i < 10;++i){TestProblemAbstract pb=(TestProblemAbstract)problems[k].clone();double step=(pb.getFinalTime()- pb.getInitialTime())* Math.pow(2.0,-i);FirstOrderIntegrator integ=new ClassicalRungeKuttaIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);EventHandler[]functions=pb.getEventsHandlers();for (int l=0;l < functions.length;++l){integ.addEventHandler(functions[l],Double.POSITIVE_INFINITY,1.0e-6 * step,1000);}assertEquals(functions.length,integ.getEventHandlers().size());double stopTime=integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);if (functions.length == 0){assertEquals(pb.getFinalTime(),stopTime,1.0e-10);}double error=handler.getMaximalValueError();if (i > 4){assertTrue(error < Math.abs(previousError));}previousError=error;assertEquals(0,handler.getMaximalTimeError(),1.0e-12);integ.clearEventHandlers();assertEquals(0,integ.getEventHandlers().size());}}}"
"org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testSmallStep",0,"public void testSmallStep()throws DerivativeException,IntegratorException {TestProblem1 pb=new TestProblem1();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.001;FirstOrderIntegrator integ=new ClassicalRungeKuttaIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.getLastError()< 2.0e-13);assertTrue(handler.getMaximalValueError()< 4.0e-12);assertEquals(0,handler.getMaximalTimeError(),1.0e-12);assertEquals(""classical Runge-Kutta"",integ.getName());}"
"org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testBigStep",0,"public void testBigStep()throws DerivativeException,IntegratorException {TestProblem1 pb=new TestProblem1();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.2;FirstOrderIntegrator integ=new ClassicalRungeKuttaIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.getLastError()> 0.0004);assertTrue(handler.getMaximalValueError()> 0.005);assertEquals(0,handler.getMaximalTimeError(),1.0e-12);}"
"org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testBackward",0,"public void testBackward()throws DerivativeException,IntegratorException {TestProblem5 pb=new TestProblem5();double step=Math.abs(pb.getFinalTime()- pb.getInitialTime())* 0.001;FirstOrderIntegrator integ=new ClassicalRungeKuttaIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.getLastError()< 5.0e-10);assertTrue(handler.getMaximalValueError()< 7.0e-10);assertEquals(0,handler.getMaximalTimeError(),1.0e-12);assertEquals(""classical Runge-Kutta"",integ.getName());}"
"org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testKepler",0,"public void testKepler()throws DerivativeException,IntegratorException {final TestProblem3 pb=new TestProblem3(0.9);double step=(pb.getFinalTime()- pb.getInitialTime())* 0.0003;FirstOrderIntegrator integ=new ClassicalRungeKuttaIntegrator(step);integ.addStepHandler(new KeplerHandler(pb));integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);}"
"org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testStepSize",0,"public void testStepSize()throws DerivativeException,IntegratorException {final double step=1.23456;FirstOrderIntegrator integ=new ClassicalRungeKuttaIntegrator(step);integ.addStepHandler(new StepHandler(){private static final long serialVersionUID=0L;public void handleStep(StepInterpolator interpolator,boolean isLast){if (!isLast){assertEquals(step,interpolator.getCurrentTime()- interpolator.getPreviousTime(),1.0e-12);}}public boolean requiresDenseOutput(){return false;}public void reset(){}});integ.integrate(new FirstOrderDifferentialEquations(){private static final long serialVersionUID=0L;public void computeDerivatives(double t,double[]y,double[]dot){dot[0]=1.0;}public int getDimension(){return 1;}},0.0,new double[]{0.0},5.0,new double[1]);}"
"org.apache.commons.math.analysis.RiddersSolverTest.testDeprecated",0,"/** * Test the deprecated APIs.*/@Deprecated public void testDeprecated()throws MathException {UnivariateRealFunction f=new SinFunction();UnivariateRealSolver solver=new RiddersSolver(f);double min,max,expected,result,tolerance;min=3.0;max=4.0;expected=Math.PI;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(min,max);assertEquals(expected,result,tolerance);min=-1.0;max=1.5;expected=0.0;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(min,max);assertEquals(expected,result,tolerance);}"
"org.apache.commons.math.analysis.RiddersSolverTest.testSinFunction",0,"/** * Test of solver for the sine function.*/public void testSinFunction()throws MathException {UnivariateRealFunction f=new SinFunction();UnivariateRealSolver solver=new RiddersSolver();double min,max,expected,result,tolerance;min=3.0;max=4.0;expected=Math.PI;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(f,min,max);assertEquals(expected,result,tolerance);min=-1.0;max=1.5;expected=0.0;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(f,min,max);assertEquals(expected,result,tolerance);}"
"org.apache.commons.math.analysis.RiddersSolverTest.testQuinticFunction",0,"/** * Test of solver for the quintic function.*/public void testQuinticFunction()throws MathException {UnivariateRealFunction f=new QuinticFunction();UnivariateRealSolver solver=new RiddersSolver();double min,max,expected,result,tolerance;min=-0.4;max=0.2;expected=0.0;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(f,min,max);assertEquals(expected,result,tolerance);min=0.75;max=1.5;expected=1.0;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(f,min,max);assertEquals(expected,result,tolerance);min=-0.9;max=-0.2;expected=-0.5;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(f,min,max);assertEquals(expected,result,tolerance);}"
"org.apache.commons.math.analysis.RiddersSolverTest.testExpm1Function",0,"/** * Test of solver for the exponential function.*/public void testExpm1Function()throws MathException {UnivariateRealFunction f=new Expm1Function();UnivariateRealSolver solver=new RiddersSolver();double min,max,expected,result,tolerance;min=-1.0;max=2.0;expected=0.0;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(f,min,max);assertEquals(expected,result,tolerance);min=-20.0;max=10.0;expected=0.0;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(f,min,max);assertEquals(expected,result,tolerance);min=-50.0;max=100.0;expected=0.0;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(f,min,max);assertEquals(expected,result,tolerance);}"
"org.apache.commons.math.analysis.RiddersSolverTest.testParameters",0,"/** * Test of parameters for the solver.*/public void testParameters()throws Exception {UnivariateRealFunction f=new SinFunction();UnivariateRealSolver solver=new RiddersSolver();try {solver.solve(f,1,-1);fail(""Expecting IllegalArgumentException - bad interval"");}catch(IllegalArgumentException ex){}try {solver.solve(f,2,3);fail(""Expecting IllegalArgumentException - no bracketing"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest.testDerivativesConsistency",0,"public void testDerivativesConsistency()throws DerivativeException,IntegratorException {TestProblem3 pb=new TestProblem3(0.1);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=scalAbsoluteTolerance;DormandPrince54Integrator integ=new DormandPrince54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);checkDerivativesConsistency(integ,pb,1.0e-10);}"
"org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest.testSerialization",0,"public void testSerialization()throws DerivativeException,IntegratorException,IOException,ClassNotFoundException {TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=scalAbsoluteTolerance;DormandPrince54Integrator integ=new DormandPrince54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);integ.addStepHandler(new ContinuousOutputModel());integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);ByteArrayOutputStream bos=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(bos);for(StepHandler handler : integ.getStepHandlers()){oos.writeObject(handler);}assertTrue(bos.size()> 119500);assertTrue(bos.size()< 120500);ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());ObjectInputStream ois=new ObjectInputStream(bis);ContinuousOutputModel cm=(ContinuousOutputModel)ois.readObject();Random random=new Random(347588535632l);double maxError=0.0;for (int i=0;i < 1000;++i){double r=random.nextDouble();double time=r * pb.getInitialTime()+ (1.0 - r)* pb.getFinalTime();cm.setInterpolatedTime(time);double[]interpolatedY=cm.getInterpolatedState();double[]theoreticalY=pb.computeTheoreticalState(time);double dx=interpolatedY[0]- theoreticalY[0];double dy=interpolatedY[1]- theoreticalY[1];double error=dx * dx + dy * dy;if (error > maxError){maxError=error;}}assertTrue(maxError < 7.0e-10);}"
"org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest.testClone",0,"public void testClone()throws DerivativeException,IntegratorException {TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=scalAbsoluteTolerance;DormandPrince54Integrator integ=new DormandPrince54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);integ.addStepHandler(new StepHandler(){private static final long serialVersionUID=-6768136169276197L;public void handleStep(StepInterpolator interpolator,boolean isLast)throws DerivativeException {StepInterpolator cloned=interpolator.copy();double tA=cloned.getPreviousTime();double tB=cloned.getCurrentTime();double halfStep=Math.abs(tB - tA)/ 2;assertEquals(interpolator.getPreviousTime(),tA,1.0e-12);assertEquals(interpolator.getCurrentTime(),tB,1.0e-12);for (int i=0;i < 10;++i){double t=(i * tB + (9 - i)* tA)/ 9;interpolator.setInterpolatedTime(t);assertTrue(Math.abs(cloned.getInterpolatedTime()- t)> (halfStep / 10));cloned.setInterpolatedTime(t);assertEquals(t,cloned.getInterpolatedTime(),1.0e-12);double[]referenceState=interpolator.getInterpolatedState();double[]cloneState=cloned.getInterpolatedState();for (int j=0;j < referenceState.length;++j){assertEquals(referenceState[j],cloneState[j],1.0e-12);}}}public boolean requiresDenseOutput(){return true;}public void reset(){}});integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);}"
"org.apache.commons.math.optimization.MultiDirectionalTest.testCostExceptions",0,"public void testCostExceptions()throws ConvergenceException {CostFunction wrong=new CostFunction(){public double cost(double[]x)throws CostException {if (x[0]< 0){throw new CostException(""{0}"",new Object[]{""oops""});}else       if (x[0]> 1){throw new CostException(new RuntimeException(""oops""));}else {return x[0]* (1 - x[0]);}}};try {new MultiDirectional(1.9,0.4).minimize(wrong,10,new ValueChecker(1.0e-3),new double[]{-0.5},new double[]{0.5});fail(""an exception should have been thrown"");}catch(CostException ce){assertNull(ce.getCause());}catch(Exception e){fail(""wrong exception caught: "" + e.getMessage());}try {new MultiDirectional(1.9,0.4).minimize(wrong,10,new ValueChecker(1.0e-3),new double[]{0.5},new double[]{1.5});fail(""an exception should have been thrown"");}catch(CostException ce){assertNotNull(ce.getCause());}catch(Exception e){fail(""wrong exception caught: "" + e.getMessage());}}"
"org.apache.commons.math.optimization.MultiDirectionalTest.testRosenbrock",0,"public void testRosenbrock()throws CostException,ConvergenceException {CostFunction rosenbrock=new CostFunction(){public double cost(double[]x){++count;double a=x[1]- x[0]* x[0];double b=1.0 - x[0];return 100 * a * a + b * b;}};count=0;PointCostPair optimum=new MultiDirectional().minimize(rosenbrock,100,new ValueChecker(1.0e-3),new double[][]{{-1.2,1.0},{0.9,1.2},{3.5,-2.3}});assertTrue(count > 60);assertTrue(optimum.getCost()> 0.01);}"
"org.apache.commons.math.optimization.MultiDirectionalTest.testPowell",0,"public void testPowell()throws CostException,ConvergenceException {CostFunction powell=new CostFunction(){public double cost(double[]x){++count;double a=x[0]+ 10 * x[1];double b=x[2]- x[3];double c=x[1]- 2 * x[2];double d=x[0]- x[3];return a * a + 5 * b * b + c * c * c* c + 10 * d * d* d* d;}};count=0;PointCostPair optimum=new MultiDirectional().minimize(powell,1000,new ValueChecker(1.0e-3),new double[]{3.0,-1.0,0.0,1.0},new double[]{4.0,0.0,1.0,2.0});assertTrue(count > 850);assertTrue(optimum.getCost()> 0.015);}"
"org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveNull",0,"public void testSolveNull()throws MathException {try {UnivariateRealSolverUtils.solve(null,0.0,4.0);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveBadParameters",0,"public void testSolveBadParameters()throws MathException {try {UnivariateRealSolverUtils.solve(sin,0.0,4.0,4.0);}catch(IllegalArgumentException ex){}try {UnivariateRealSolverUtils.solve(sin,0.0,4.0,0.0);}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveSin",0,"public void testSolveSin()throws MathException {double x=UnivariateRealSolverUtils.solve(sin,1.0,4.0);assertEquals(Math.PI,x,1.0e-4);}"
"org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveAccuracyNull",0,"public void testSolveAccuracyNull()throws MathException {try {double accuracy=1.0e-6;UnivariateRealSolverUtils.solve(null,0.0,4.0,accuracy);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveAccuracySin",0,"public void testSolveAccuracySin()throws MathException {double accuracy=1.0e-6;double x=UnivariateRealSolverUtils.solve(sin,1.0,4.0,accuracy);assertEquals(Math.PI,x,accuracy);}"
"org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveNoRoot",0,"public void testSolveNoRoot()throws MathException {try {UnivariateRealSolverUtils.solve(sin,1.0,1.5);fail(""Expecting IllegalArgumentException "");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testBracketSin",0,"public void testBracketSin()throws MathException {double[]result=UnivariateRealSolverUtils.bracket(sin,0.0,-2.0,2.0);assertTrue(sin.value(result[0])< 0);assertTrue(sin.value(result[1])> 0);}"
"org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testBracketCornerSolution",0,"public void testBracketCornerSolution()throws MathException {try {UnivariateRealSolverUtils.bracket(sin,1.5,0,2.0);fail(""Expecting ConvergenceException"");}catch(ConvergenceException ex){}}"
"org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testBadParameters",0,"public void testBadParameters()throws MathException {try {UnivariateRealSolverUtils.bracket(null,1.5,0,2.0);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}try {UnivariateRealSolverUtils.bracket(sin,2.5,0,2.0);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}try {UnivariateRealSolverUtils.bracket(sin,1.5,2.0,1.0);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}try {UnivariateRealSolverUtils.bracket(sin,1.5,0,2.0,0);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.stat.FrequencyTest.testCounts",0,"/** * test freq counts */public void testCounts(){assertEquals(""total count"",0,f.getSumFreq());f.addValue(oneL);f.addValue(twoL);f.addValue(1);f.addValue(oneI);assertEquals(""one frequency count"",3,f.getCount(1));assertEquals(""two frequency count"",1,f.getCount(2));assertEquals(""three frequency count"",0,f.getCount(3));assertEquals(""total count"",4,f.getSumFreq());assertEquals(""zero cumulative frequency"",0,f.getCumFreq(0));assertEquals(""one cumulative frequency"",3,f.getCumFreq(1));assertEquals(""two cumulative frequency"",4,f.getCumFreq(2));assertEquals(""Integer argument cum freq"",4,f.getCumFreq(Integer.valueOf(2)));assertEquals(""five cumulative frequency"",4,f.getCumFreq(5));assertEquals(""foo cumulative frequency"",0,f.getCumFreq(""foo""));f.clear();assertEquals(""total count"",0,f.getSumFreq());f.addValue(""one"");f.addValue(""One"");f.addValue(""oNe"");f.addValue(""Z"");assertEquals(""one cumulative frequency"",1,f.getCount(""one""));assertEquals(""Z cumulative pct"",0.5,f.getCumPct(""Z""),tolerance);assertEquals(""z cumulative pct"",1.0,f.getCumPct(""z""),tolerance);assertEquals(""Ot cumulative pct"",0.25,f.getCumPct(""Ot""),tolerance);f.clear();f=null;Frequency f=new Frequency();f.addValue(1);f.addValue(Integer.valueOf(1));f.addValue(Long.valueOf(1));f.addValue(2);f.addValue(Integer.valueOf(-1));assertEquals(""1 count"",3,f.getCount(1));assertEquals(""1 count"",3,f.getCount(Integer.valueOf(1)));assertEquals(""0 cum pct"",0.2,f.getCumPct(0),tolerance);assertEquals(""1 pct"",0.6,f.getPct(Integer.valueOf(1)),tolerance);assertEquals(""-2 cum pct"",0,f.getCumPct(-2),tolerance);assertEquals(""10 cum pct"",1,f.getCumPct(10),tolerance);f=null;f=new Frequency(String.CASE_INSENSITIVE_ORDER);f.addValue(""one"");f.addValue(""One"");f.addValue(""oNe"");f.addValue(""Z"");assertEquals(""one count"",3,f.getCount(""one""));assertEquals(""Z cumulative pct -- case insensitive"",1,f.getCumPct(""Z""),tolerance);assertEquals(""z cumulative pct -- case insensitive"",1,f.getCumPct(""z""),tolerance);f=null;f=new Frequency();assertEquals(0L,f.getCount('a'));assertEquals(0L,f.getCumFreq('b'));TestUtils.assertEquals(Double.NaN,f.getPct('a'),0.0);TestUtils.assertEquals(Double.NaN,f.getCumPct('b'),0.0);f.addValue('a');f.addValue('b');f.addValue('c');f.addValue('d');assertEquals(1L,f.getCount('a'));assertEquals(2L,f.getCumFreq('b'));assertEquals(0.25,f.getPct('a'),0.0);assertEquals(0.5,f.getCumPct('b'),0.0);assertEquals(1.0,f.getCumPct('e'),0.0);}"
"org.apache.commons.math.stat.FrequencyTest.testPcts",0,"/** * test pcts */public void testPcts(){f.addValue(oneL);f.addValue(twoL);f.addValue(oneI);f.addValue(twoI);f.addValue(threeL);f.addValue(threeL);f.addValue(3);f.addValue(threeI);assertEquals(""one pct"",0.25,f.getPct(1),tolerance);assertEquals(""two pct"",0.25,f.getPct(Long.valueOf(2)),tolerance);assertEquals(""three pct"",0.5,f.getPct(threeL),tolerance);assertEquals(""five pct"",0,f.getPct(5),tolerance);assertEquals(""foo pct"",0,f.getPct(""foo""),tolerance);assertEquals(""one cum pct"",0.25,f.getCumPct(1),tolerance);assertEquals(""two cum pct"",0.50,f.getCumPct(Long.valueOf(2)),tolerance);assertEquals(""Integer argument"",0.50,f.getCumPct(Integer.valueOf(2)),tolerance);assertEquals(""three cum pct"",1.0,f.getCumPct(threeL),tolerance);assertEquals(""five cum pct"",1.0,f.getCumPct(5),tolerance);assertEquals(""zero cum pct"",0.0,f.getCumPct(0),tolerance);assertEquals(""foo cum pct"",0,f.getCumPct(""foo""),tolerance);}"
"org.apache.commons.math.stat.FrequencyTest.testAdd",0,"/** * test adding incomparable values */public void testAdd(){char aChar='a';char bChar='b';String aString=""a"";f.addValue(aChar);f.addValue(bChar);try {f.addValue(aString);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}assertEquals(""a pct"",0.5,f.getPct(aChar),tolerance);assertEquals(""b cum pct"",1.0,f.getCumPct(bChar),tolerance);assertEquals(""a string pct"",0.0,f.getPct(aString),tolerance);assertEquals(""a string cum pct"",0.0,f.getCumPct(aString),tolerance);}"
"org.apache.commons.math.stat.FrequencyTest.testEmptyTable",0,"/** * test empty table */public void testEmptyTable(){assertEquals(""freq sum,empty table"",0,f.getSumFreq());assertEquals(""count,empty table"",0,f.getCount(0));assertEquals(""count,empty table"",0,f.getCount(Integer.valueOf(0)));assertEquals(""cum freq,empty table"",0,f.getCumFreq(0));assertEquals(""cum freq,empty table"",0,f.getCumFreq(""x""));assertTrue(""pct,empty table"",Double.isNaN(f.getPct(0)));assertTrue(""pct,empty table"",Double.isNaN(f.getPct(Integer.valueOf(0))));assertTrue(""cum pct,empty table"",Double.isNaN(f.getCumPct(0)));assertTrue(""cum pct,empty table"",Double.isNaN(f.getCumPct(Integer.valueOf(0))));}"
"org.apache.commons.math.stat.FrequencyTest.testToString",0,"/** * Tests toString()*/public void testToString(){f.addValue(oneL);f.addValue(twoL);f.addValue(oneI);f.addValue(twoI);String s=f.toString();assertNotNull(s);BufferedReader reader=new BufferedReader(new StringReader(s));try {String line=reader.readLine();assertNotNull(line);line=reader.readLine();assertNotNull(line);line=reader.readLine();assertNotNull(line);line=reader.readLine();assertNull(line);}catch(IOException ex){fail(ex.getMessage());}}"
"org.apache.commons.math.stat.FrequencyTest.testIntegerValues",0,"public void testIntegerValues(){Object obj1=null;obj1=Integer.valueOf(1);Integer int1=Integer.valueOf(1);f.addValue(obj1);f.addValue(int1);f.addValue(2);f.addValue(Long.valueOf(2));assertEquals(""Integer 1 count"",2,f.getCount(1));assertEquals(""Integer 1 count"",2,f.getCount(Integer.valueOf(1)));assertEquals(""Integer 1 count"",2,f.getCount(Long.valueOf(1)));assertEquals(""Integer 1 cumPct"",0.5,f.getCumPct(1),tolerance);assertEquals(""Integer 1 cumPct"",0.5,f.getCumPct(Long.valueOf(1)),tolerance);assertEquals(""Integer 1 cumPct"",0.5,f.getCumPct(Integer.valueOf(1)),tolerance);Iterator it=f.valuesIterator();while (it.hasNext()){assertTrue(it.next()instanceof Long);}}"
"org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest.testPredictorCoefficients",0,"public void testPredictorCoefficients(){for (int order=1;order < 10;++order){double[]moulton=new AdamsMoultonIntegrator(order,0.01).getPredictorCoeffs();double[]bashforth=new AdamsBashforthIntegrator(order,0.01).getCoeffs();assertEquals(bashforth.length,moulton.length);for (int i=0;i < moulton.length;++i){assertEquals(bashforth[i],moulton[i],1.0e-16);}}}"
"org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest.testCorrectorCoefficients",0,"public void testCorrectorCoefficients(){double[]coeffs1=new AdamsMoultonIntegrator(1,0.01).getCorrectorCoeffs();assertEquals(2,coeffs1.length);assertEquals(1.0 / 2.0,coeffs1[0],1.0e-16);assertEquals(1.0 / 2.0,coeffs1[1],1.0e-16);double[]coeffs2=new AdamsMoultonIntegrator(2,0.01).getCorrectorCoeffs();assertEquals(3,coeffs2.length);assertEquals(5.0 / 12.0,coeffs2[0],1.0e-16);assertEquals(8.0 / 12.0,coeffs2[1],1.0e-16);assertEquals(-1.0 / 12.0,coeffs2[2],1.0e-16);double[]coeffs3=new AdamsMoultonIntegrator(3,0.01).getCorrectorCoeffs();assertEquals(4,coeffs3.length);assertEquals(9.0 / 24.0,coeffs3[0],1.0e-16);assertEquals(19.0 / 24.0,coeffs3[1],1.0e-16);assertEquals(-5.0 / 24.0,coeffs3[2],1.0e-16);assertEquals(1.0 / 24.0,coeffs3[3],1.0e-16);double[]coeffs4=new AdamsMoultonIntegrator(4,0.01).getCorrectorCoeffs();assertEquals(5,coeffs4.length);assertEquals(251.0 / 720.0,coeffs4[0],1.0e-16);assertEquals(646.0 / 720.0,coeffs4[1],1.0e-16);assertEquals(-264.0 / 720.0,coeffs4[2],1.0e-16);assertEquals(106.0 / 720.0,coeffs4[3],1.0e-16);assertEquals(-19.0 / 720.0,coeffs4[4],1.0e-16);double[]coeffs5=new AdamsMoultonIntegrator(5,0.01).getCorrectorCoeffs();assertEquals(6,coeffs5.length);assertEquals(475.0 / 1440.0,coeffs5[0],1.0e-16);assertEquals(1427.0 / 1440.0,coeffs5[1],1.0e-16);assertEquals(-798.0 / 1440.0,coeffs5[2],1.0e-16);assertEquals(482.0 / 1440.0,coeffs5[3],1.0e-16);assertEquals(-173.0 / 1440.0,coeffs5[4],1.0e-16);assertEquals(27.0 / 1440.0,coeffs5[5],1.0e-16);double[]coeffs6=new AdamsMoultonIntegrator(6,0.01).getCorrectorCoeffs();assertEquals(7,coeffs6.length);assertEquals(19087.0 / 60480.0,coeffs6[0],1.0e-16);assertEquals(65112.0 / 60480.0,coeffs6[1],1.0e-16);assertEquals(-46461.0 / 60480.0,coeffs6[2],1.0e-16);assertEquals(37504.0 / 60480.0,coeffs6[3],1.0e-16);assertEquals(-20211.0 / 60480.0,coeffs6[4],1.0e-16);assertEquals(6312.0 / 60480.0,coeffs6[5],1.0e-16);assertEquals(-863.0 / 60480.0,coeffs6[6],1.0e-16);double[]coeffs7=new AdamsMoultonIntegrator(7,0.01).getCorrectorCoeffs();assertEquals(8,coeffs7.length);assertEquals(36799.0 / 120960.0,coeffs7[0],1.0e-16);assertEquals(139849.0 / 120960.0,coeffs7[1],1.0e-16);assertEquals(-121797.0 / 120960.0,coeffs7[2],1.0e-16);assertEquals(123133.0 / 120960.0,coeffs7[3],1.0e-16);assertEquals(-88547.0 / 120960.0,coeffs7[4],1.0e-16);assertEquals(41499.0 / 120960.0,coeffs7[5],1.0e-16);assertEquals(-11351.0 / 120960.0,coeffs7[6],1.0e-16);assertEquals(1375.0 / 120960.0,coeffs7[7],1.0e-16);double[]coeffs8=new AdamsMoultonIntegrator(8,0.01).getCorrectorCoeffs();assertEquals(9,coeffs8.length);assertEquals(1070017.0 / 3628800.0,coeffs8[0],1.0e-16);assertEquals(4467094.0 / 3628800.0,coeffs8[1],1.0e-16);assertEquals(-4604594.0 / 3628800.0,coeffs8[2],1.0e-16);assertEquals(5595358.0 / 3628800.0,coeffs8[3],1.0e-16);assertEquals(-5033120.0 / 3628800.0,coeffs8[4],1.0e-16);assertEquals(3146338.0 / 3628800.0,coeffs8[5],1.0e-16);assertEquals(-1291214.0 / 3628800.0,coeffs8[6],1.0e-16);assertEquals(312874.0 / 3628800.0,coeffs8[7],1.0e-16);assertEquals(-33953.0 / 3628800.0,coeffs8[8],1.0e-16);}"
"org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest.testDimensionCheck",0,"public void testDimensionCheck(){try {TestProblem1 pb=new TestProblem1();new AdamsMoultonIntegrator(3,0.01).integrate(pb,0.0,new double[pb.getDimension()+ 10],1.0,new double[pb.getDimension()+ 10]);fail(""an exception should have been thrown"");}catch(DerivativeException de){fail(""wrong exception caught"");}catch(IntegratorException ie){}}"
"org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest.testDecreasingSteps",0,"public void testDecreasingSteps()throws DerivativeException,IntegratorException {TestProblemAbstract[]problems=TestProblemFactory.getProblems();for (int k=0;k < problems.length;++k){double previousError=Double.NaN;for (int i=6;i < 10;++i){TestProblemAbstract pb=(TestProblemAbstract)problems[k].clone();double step=(pb.getFinalTime()- pb.getInitialTime())* Math.pow(2.0,-i);if (pb instanceof TestProblem3){step/=8;}FirstOrderIntegrator integ=new AdamsMoultonIntegrator(5,step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);EventHandler[]functions=pb.getEventsHandlers();for (int l=0;l < functions.length;++l){integ.addEventHandler(functions[l],Double.POSITIVE_INFINITY,1.0e-6 * step,1000);}double stopTime=integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);if (functions.length == 0){assertEquals(pb.getFinalTime(),stopTime,1.0e-10);}double error=handler.getMaximalValueError();if (i > 6){assertTrue(error < Math.abs(previousError));}previousError=error;}}}"
"org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest.testSmallStep",0,"public void testSmallStep()throws DerivativeException,IntegratorException {TestProblem1 pb=new TestProblem1();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.001;FirstOrderIntegrator integ=new AdamsMoultonIntegrator(3,step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.getLastError()< 7.0e-12);assertTrue(handler.getMaximalValueError()< 4.0e-11);assertEquals(0,handler.getMaximalTimeError(),1.0e-14);assertEquals(""Adams-Moulton"",integ.getName());}"
"org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest.testBigStep",0,"public void testBigStep()throws DerivativeException,IntegratorException {TestProblem1 pb=new TestProblem1();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.2;FirstOrderIntegrator integ=new AdamsMoultonIntegrator(3,step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.getLastError()> 0.01);assertTrue(handler.getMaximalValueError()> 0.03);assertEquals(0,handler.getMaximalTimeError(),1.0e-14);}"
"org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest.testBackward",0,"public void testBackward()throws DerivativeException,IntegratorException {TestProblem5 pb=new TestProblem5();double step=Math.abs(pb.getFinalTime()- pb.getInitialTime())* 0.001;FirstOrderIntegrator integ=new AdamsMoultonIntegrator(5,step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.getLastError()< 5.0e-10);assertTrue(handler.getMaximalValueError()< 7.0e-10);assertEquals(0,handler.getMaximalTimeError(),1.0e-12);assertEquals(""Adams-Moulton"",integ.getName());}"
"org.apache.commons.math.transform.FastCosineTransformerTest.testAdHocData",0,"/** * Test of transformer for the ad hoc data.*/public void testAdHocData()throws MathException {FastCosineTransformer transformer=new FastCosineTransformer();double result[],tolerance=1E-12;double x[]={0.0,1.0,4.0,9.0,16.0,25.0,36.0,49.0,64.0};double y[]={172.0,-105.096569476353,27.3137084989848,-12.9593152353742,8.0,-5.78585076868676,4.68629150101524,-4.15826451958632,4.0};result=transformer.transform(x);for (int i=0;i < result.length;i++){assertEquals(y[i],result[i],tolerance);}result=transformer.inversetransform(y);for (int i=0;i < result.length;i++){assertEquals(x[i],result[i],tolerance);}FastFourierTransformer.scaleArray(x,Math.sqrt(0.5 * (x.length - 1)));result=transformer.transform2(y);for (int i=0;i < result.length;i++){assertEquals(x[i],result[i],tolerance);}result=transformer.inversetransform2(x);for (int i=0;i < result.length;i++){assertEquals(y[i],result[i],tolerance);}}"
"org.apache.commons.math.transform.FastCosineTransformerTest.testSinFunction",0,"/** * Test of transformer for the sine function.*/public void testSinFunction()throws MathException {UnivariateRealFunction f=new SinFunction();FastCosineTransformer transformer=new FastCosineTransformer();double min,max,result[],tolerance=1E-12;int N=9;double expected[]={0.0,3.26197262739567,0.0,-2.17958042710327,0.0,-0.648846697642915,0.0,-0.433545502649478,0.0};min=0.0;max=2.0 * Math.PI * N / (N - 1);result=transformer.transform(f,min,max,N);for (int i=0;i < N;i++){assertEquals(expected[i],result[i],tolerance);}min=-Math.PI;max=Math.PI * (N + 1)/ (N - 1);result=transformer.transform(f,min,max,N);for (int i=0;i < N;i++){assertEquals(-expected[i],result[i],tolerance);}}"
"org.apache.commons.math.transform.FastCosineTransformerTest.testParameters",0,"/** * Test of parameters for the transformer.*/public void testParameters()throws Exception {UnivariateRealFunction f=new SinFunction();FastCosineTransformer transformer=new FastCosineTransformer();try {transformer.transform(f,1,-1,65);fail(""Expecting IllegalArgumentException - bad interval"");}catch(IllegalArgumentException ex){}try {transformer.transform(f,-1,1,1);fail(""Expecting IllegalArgumentException - bad samples number"");}catch(IllegalArgumentException ex){}try {transformer.transform(f,-1,1,64);fail(""Expecting IllegalArgumentException - bad samples number"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testStats",0,"/** * test stats */public void testStats(){List<Object> externalList=new ArrayList<Object>();DescriptiveStatistics u=new ListUnivariateImpl(externalList);assertEquals(""total count"",0,u.getN(),tolerance);u.addValue(one);u.addValue(two);u.addValue(two);u.addValue(three);assertEquals(""N"",n,u.getN(),tolerance);assertEquals(""sum"",sum,u.getSum(),tolerance);assertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);assertEquals(""var"",var,u.getVariance(),tolerance);assertEquals(""std"",std,u.getStandardDeviation(),tolerance);assertEquals(""mean"",mean,u.getMean(),tolerance);assertEquals(""min"",min,u.getMin(),tolerance);assertEquals(""max"",max,u.getMax(),tolerance);u.clear();assertEquals(""total count"",0,u.getN(),tolerance);}"
"org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testN0andN1Conditions",0,"public void testN0andN1Conditions()throws Exception {List<Object> list=new ArrayList<Object>();DescriptiveStatistics u=new ListUnivariateImpl(list);assertTrue(""Mean of n = 0 set should be NaN"",Double.isNaN(u.getMean()));assertTrue(""Standard Deviation of n = 0 set should be NaN"",Double.isNaN(u.getStandardDeviation()));assertTrue(""Variance of n = 0 set should be NaN"",Double.isNaN(u.getVariance()));list.add(Double.valueOf(one));assertTrue(""Mean of n = 1 set should be value of single item n1"",u.getMean()== one);assertTrue(""StdDev of n = 1 set should be zero,instead it is: "" + u.getStandardDeviation(),u.getStandardDeviation()== 0);assertTrue(""Variance of n = 1 set should be zero"",u.getVariance()== 0);}"
"org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSkewAndKurtosis",0,"public void testSkewAndKurtosis(){DescriptiveStatistics u=new DescriptiveStatistics();double[]testArray={12.5,12,11.8,14.2,14.9,14.5,21,8.2,10.3,11.3,14.1,9.9,12.2,12,12.1,11,19.8,11,10,8.8,9,12.3};for (int i=0;i < testArray.length;i++){u.addValue(testArray[i]);}assertEquals(""mean"",12.40455,u.getMean(),0.0001);assertEquals(""variance"",10.00236,u.getVariance(),0.0001);assertEquals(""skewness"",1.437424,u.getSkewness(),0.0001);assertEquals(""kurtosis"",2.37719,u.getKurtosis(),0.0001);}"
"org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testProductAndGeometricMean",0,"public void testProductAndGeometricMean()throws Exception {ListUnivariateImpl u=new ListUnivariateImpl(new ArrayList<Object>());u.setWindowSize(10);u.addValue(1.0);u.addValue(2.0);u.addValue(3.0);u.addValue(4.0);assertEquals(""Geometric mean not expected"",2.213364,u.getGeometricMean(),0.00001);for (int i=0;i < 10;i++){u.addValue(i + 2);}assertEquals(""Geometric mean not expected"",5.755931,u.getGeometricMean(),0.00001);}"
"org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSerialization",0,"/** * test stats */public void testSerialization(){DescriptiveStatistics u=new ListUnivariateImpl();assertEquals(""total count"",0,u.getN(),tolerance);u.addValue(one);u.addValue(two);DescriptiveStatistics u2=(DescriptiveStatistics)TestUtils.serializeAndRecover(u);u2.addValue(two);u2.addValue(three);assertEquals(""N"",n,u2.getN(),tolerance);assertEquals(""sum"",sum,u2.getSum(),tolerance);assertEquals(""sumsq"",sumSq,u2.getSumsq(),tolerance);assertEquals(""var"",var,u2.getVariance(),tolerance);assertEquals(""std"",std,u2.getStandardDeviation(),tolerance);assertEquals(""mean"",mean,u2.getMean(),tolerance);assertEquals(""min"",min,u2.getMin(),tolerance);assertEquals(""max"",max,u2.getMax(),tolerance);u2.clear();assertEquals(""total count"",0,u2.getN(),tolerance);}"
"org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testTrivial",0,"public void testTrivial()throws EstimationException {LinearProblem problem=new LinearProblem(new LinearMeasurement[]{new LinearMeasurement(new double[]{2},new EstimatedParameter[]{new EstimatedParameter(""p0"",0)},3.0)});LevenbergMarquardtEstimator estimator=new LevenbergMarquardtEstimator();estimator.estimate(problem);assertEquals(0,estimator.getRMS(problem),1.0e-10);try {estimator.guessParametersErrors(problem);fail(""an exception should have been thrown"");}catch(EstimationException ee){}catch(Exception e){fail(""wrong exception caught"");}assertEquals(1.5,problem.getUnboundParameters()[0].getEstimate(),1.0e-10);}"
"org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testQRColumnsPermutation",0,"public void testQRColumnsPermutation()throws EstimationException {EstimatedParameter[]x={new EstimatedParameter(""p0"",0),new EstimatedParameter(""p1"",0)};LinearProblem problem=new LinearProblem(new LinearMeasurement[]{new LinearMeasurement(new double[]{1.0,-1.0},new EstimatedParameter[]{x[0],x[1]},4.0),new LinearMeasurement(new double[]{2.0},new EstimatedParameter[]{x[1]},6.0),new LinearMeasurement(new double[]{1.0,-2.0},new EstimatedParameter[]{x[0],x[1]},1.0)});LevenbergMarquardtEstimator estimator=new LevenbergMarquardtEstimator();estimator.estimate(problem);assertEquals(0,estimator.getRMS(problem),1.0e-10);assertEquals(7.0,x[0].getEstimate(),1.0e-10);assertEquals(3.0,x[1].getEstimate(),1.0e-10);}"
"org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testNoDependency",0,"public void testNoDependency()throws EstimationException {EstimatedParameter[]p=new EstimatedParameter[]{new EstimatedParameter(""p0"",0),new EstimatedParameter(""p1"",0),new EstimatedParameter(""p2"",0),new EstimatedParameter(""p3"",0),new EstimatedParameter(""p4"",0),new EstimatedParameter(""p5"",0)};LinearProblem problem=new LinearProblem(new LinearMeasurement[]{new LinearMeasurement(new double[]{2},new EstimatedParameter[]{p[0]},0.0),new LinearMeasurement(new double[]{2},new EstimatedParameter[]{p[1]},1.1),new LinearMeasurement(new double[]{2},new EstimatedParameter[]{p[2]},2.2),new LinearMeasurement(new double[]{2},new EstimatedParameter[]{p[3]},3.3),new LinearMeasurement(new double[]{2},new EstimatedParameter[]{p[4]},4.4),new LinearMeasurement(new double[]{2},new EstimatedParameter[]{p[5]},5.5)});LevenbergMarquardtEstimator estimator=new LevenbergMarquardtEstimator();estimator.estimate(problem);assertEquals(0,estimator.getRMS(problem),1.0e-10);for (int i=0;i < p.length;++i){assertEquals(0.55 * i,p[i].getEstimate(),1.0e-10);}}"
"org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testOneSet",0,"public void testOneSet()throws EstimationException {EstimatedParameter[]p={new EstimatedParameter(""p0"",0),new EstimatedParameter(""p1"",0),new EstimatedParameter(""p2"",0)};LinearProblem problem=new LinearProblem(new LinearMeasurement[]{new LinearMeasurement(new double[]{1.0},new EstimatedParameter[]{p[0]},1.0),new LinearMeasurement(new double[]{-1.0,1.0},new EstimatedParameter[]{p[0],p[1]},1.0),new LinearMeasurement(new double[]{-1.0,1.0},new EstimatedParameter[]{p[1],p[2]},1.0)});LevenbergMarquardtEstimator estimator=new LevenbergMarquardtEstimator();estimator.estimate(problem);assertEquals(0,estimator.getRMS(problem),1.0e-10);assertEquals(1.0,p[0].getEstimate(),1.0e-10);assertEquals(2.0,p[1].getEstimate(),1.0e-10);assertEquals(3.0,p[2].getEstimate(),1.0e-10);}"
"org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testTwoSets",0,"public void testTwoSets()throws EstimationException {EstimatedParameter[]p={new EstimatedParameter(""p0"",0),new EstimatedParameter(""p1"",1),new EstimatedParameter(""p2"",2),new EstimatedParameter(""p3"",3),new EstimatedParameter(""p4"",4),new EstimatedParameter(""p5"",5)};double epsilon=1.0e-7;LinearProblem problem=new LinearProblem(new LinearMeasurement[]{new LinearMeasurement(new double[]{2.0,1.0,4.0},new EstimatedParameter[]{p[0],p[1],p[3]},2.0),new LinearMeasurement(new double[]{-4.0,-2.0,3.0,-7.0},new EstimatedParameter[]{p[0],p[1],p[2],p[3]},-9.0),new LinearMeasurement(new double[]{4.0,1.0,-2.0,8.0},new EstimatedParameter[]{p[0],p[1],p[2],p[3]},2.0),new LinearMeasurement(new double[]{-3.0,-12.0,-1.0},new EstimatedParameter[]{p[1],p[2],p[3]},2.0),new LinearMeasurement(new double[]{epsilon,1.0},new EstimatedParameter[]{p[4],p[5]},1.0 + epsilon * epsilon),new LinearMeasurement(new double[]{1.0,1.0},new EstimatedParameter[]{p[4],p[5]},2.0)});LevenbergMarquardtEstimator estimator=new LevenbergMarquardtEstimator();estimator.estimate(problem);assertEquals(0,estimator.getRMS(problem),1.0e-10);assertEquals(3.0,p[0].getEstimate(),1.0e-10);assertEquals(4.0,p[1].getEstimate(),1.0e-10);assertEquals(-1.0,p[2].getEstimate(),1.0e-10);assertEquals(-2.0,p[3].getEstimate(),1.0e-10);assertEquals(1.0 + epsilon,p[4].getEstimate(),1.0e-10);assertEquals(1.0 - epsilon,p[5].getEstimate(),1.0e-10);}"
"org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testNonInversible",0,"public void testNonInversible()throws EstimationException {EstimatedParameter[]p={new EstimatedParameter(""p0"",0),new EstimatedParameter(""p1"",0),new EstimatedParameter(""p2"",0)};LinearMeasurement[]m=new LinearMeasurement[]{new LinearMeasurement(new double[]{1.0,2.0,-3.0},new EstimatedParameter[]{p[0],p[1],p[2]},1.0),new LinearMeasurement(new double[]{2.0,1.0,3.0},new EstimatedParameter[]{p[0],p[1],p[2]},1.0),new LinearMeasurement(new double[]{-3.0,-9.0},new EstimatedParameter[]{p[0],p[2]},1.0)};LinearProblem problem=new LinearProblem(m);LevenbergMarquardtEstimator estimator=new LevenbergMarquardtEstimator();double initialCost=estimator.getRMS(problem);estimator.estimate(problem);assertTrue(estimator.getRMS(problem)< initialCost);assertTrue(Math.sqrt(m.length)* estimator.getRMS(problem)> 0.6);try {estimator.getCovariances(problem);fail(""an exception should have been thrown"");}catch(EstimationException ee){}catch(Exception e){fail(""wrong exception caught"");}double dJ0=2 * (m[0].getResidual()* m[0].getPartial(p[0])+ m[1].getResidual()* m[1].getPartial(p[0])+ m[2].getResidual()* m[2].getPartial(p[0]));double dJ1=2 * (m[0].getResidual()* m[0].getPartial(p[1])+ m[1].getResidual()* m[1].getPartial(p[1]));double dJ2=2 * (m[0].getResidual()* m[0].getPartial(p[2])+ m[1].getResidual()* m[1].getPartial(p[2])+ m[2].getResidual()* m[2].getPartial(p[2]));assertEquals(0,dJ0,1.0e-10);assertEquals(0,dJ1,1.0e-10);assertEquals(0,dJ2,1.0e-10);}"
"org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testIllConditioned",0,"public void testIllConditioned()throws EstimationException {EstimatedParameter[]p={new EstimatedParameter(""p0"",0),new EstimatedParameter(""p1"",1),new EstimatedParameter(""p2"",2),new EstimatedParameter(""p3"",3)};LinearProblem problem1=new LinearProblem(new LinearMeasurement[]{new LinearMeasurement(new double[]{10.0,7.0,8.0,7.0},new EstimatedParameter[]{p[0],p[1],p[2],p[3]},32.0),new LinearMeasurement(new double[]{7.0,5.0,6.0,5.0},new EstimatedParameter[]{p[0],p[1],p[2],p[3]},23.0),new LinearMeasurement(new double[]{8.0,6.0,10.0,9.0},new EstimatedParameter[]{p[0],p[1],p[2],p[3]},33.0),new LinearMeasurement(new double[]{7.0,5.0,9.0,10.0},new EstimatedParameter[]{p[0],p[1],p[2],p[3]},31.0)});LevenbergMarquardtEstimator estimator1=new LevenbergMarquardtEstimator();estimator1.estimate(problem1);assertEquals(0,estimator1.getRMS(problem1),1.0e-10);assertEquals(1.0,p[0].getEstimate(),1.0e-10);assertEquals(1.0,p[1].getEstimate(),1.0e-10);assertEquals(1.0,p[2].getEstimate(),1.0e-10);assertEquals(1.0,p[3].getEstimate(),1.0e-10);LinearProblem problem2=new LinearProblem(new LinearMeasurement[]{new LinearMeasurement(new double[]{10.0,7.0,8.1,7.2},new EstimatedParameter[]{p[0],p[1],p[2],p[3]},32.0),new LinearMeasurement(new double[]{7.08,5.04,6.0,5.0},new EstimatedParameter[]{p[0],p[1],p[2],p[3]},23.0),new LinearMeasurement(new double[]{8.0,5.98,9.89,9.0},new EstimatedParameter[]{p[0],p[1],p[2],p[3]},33.0),new LinearMeasurement(new double[]{6.99,4.99,9.0,9.98},new EstimatedParameter[]{p[0],p[1],p[2],p[3]},31.0)});LevenbergMarquardtEstimator estimator2=new LevenbergMarquardtEstimator();estimator2.estimate(problem2);assertEquals(0,estimator2.getRMS(problem2),1.0e-10);assertEquals(-81.0,p[0].getEstimate(),1.0e-8);assertEquals(137.0,p[1].getEstimate(),1.0e-8);assertEquals(-34.0,p[2].getEstimate(),1.0e-8);assertEquals(22.0,p[3].getEstimate(),1.0e-8);}"
"org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testMoreEstimatedParametersSimple",0,"public void testMoreEstimatedParametersSimple()throws EstimationException {EstimatedParameter[]p={new EstimatedParameter(""p0"",7),new EstimatedParameter(""p1"",6),new EstimatedParameter(""p2"",5),new EstimatedParameter(""p3"",4)};LinearProblem problem=new LinearProblem(new LinearMeasurement[]{new LinearMeasurement(new double[]{3.0,2.0},new EstimatedParameter[]{p[0],p[1]},7.0),new LinearMeasurement(new double[]{1.0,-1.0,1.0},new EstimatedParameter[]{p[1],p[2],p[3]},3.0),new LinearMeasurement(new double[]{2.0,1.0},new EstimatedParameter[]{p[0],p[2]},5.0)});LevenbergMarquardtEstimator estimator=new LevenbergMarquardtEstimator();estimator.estimate(problem);assertEquals(0,estimator.getRMS(problem),1.0e-10);}"
"org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testMoreEstimatedParametersUnsorted",0,"public void testMoreEstimatedParametersUnsorted()throws EstimationException {EstimatedParameter[]p={new EstimatedParameter(""p0"",2),new EstimatedParameter(""p1"",2),new EstimatedParameter(""p2"",2),new EstimatedParameter(""p3"",2),new EstimatedParameter(""p4"",2),new EstimatedParameter(""p5"",2)};LinearProblem problem=new LinearProblem(new LinearMeasurement[]{new LinearMeasurement(new double[]{1.0,1.0},new EstimatedParameter[]{p[0],p[1]},3.0),new LinearMeasurement(new double[]{1.0,1.0,1.0},new EstimatedParameter[]{p[2],p[3],p[4]},12.0),new LinearMeasurement(new double[]{1.0,-1.0},new EstimatedParameter[]{p[4],p[5]},-1.0),new LinearMeasurement(new double[]{1.0,-1.0,1.0},new EstimatedParameter[]{p[3],p[2],p[5]},7.0),new LinearMeasurement(new double[]{1.0,-1.0},new EstimatedParameter[]{p[4],p[3]},1.0)});LevenbergMarquardtEstimator estimator=new LevenbergMarquardtEstimator();estimator.estimate(problem);assertEquals(0,estimator.getRMS(problem),1.0e-10);assertEquals(3.0,p[2].getEstimate(),1.0e-10);assertEquals(4.0,p[3].getEstimate(),1.0e-10);assertEquals(5.0,p[4].getEstimate(),1.0e-10);assertEquals(6.0,p[5].getEstimate(),1.0e-10);}"
"org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testRedundantEquations",0,"public void testRedundantEquations()throws EstimationException {EstimatedParameter[]p={new EstimatedParameter(""p0"",1),new EstimatedParameter(""p1"",1)};LinearProblem problem=new LinearProblem(new LinearMeasurement[]{new LinearMeasurement(new double[]{1.0,1.0},new EstimatedParameter[]{p[0],p[1]},3.0),new LinearMeasurement(new double[]{1.0,-1.0},new EstimatedParameter[]{p[0],p[1]},1.0),new LinearMeasurement(new double[]{1.0,3.0},new EstimatedParameter[]{p[0],p[1]},5.0)});LevenbergMarquardtEstimator estimator=new LevenbergMarquardtEstimator();estimator.estimate(problem);assertEquals(0,estimator.getRMS(problem),1.0e-10);assertEquals(2.0,p[0].getEstimate(),1.0e-10);assertEquals(1.0,p[1].getEstimate(),1.0e-10);}"
"org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testInconsistentEquations",0,"public void testInconsistentEquations()throws EstimationException {EstimatedParameter[]p={new EstimatedParameter(""p0"",1),new EstimatedParameter(""p1"",1)};LinearProblem problem=new LinearProblem(new LinearMeasurement[]{new LinearMeasurement(new double[]{1.0,1.0},new EstimatedParameter[]{p[0],p[1]},3.0),new LinearMeasurement(new double[]{1.0,-1.0},new EstimatedParameter[]{p[0],p[1]},1.0),new LinearMeasurement(new double[]{1.0,3.0},new EstimatedParameter[]{p[0],p[1]},4.0)});LevenbergMarquardtEstimator estimator=new LevenbergMarquardtEstimator();estimator.estimate(problem);assertTrue(estimator.getRMS(problem)> 0.1);}"
"org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testControlParameters",0,"public void testControlParameters()throws EstimationException {Circle circle=new Circle(98.680,47.345);circle.addPoint(30.0,68.0);circle.addPoint(50.0,-6.0);circle.addPoint(110.0,-20.0);circle.addPoint(35.0,15.0);circle.addPoint(45.0,97.0);checkEstimate(circle,0.1,10,1.0e-14,1.0e-16,1.0e-10,false);checkEstimate(circle,0.1,10,1.0e-15,1.0e-17,1.0e-10,true);checkEstimate(circle,0.1,5,1.0e-15,1.0e-16,1.0e-10,true);circle.addPoint(300,-300);checkEstimate(circle,0.1,20,1.0e-18,1.0e-16,1.0e-10,true);}"
"org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testCircleFitting",0,"public void testCircleFitting()throws EstimationException {Circle circle=new Circle(98.680,47.345);circle.addPoint(30.0,68.0);circle.addPoint(50.0,-6.0);circle.addPoint(110.0,-20.0);circle.addPoint(35.0,15.0);circle.addPoint(45.0,97.0);LevenbergMarquardtEstimator estimator=new LevenbergMarquardtEstimator();estimator.estimate(circle);assertTrue(estimator.getCostEvaluations()< 10);assertTrue(estimator.getJacobianEvaluations()< 10);double rms=estimator.getRMS(circle);assertEquals(1.768262623567235,Math.sqrt(circle.getM())* rms,1.0e-10);assertEquals(69.96016176931406,circle.getRadius(),1.0e-10);assertEquals(96.07590211815305,circle.getX(),1.0e-10);assertEquals(48.13516790438953,circle.getY(),1.0e-10);double[][]cov=estimator.getCovariances(circle);assertEquals(1.839,cov[0][0],0.001);assertEquals(0.731,cov[0][1],0.001);assertEquals(cov[0][1],cov[1][0],1.0e-14);assertEquals(0.786,cov[1][1],0.001);double[]errors=estimator.guessParametersErrors(circle);assertEquals(1.384,errors[0],0.001);assertEquals(0.905,errors[1],0.001);double cx=circle.getX();double cy=circle.getY();double r=circle.getRadius();for (double d=0;d < 2 * Math.PI;d+=0.01){circle.addPoint(cx + r * Math.cos(d),cy + r * Math.sin(d));}estimator=new LevenbergMarquardtEstimator();estimator.estimate(circle);cov=estimator.getCovariances(circle);assertEquals(0.004,cov[0][0],0.001);assertEquals(6.40e-7,cov[0][1],1.0e-9);assertEquals(cov[0][1],cov[1][0],1.0e-14);assertEquals(0.003,cov[1][1],0.001);errors=estimator.guessParametersErrors(circle);assertEquals(0.004,errors[0],0.001);assertEquals(0.004,errors[1],0.001);}"
"org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testCircleFittingBadInit",0,"public void testCircleFittingBadInit()throws EstimationException {Circle circle=new Circle(-12,-12);double[][]points=new double[][]{{-0.312967,0.072366},{-0.339248,0.132965},{-0.379780,0.202724},{-0.390426,0.260487},{-0.361212,0.328325},{-0.346039,0.392619},{-0.280579,0.444306},{-0.216035,0.470009},{-0.149127,0.493832},{-0.075133,0.483271},{-0.007759,0.452680},{0.060071,0.410235},{0.103037,0.341076},{0.118438,0.273884},{0.131293,0.192201},{0.115869,0.129797},{0.072223,0.058396},{0.022884,0.000718},{-0.053355,-0.020405},{-0.123584,-0.032451},{-0.216248,-0.032862},{-0.278592,-0.005008},{-0.337655,0.056658},{-0.385899,0.112526},{-0.405517,0.186957},{-0.415374,0.262071},{-0.387482,0.343398},{-0.347322,0.397943},{-0.287623,0.458425},{-0.223502,0.475513},{-0.135352,0.478186},{-0.061221,0.483371},{0.003711,0.422737},{0.065054,0.375830},{0.108108,0.297099},{0.123882,0.222850},{0.117729,0.134382},{0.085195,0.056820},{0.029800,-0.019138},{-0.027520,-0.072374},{-0.102268,-0.091555},{-0.200299,-0.106578},{-0.292731,-0.091473},{-0.356288,-0.051108},{-0.420561,0.014926},{-0.471036,0.074716},{-0.488638,0.182508},{-0.485990,0.254068},{-0.463943,0.338438},{-0.406453,0.404704},{-0.334287,0.466119},{-0.254244,0.503188},{-0.161548,0.495769},{-0.075733,0.495560},{0.001375,0.434937},{0.082787,0.385806},{0.115490,0.323807},{0.141089,0.223450},{0.138693,0.131703},{0.126415,0.049174},{0.066518,-0.010217},{-0.005184,-0.070647},{-0.080985,-0.103635},{-0.177377,-0.116887},{-0.260628,-0.100258},{-0.335756,-0.056251},{-0.405195,-0.000895},{-0.444937,0.085456},{-0.484357,0.175597},{-0.472453,0.248681},{-0.438580,0.347463},{-0.402304,0.422428},{-0.326777,0.479438},{-0.247797,0.505581},{-0.152676,0.519380},{-0.071754,0.516264},{0.015942,0.472802},{0.076608,0.419077},{0.127673,0.330264},{0.159951,0.262150},{0.153530,0.172681},{0.140653,0.089229},{0.078666,0.024981},{0.023807,-0.037022},{-0.048837,-0.077056},{-0.127729,-0.075338},{-0.221271,-0.067526}};for (int i=0;i < points.length;++i){circle.addPoint(points[i][0],points[i][1]);}LevenbergMarquardtEstimator estimator=new LevenbergMarquardtEstimator();estimator.estimate(circle);assertTrue(estimator.getCostEvaluations()< 15);assertTrue(estimator.getJacobianEvaluations()< 10);assertEquals(0.030184491196225207,estimator.getRMS(circle),1.0e-9);assertEquals(0.2922350065939634,circle.getRadius(),1.0e-9);assertEquals(-0.15173845023862165,circle.getX(),1.0e-8);assertEquals(0.20750021499570379,circle.getY(),1.0e-8);}"
"org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testMath199",0,"public void testMath199(){try {QuadraticProblem problem=new QuadraticProblem();problem.addPoint(0,-3.182591015485607,0.0);problem.addPoint(1,-2.5581184967730577,4.4E-323);problem.addPoint(2,-2.1488478161387325,1.0);problem.addPoint(3,-1.9122489313410047,4.4E-323);problem.addPoint(4,1.7785661310051026,0.0);new LevenbergMarquardtEstimator().estimate(problem);fail(""an exception should have been thrown"");}catch(EstimationException ee){}}"
"org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewBisectionSolverValid",0,"public void testNewBisectionSolverValid(){UnivariateRealSolver solver=factory.newBisectionSolver();assertNotNull(solver);assertTrue(solver instanceof BisectionSolver);}"
"org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewNewtonSolverValid",0,"public void testNewNewtonSolverValid(){UnivariateRealSolver solver=factory.newNewtonSolver();assertNotNull(solver);assertTrue(solver instanceof NewtonSolver);}"
"org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewBrentSolverValid",0,"public void testNewBrentSolverValid(){UnivariateRealSolver solver=factory.newBrentSolver();assertNotNull(solver);assertTrue(solver instanceof BrentSolver);}"
"org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewSecantSolverValid",0,"public void testNewSecantSolverValid(){UnivariateRealSolver solver=factory.newSecantSolver();assertNotNull(solver);assertTrue(solver instanceof SecantSolver);}"
"org.apache.commons.math.ArgumentOutsideDomainExceptionTest.testConstructor",0,"public void testConstructor(){ArgumentOutsideDomainException ex=new ArgumentOutsideDomainException(Math.PI,10.0,20.0);assertNull(ex.getCause());assertNotNull(ex.getMessage());assertTrue(ex.getMessage().indexOf(""3.14"")> 0);assertEquals(Math.PI,ex.getArgument(),0);assertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));}"
"org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.testWrongDerivative",0,"public void testWrongDerivative(){try {HighamHall54Integrator integrator=new HighamHall54Integrator(0.0,1.0,1.0e-10,1.0e-10);FirstOrderDifferentialEquations equations=new FirstOrderDifferentialEquations(){private static final long serialVersionUID=-1157081786301178032L;public void computeDerivatives(double t,double[]y,double[]dot)throws DerivativeException {if (t < -0.5){throw new DerivativeException(""{0}"",new String[]{""oops""});}else {throw new DerivativeException(new RuntimeException(""oops""));}}public int getDimension(){return 1;}};try {integrator.integrate(equations,-1.0,new double[1],0.0,new double[1]);fail(""an exception should have been thrown"");}catch(DerivativeException de){}try {integrator.integrate(equations,0.0,new double[1],1.0,new double[1]);fail(""an exception should have been thrown"");}catch(DerivativeException de){}}catch(Exception e){fail(""wrong exception caught: "" + e.getMessage());}}"
"org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.testMinStep",0,"public void testMinStep()throws DerivativeException,IntegratorException {try {TestProblem1 pb=new TestProblem1();double minStep=0.1 * (pb.getFinalTime()- pb.getInitialTime());double maxStep=pb.getFinalTime()- pb.getInitialTime();double[]vecAbsoluteTolerance={1.0e-15,1.0e-16};double[]vecRelativeTolerance={1.0e-15,1.0e-16};FirstOrderIntegrator integ=new HighamHall54Integrator(minStep,maxStep,vecAbsoluteTolerance,vecRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);fail(""an exception should have been thrown"");}catch(DerivativeException de){fail(""wrong exception caught"");}catch(IntegratorException ie){}}"
"org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.testIncreasingTolerance",0,"public void testIncreasingTolerance()throws DerivativeException,IntegratorException {int previousCalls=Integer.MAX_VALUE;for (int i=-12;i < -2;++i){TestProblem1 pb=new TestProblem1();double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=Math.pow(10.0,i);double scalRelativeTolerance=0.01 * scalAbsoluteTolerance;FirstOrderIntegrator integ=new HighamHall54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.getMaximalValueError()< (1.3 * scalAbsoluteTolerance));assertEquals(0,handler.getMaximalTimeError(),1.0e-12);int calls=pb.getCalls();assertTrue(calls <= previousCalls);previousCalls=calls;}}"
"org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.testBackward",0,"public void testBackward()throws DerivativeException,IntegratorException {TestProblem5 pb=new TestProblem5();double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=0.01 * scalAbsoluteTolerance;FirstOrderIntegrator integ=new HighamHall54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.getLastError()< 5.0e-7);assertTrue(handler.getMaximalValueError()< 5.0e-7);assertEquals(0,handler.getMaximalTimeError(),1.0e-12);assertEquals(""Higham-Hall 5(4)"",integ.getName());}"
"org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.testEvents",0,"public void testEvents()throws DerivativeException,IntegratorException {TestProblem4 pb=new TestProblem4();double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=0.01 * scalAbsoluteTolerance;FirstOrderIntegrator integ=new HighamHall54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);EventHandler[]functions=pb.getEventsHandlers();for (int l=0;l < functions.length;++l){integ.addEventHandler(functions[l],Double.POSITIVE_INFINITY,1.0e-8 * maxStep,1000);}assertEquals(functions.length,integ.getEventHandlers().size());integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.getMaximalValueError()< 1.0e-7);assertEquals(0,handler.getMaximalTimeError(),1.0e-12);assertEquals(12.0,handler.getLastTime(),1.0e-8 * maxStep);integ.clearEventHandlers();assertEquals(0,integ.getEventHandlers().size());}"
"org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.testEventsErrors",0,"public void testEventsErrors()throws DerivativeException,IntegratorException {final TestProblem1 pb=new TestProblem1();double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=0.01 * scalAbsoluteTolerance;FirstOrderIntegrator integ=new HighamHall54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.addEventHandler(new EventHandler(){public int eventOccurred(double t,double[]y){return EventHandler.CONTINUE;}public double g(double t,double[]y)throws EventException {double middle=(pb.getInitialTime()+ pb.getFinalTime())/ 2;double offset=t - middle;if (offset > 0){throw new EventException(""Evaluation failed for argument = {0}"",new Object[]{Double.valueOf(t)});}return offset;}public void resetState(double t,double[]y){}private static final long serialVersionUID=935652725339916361L;},Double.POSITIVE_INFINITY,1.0e-8 * maxStep,1000);try {integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);fail(""an exception should have been thrown"");}catch(IntegratorException ie){}catch(Exception e){fail(""wrong exception type caught"");}}"
"org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.testEventsNoConvergence",0,"public void testEventsNoConvergence()throws DerivativeException,IntegratorException {final TestProblem1 pb=new TestProblem1();double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=0.01 * scalAbsoluteTolerance;FirstOrderIntegrator integ=new HighamHall54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.addEventHandler(new EventHandler(){public int eventOccurred(double t,double[]y){return EventHandler.CONTINUE;}public double g(double t,double[]y){double middle=(pb.getInitialTime()+ pb.getFinalTime())/ 2;double offset=t - middle;return (offset > 0)? (offset + 0.5): (offset - 0.5);}public void resetState(double t,double[]y){}private static final long serialVersionUID=935652725339916361L;},Double.POSITIVE_INFINITY,1.0e-8 * maxStep,3);try {integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);fail(""an exception should have been thrown"");}catch(IntegratorException ie){assertTrue(ie.getCause()!= null);assertTrue(ie.getCause()instanceof ConvergenceException);}catch(Exception e){fail(""wrong exception type caught"");}}"
"org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.testSanityChecks",0,"public void testSanityChecks(){try {final TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();try {FirstOrderIntegrator integ=new HighamHall54Integrator(minStep,maxStep,new double[4],new double[4]);integ.integrate(pb,pb.getInitialTime(),new double[6],pb.getFinalTime(),new double[pb.getDimension()]);fail(""an exception should have been thrown"");}catch(IntegratorException ie){}try {FirstOrderIntegrator integ=new HighamHall54Integrator(minStep,maxStep,new double[4],new double[4]);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[6]);fail(""an exception should have been thrown"");}catch(IntegratorException ie){}try {FirstOrderIntegrator integ=new HighamHall54Integrator(minStep,maxStep,new double[2],new double[4]);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);fail(""an exception should have been thrown"");}catch(IntegratorException ie){}try {FirstOrderIntegrator integ=new HighamHall54Integrator(minStep,maxStep,new double[4],new double[2]);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);fail(""an exception should have been thrown"");}catch(IntegratorException ie){}try {FirstOrderIntegrator integ=new HighamHall54Integrator(minStep,maxStep,new double[4],new double[4]);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getInitialTime(),new double[pb.getDimension()]);fail(""an exception should have been thrown"");}catch(IntegratorException ie){}}catch(Exception e){fail(""wrong exception caught: "" + e.getMessage());}}"
"org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.testKepler",0,"public void testKepler()throws DerivativeException,IntegratorException {final TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double[]vecAbsoluteTolerance={1.0e-8,1.0e-8,1.0e-10,1.0e-10};double[]vecRelativeTolerance={1.0e-10,1.0e-10,1.0e-8,1.0e-8};FirstOrderIntegrator integ=new HighamHall54Integrator(minStep,maxStep,vecAbsoluteTolerance,vecRelativeTolerance);integ.addStepHandler(new KeplerHandler(pb));integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertEquals(""Higham-Hall 5(4)"",integ.getName());}"
"org.apache.commons.math.fraction.FractionTest.testConstructor",0,"public void testConstructor(){assertFraction(0,1,new Fraction(0,1));assertFraction(0,1,new Fraction(0,2));assertFraction(0,1,new Fraction(0,-1));assertFraction(1,2,new Fraction(1,2));assertFraction(1,2,new Fraction(2,4));assertFraction(-1,2,new Fraction(-1,2));assertFraction(-1,2,new Fraction(1,-2));assertFraction(-1,2,new Fraction(-2,4));assertFraction(-1,2,new Fraction(2,-4));try {new Fraction(Integer.MIN_VALUE,-1);fail();}catch(ArithmeticException ex){}try {new Fraction(1,Integer.MIN_VALUE);fail();}catch(ArithmeticException ex){}try {assertFraction(0,1,new Fraction(0.00000000000001));assertFraction(2,5,new Fraction(0.40000000000001));assertFraction(15,1,new Fraction(15.0000000000001));}catch(ConvergenceException ex){fail(ex.getMessage());}}"
"org.apache.commons.math.fraction.FractionTest.testGoldenRatio",0,"public void testGoldenRatio(){try {new Fraction((1 + Math.sqrt(5))/ 2,1.0e-12,25);fail(""an exception should have been thrown"");}catch(ConvergenceException ce){}catch(Exception e){fail(""wrong exception caught"");}}"
"org.apache.commons.math.fraction.FractionTest.testDoubleConstructor",0,"public void testDoubleConstructor()throws ConvergenceException {assertFraction(1,2,new Fraction((double)1 / (double)2));assertFraction(1,3,new Fraction((double)1 / (double)3));assertFraction(2,3,new Fraction((double)2 / (double)3));assertFraction(1,4,new Fraction((double)1 / (double)4));assertFraction(3,4,new Fraction((double)3 / (double)4));assertFraction(1,5,new Fraction((double)1 / (double)5));assertFraction(2,5,new Fraction((double)2 / (double)5));assertFraction(3,5,new Fraction((double)3 / (double)5));assertFraction(4,5,new Fraction((double)4 / (double)5));assertFraction(1,6,new Fraction((double)1 / (double)6));assertFraction(5,6,new Fraction((double)5 / (double)6));assertFraction(1,7,new Fraction((double)1 / (double)7));assertFraction(2,7,new Fraction((double)2 / (double)7));assertFraction(3,7,new Fraction((double)3 / (double)7));assertFraction(4,7,new Fraction((double)4 / (double)7));assertFraction(5,7,new Fraction((double)5 / (double)7));assertFraction(6,7,new Fraction((double)6 / (double)7));assertFraction(1,8,new Fraction((double)1 / (double)8));assertFraction(3,8,new Fraction((double)3 / (double)8));assertFraction(5,8,new Fraction((double)5 / (double)8));assertFraction(7,8,new Fraction((double)7 / (double)8));assertFraction(1,9,new Fraction((double)1 / (double)9));assertFraction(2,9,new Fraction((double)2 / (double)9));assertFraction(4,9,new Fraction((double)4 / (double)9));assertFraction(5,9,new Fraction((double)5 / (double)9));assertFraction(7,9,new Fraction((double)7 / (double)9));assertFraction(8,9,new Fraction((double)8 / (double)9));assertFraction(1,10,new Fraction((double)1 / (double)10));assertFraction(3,10,new Fraction((double)3 / (double)10));assertFraction(7,10,new Fraction((double)7 / (double)10));assertFraction(9,10,new Fraction((double)9 / (double)10));assertFraction(1,11,new Fraction((double)1 / (double)11));assertFraction(2,11,new Fraction((double)2 / (double)11));assertFraction(3,11,new Fraction((double)3 / (double)11));assertFraction(4,11,new Fraction((double)4 / (double)11));assertFraction(5,11,new Fraction((double)5 / (double)11));assertFraction(6,11,new Fraction((double)6 / (double)11));assertFraction(7,11,new Fraction((double)7 / (double)11));assertFraction(8,11,new Fraction((double)8 / (double)11));assertFraction(9,11,new Fraction((double)9 / (double)11));assertFraction(10,11,new Fraction((double)10 / (double)11));}"
"org.apache.commons.math.fraction.FractionTest.testDigitLimitConstructor",0,"public void testDigitLimitConstructor()throws ConvergenceException {assertFraction(2,5,new Fraction(0.4,9));assertFraction(2,5,new Fraction(0.4,99));assertFraction(2,5,new Fraction(0.4,999));assertFraction(3,5,new Fraction(0.6152,9));assertFraction(8,13,new Fraction(0.6152,99));assertFraction(510,829,new Fraction(0.6152,999));assertFraction(769,1250,new Fraction(0.6152,9999));}"
"org.apache.commons.math.fraction.FractionTest.testIntegerOverflow",0,"public void testIntegerOverflow(){checkIntegerOverflow(0.75000000001455192);checkIntegerOverflow(1.0e10);}"
"org.apache.commons.math.fraction.FractionTest.testEpsilonLimitConstructor",0,"public void testEpsilonLimitConstructor()throws ConvergenceException {assertFraction(2,5,new Fraction(0.4,1.0e-5,100));assertFraction(3,5,new Fraction(0.6152,0.02,100));assertFraction(8,13,new Fraction(0.6152,1.0e-3,100));assertFraction(251,408,new Fraction(0.6152,1.0e-4,100));assertFraction(251,408,new Fraction(0.6152,1.0e-5,100));assertFraction(510,829,new Fraction(0.6152,1.0e-6,100));assertFraction(769,1250,new Fraction(0.6152,1.0e-7,100));}"
"org.apache.commons.math.fraction.FractionTest.testCompareTo",0,"public void testCompareTo(){Fraction first=new Fraction(1,2);Fraction second=new Fraction(1,3);Fraction third=new Fraction(1,2);assertEquals(0,first.compareTo(first));assertEquals(0,first.compareTo(third));assertEquals(1,first.compareTo(second));assertEquals(-1,second.compareTo(first));}"
"org.apache.commons.math.fraction.FractionTest.testDoubleValue",0,"public void testDoubleValue(){Fraction first=new Fraction(1,2);Fraction second=new Fraction(1,3);assertEquals(0.5,first.doubleValue(),0.0);assertEquals(1.0 / 3.0,second.doubleValue(),0.0);}"
"org.apache.commons.math.fraction.FractionTest.testFloatValue",0,"public void testFloatValue(){Fraction first=new Fraction(1,2);Fraction second=new Fraction(1,3);assertEquals(0.5f,first.floatValue(),0.0f);assertEquals((float)(1.0 / 3.0),second.floatValue(),0.0f);}"
"org.apache.commons.math.fraction.FractionTest.testIntValue",0,"public void testIntValue(){Fraction first=new Fraction(1,2);Fraction second=new Fraction(3,2);assertEquals(0,first.intValue());assertEquals(1,second.intValue());}"
"org.apache.commons.math.fraction.FractionTest.testLongValue",0,"public void testLongValue(){Fraction first=new Fraction(1,2);Fraction second=new Fraction(3,2);assertEquals(0L,first.longValue());assertEquals(1L,second.longValue());}"
"org.apache.commons.math.fraction.FractionTest.testConstructorDouble",0,"public void testConstructorDouble(){try {assertFraction(1,2,new Fraction(0.5));assertFraction(1,3,new Fraction(1.0 / 3.0));assertFraction(17,100,new Fraction(17.0 / 100.0));assertFraction(317,100,new Fraction(317.0 / 100.0));assertFraction(-1,2,new Fraction(-0.5));assertFraction(-1,3,new Fraction(-1.0 / 3.0));assertFraction(-17,100,new Fraction(17.0 / -100.0));assertFraction(-317,100,new Fraction(-317.0 / 100.0));}catch(ConvergenceException ex){fail(ex.getMessage());}}"
"org.apache.commons.math.fraction.FractionTest.testAbs",0,"public void testAbs(){Fraction a=new Fraction(10,21);Fraction b=new Fraction(-10,21);Fraction c=new Fraction(10,-21);assertFraction(10,21,a.abs());assertFraction(10,21,b.abs());assertFraction(10,21,c.abs());}"
"org.apache.commons.math.fraction.FractionTest.testReciprocal",0,"public void testReciprocal(){Fraction f=null;f=new Fraction(50,75);f=f.reciprocal();assertEquals(3,f.getNumerator());assertEquals(2,f.getDenominator());f=new Fraction(4,3);f=f.reciprocal();assertEquals(3,f.getNumerator());assertEquals(4,f.getDenominator());f=new Fraction(-15,47);f=f.reciprocal();assertEquals(-47,f.getNumerator());assertEquals(15,f.getDenominator());f=new Fraction(0,3);try {f=f.reciprocal();fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}f=new Fraction(Integer.MAX_VALUE,1);f=f.reciprocal();assertEquals(1,f.getNumerator());assertEquals(Integer.MAX_VALUE,f.getDenominator());}"
"org.apache.commons.math.fraction.FractionTest.testNegate",0,"public void testNegate(){Fraction f=null;f=new Fraction(50,75);f=f.negate();assertEquals(-2,f.getNumerator());assertEquals(3,f.getDenominator());f=new Fraction(-50,75);f=f.negate();assertEquals(2,f.getNumerator());assertEquals(3,f.getDenominator());f=new Fraction(Integer.MAX_VALUE - 1,Integer.MAX_VALUE);f=f.negate();assertEquals(Integer.MIN_VALUE + 2,f.getNumerator());assertEquals(Integer.MAX_VALUE,f.getDenominator());f=new Fraction(Integer.MIN_VALUE,1);try {f=f.negate();fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}}"
"org.apache.commons.math.fraction.FractionTest.testAdd",0,"public void testAdd(){Fraction a=new Fraction(1,2);Fraction b=new Fraction(2,3);assertFraction(1,1,a.add(a));assertFraction(7,6,a.add(b));assertFraction(7,6,b.add(a));assertFraction(4,3,b.add(b));Fraction f1=new Fraction(Integer.MAX_VALUE - 1,1);Fraction f2=Fraction.ONE;Fraction f=f1.add(f2);assertEquals(Integer.MAX_VALUE,f.getNumerator());assertEquals(1,f.getDenominator());f1=new Fraction(-1,13 * 13 * 2* 2);f2=new Fraction(-2,13 * 17 * 2);f=f1.add(f2);assertEquals(13 * 13 * 17* 2* 2,f.getDenominator());assertEquals(-17 - 2 * 13 * 2,f.getNumerator());try {f.add(null);fail(""expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}f1=new Fraction(1,32768 * 3);f2=new Fraction(1,59049);f=f1.add(f2);assertEquals(52451,f.getNumerator());assertEquals(1934917632,f.getDenominator());f1=new Fraction(Integer.MIN_VALUE,3);f2=new Fraction(1,3);f=f1.add(f2);assertEquals(Integer.MIN_VALUE + 1,f.getNumerator());assertEquals(3,f.getDenominator());f1=new Fraction(Integer.MAX_VALUE - 1,1);f2=Fraction.ONE;f=f1.add(f2);assertEquals(Integer.MAX_VALUE,f.getNumerator());assertEquals(1,f.getDenominator());try {f=f.add(Fraction.ONE);fail(""expecting ArithmeticException but got: "" + f.toString());}catch(ArithmeticException ex){}f1=new Fraction(Integer.MIN_VALUE,5);f2=new Fraction(-1,5);try {f=f1.add(f2);fail(""expecting ArithmeticException but got: "" + f.toString());}catch(ArithmeticException ex){}try {f=new Fraction(-Integer.MAX_VALUE,1);f=f.add(f);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}try {f=new Fraction(-Integer.MAX_VALUE,1);f=f.add(f);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}f1=new Fraction(3,327680);f2=new Fraction(2,59049);try {f=f1.add(f2);fail(""expecting ArithmeticException but got: "" + f.toString());}catch(ArithmeticException ex){}}"
"org.apache.commons.math.fraction.FractionTest.testDivide",0,"public void testDivide(){Fraction a=new Fraction(1,2);Fraction b=new Fraction(2,3);assertFraction(1,1,a.divide(a));assertFraction(3,4,a.divide(b));assertFraction(4,3,b.divide(a));assertFraction(1,1,b.divide(b));Fraction f1=new Fraction(3,5);Fraction f2=Fraction.ZERO;try {f1.divide(f2);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}f1=new Fraction(0,5);f2=new Fraction(2,7);Fraction f=f1.divide(f2);assertSame(Fraction.ZERO,f);f1=new Fraction(2,7);f2=Fraction.ONE;f=f1.divide(f2);assertEquals(2,f.getNumerator());assertEquals(7,f.getDenominator());f1=new Fraction(1,Integer.MAX_VALUE);f=f1.divide(f1);assertEquals(1,f.getNumerator());assertEquals(1,f.getDenominator());f1=new Fraction(Integer.MIN_VALUE,Integer.MAX_VALUE);f2=new Fraction(1,Integer.MAX_VALUE);f=f1.divide(f2);assertEquals(Integer.MIN_VALUE,f.getNumerator());assertEquals(1,f.getDenominator());try {f.divide(null);fail(""IllegalArgumentException"");}catch(IllegalArgumentException ex){}try {f1=new Fraction(1,Integer.MAX_VALUE);f=f1.divide(f1.reciprocal());fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}try {f1=new Fraction(1,-Integer.MAX_VALUE);f=f1.divide(f1.reciprocal());fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}}"
"org.apache.commons.math.fraction.FractionTest.testMultiply",0,"public void testMultiply(){Fraction a=new Fraction(1,2);Fraction b=new Fraction(2,3);assertFraction(1,4,a.multiply(a));assertFraction(1,3,a.multiply(b));assertFraction(1,3,b.multiply(a));assertFraction(4,9,b.multiply(b));Fraction f1=new Fraction(Integer.MAX_VALUE,1);Fraction f2=new Fraction(Integer.MIN_VALUE,Integer.MAX_VALUE);Fraction f=f1.multiply(f2);assertEquals(Integer.MIN_VALUE,f.getNumerator());assertEquals(1,f.getDenominator());try {f.multiply(null);fail(""expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.fraction.FractionTest.testSubtract",0,"public void testSubtract(){Fraction a=new Fraction(1,2);Fraction b=new Fraction(2,3);assertFraction(0,1,a.subtract(a));assertFraction(-1,6,a.subtract(b));assertFraction(1,6,b.subtract(a));assertFraction(0,1,b.subtract(b));Fraction f=new Fraction(1,1);try {f.subtract(null);fail(""expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}Fraction f1=new Fraction(1,32768 * 3);Fraction f2=new Fraction(1,59049);f=f1.subtract(f2);assertEquals(-13085,f.getNumerator());assertEquals(1934917632,f.getDenominator());f1=new Fraction(Integer.MIN_VALUE,3);f2=new Fraction(1,3).negate();f=f1.subtract(f2);assertEquals(Integer.MIN_VALUE + 1,f.getNumerator());assertEquals(3,f.getDenominator());f1=new Fraction(Integer.MAX_VALUE,1);f2=Fraction.ONE;f=f1.subtract(f2);assertEquals(Integer.MAX_VALUE - 1,f.getNumerator());assertEquals(1,f.getDenominator());try {f1=new Fraction(1,Integer.MAX_VALUE);f2=new Fraction(1,Integer.MAX_VALUE - 1);f=f1.subtract(f2);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}f1=new Fraction(Integer.MIN_VALUE,5);f2=new Fraction(1,5);try {f=f1.subtract(f2);fail(""expecting ArithmeticException but got: "" + f.toString());}catch(ArithmeticException ex){}try {f=new Fraction(Integer.MIN_VALUE,1);f=f.subtract(Fraction.ONE);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}try {f=new Fraction(Integer.MAX_VALUE,1);f=f.subtract(Fraction.ONE.negate());fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}f1=new Fraction(3,327680);f2=new Fraction(2,59049);try {f=f1.subtract(f2);fail(""expecting ArithmeticException but got: "" + f.toString());}catch(ArithmeticException ex){}}"
"org.apache.commons.math.fraction.FractionTest.testEqualsAndHashCode",0,"public void testEqualsAndHashCode(){Fraction zero=new Fraction(0,1);Fraction nullFraction=null;assertTrue(zero.equals(zero));assertFalse(zero.equals(nullFraction));assertFalse(zero.equals(Double.valueOf(0)));Fraction zero2=new Fraction(0,2);assertTrue(zero.equals(zero2));assertEquals(zero.hashCode(),zero2.hashCode());Fraction one=new Fraction(1,1);assertFalse((one.equals(zero)|| zero.equals(one)));}"
"org.apache.commons.math.fraction.FractionTest.testGetReducedFraction",0,"public void testGetReducedFraction(){Fraction threeFourths=new Fraction(3,4);assertTrue(threeFourths.equals(Fraction.getReducedFraction(6,8)));assertTrue(Fraction.ZERO.equals(Fraction.getReducedFraction(0,-1)));try {Fraction.getReducedFraction(1,0);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}assertEquals(Fraction.getReducedFraction(2,Integer.MIN_VALUE).getNumerator(),-1);assertEquals(Fraction.getReducedFraction(1,-1).getNumerator(),-1);}"
"org.apache.commons.math.stat.descriptive.summary.SumTest.testSpecialValues",0,"public void testSpecialValues(){Sum sum=new Sum();assertTrue(Double.isNaN(sum.getResult()));sum.increment(1);assertEquals(1,sum.getResult(),0);sum.increment(Double.POSITIVE_INFINITY);assertEquals(Double.POSITIVE_INFINITY,sum.getResult(),0);sum.increment(Double.NEGATIVE_INFINITY);assertTrue(Double.isNaN(sum.getResult()));sum.increment(1);assertTrue(Double.isNaN(sum.getResult()));}"
"org.apache.commons.math.stat.descriptive.summary.SumTest.testWeightedConsistency",0,"public void testWeightedConsistency(){}"
"org.apache.commons.math.linear.InvalidMatrixExceptionTest.testConstructorMessage",0,"/** */public void testConstructorMessage(){String msg=""message"";InvalidMatrixException ex=new InvalidMatrixException(msg,null);assertEquals(msg,ex.getMessage());}"
"org.apache.commons.math.special.BetaTest.testRegularizedBetaNanPositivePositive",0,"public void testRegularizedBetaNanPositivePositive(){testRegularizedBeta(Double.NaN,Double.NaN,1.0,1.0);}"
"org.apache.commons.math.special.BetaTest.testRegularizedBetaPositiveNanPositive",0,"public void testRegularizedBetaPositiveNanPositive(){testRegularizedBeta(Double.NaN,0.5,Double.NaN,1.0);}"
"org.apache.commons.math.special.BetaTest.testRegularizedBetaPositivePositiveNan",0,"public void testRegularizedBetaPositivePositiveNan(){testRegularizedBeta(Double.NaN,0.5,1.0,Double.NaN);}"
"org.apache.commons.math.special.BetaTest.testRegularizedBetaNegativePositivePositive",0,"public void testRegularizedBetaNegativePositivePositive(){testRegularizedBeta(Double.NaN,-0.5,1.0,2.0);}"
"org.apache.commons.math.special.BetaTest.testRegularizedBetaPositiveNegativePositive",0,"public void testRegularizedBetaPositiveNegativePositive(){testRegularizedBeta(Double.NaN,0.5,-1.0,2.0);}"
"org.apache.commons.math.special.BetaTest.testRegularizedBetaPositivePositiveNegative",0,"public void testRegularizedBetaPositivePositiveNegative(){testRegularizedBeta(Double.NaN,0.5,1.0,-2.0);}"
"org.apache.commons.math.special.BetaTest.testRegularizedBetaZeroPositivePositive",0,"public void testRegularizedBetaZeroPositivePositive(){testRegularizedBeta(0.0,0.0,1.0,2.0);}"
"org.apache.commons.math.special.BetaTest.testRegularizedBetaPositiveZeroPositive",0,"public void testRegularizedBetaPositiveZeroPositive(){testRegularizedBeta(Double.NaN,0.5,0.0,2.0);}"
"org.apache.commons.math.special.BetaTest.testRegularizedBetaPositivePositiveZero",0,"public void testRegularizedBetaPositivePositiveZero(){testRegularizedBeta(Double.NaN,0.5,1.0,0.0);}"
"org.apache.commons.math.special.BetaTest.testRegularizedBetaPositivePositivePositive",0,"public void testRegularizedBetaPositivePositivePositive(){testRegularizedBeta(0.75,0.5,1.0,2.0);}"
"org.apache.commons.math.special.BetaTest.testLogBetaNanPositive",0,"public void testLogBetaNanPositive(){testLogBeta(Double.NaN,Double.NaN,2.0);}"
"org.apache.commons.math.special.BetaTest.testLogBetaPositiveNan",0,"public void testLogBetaPositiveNan(){testLogBeta(Double.NaN,1.0,Double.NaN);}"
"org.apache.commons.math.special.BetaTest.testLogBetaNegativePositive",0,"public void testLogBetaNegativePositive(){testLogBeta(Double.NaN,-1.0,2.0);}"
"org.apache.commons.math.special.BetaTest.testLogBetaPositiveNegative",0,"public void testLogBetaPositiveNegative(){testLogBeta(Double.NaN,1.0,-2.0);}"
"org.apache.commons.math.special.BetaTest.testLogBetaZeroPositive",0,"public void testLogBetaZeroPositive(){testLogBeta(Double.NaN,0.0,2.0);}"
"org.apache.commons.math.special.BetaTest.testLogBetaPositiveZero",0,"public void testLogBetaPositiveZero(){testLogBeta(Double.NaN,1.0,0.0);}"
"org.apache.commons.math.special.BetaTest.testLogBetaPositivePositive",0,"public void testLogBetaPositivePositive(){testLogBeta(-0.693147180559945,1.0,2.0);}"
"org.apache.commons.math.stat.inference.OneWayAnovaTest.testAnovaFValue",0,"public void testAnovaFValue()throws Exception {List<double[]> threeClasses=new ArrayList<double[]>();threeClasses.add(classA);threeClasses.add(classB);threeClasses.add(classC);assertEquals(""ANOVA F-value"",24.67361709460624,testStatistic.anovaFValue(threeClasses),1E-12);List<double[]> twoClasses=new ArrayList<double[]>();twoClasses.add(classA);twoClasses.add(classB);assertEquals(""ANOVA F-value"",0.0150579150579,testStatistic.anovaFValue(twoClasses),1E-12);List<double[]> emptyContents=new ArrayList<double[]>();emptyContents.add(emptyArray);emptyContents.add(classC);try {testStatistic.anovaFValue(emptyContents);fail(""empty array for key classX,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}List<double[]> tooFew=new ArrayList<double[]>();tooFew.add(classA);try {testStatistic.anovaFValue(tooFew);fail(""less than two classes,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.stat.inference.OneWayAnovaTest.testAnovaPValue",0,"public void testAnovaPValue()throws Exception {List<double[]> threeClasses=new ArrayList<double[]>();threeClasses.add(classA);threeClasses.add(classB);threeClasses.add(classC);assertEquals(""ANOVA P-value"",6.959446E-06,testStatistic.anovaPValue(threeClasses),1E-12);List<double[]> twoClasses=new ArrayList<double[]>();twoClasses.add(classA);twoClasses.add(classB);assertEquals(""ANOVA P-value"",0.904212960464,testStatistic.anovaPValue(twoClasses),1E-12);}"
"org.apache.commons.math.stat.inference.OneWayAnovaTest.testAnovaTest",0,"public void testAnovaTest()throws Exception {List<double[]> threeClasses=new ArrayList<double[]>();threeClasses.add(classA);threeClasses.add(classB);threeClasses.add(classC);assertTrue(""ANOVA Test P<0.01"",testStatistic.anovaTest(threeClasses,0.01));List<double[]> twoClasses=new ArrayList<double[]>();twoClasses.add(classA);twoClasses.add(classB);assertFalse(""ANOVA Test P>0.01"",testStatistic.anovaTest(twoClasses,0.01));}"
"org.apache.commons.math.linear.QRDecompositionImplTest.testDimensions",0,"/** * test dimensions */public void testDimensions(){checkDimension(MatrixUtils.createRealMatrix(testData3x3NonSingular));checkDimension(MatrixUtils.createRealMatrix(testData4x3));checkDimension(MatrixUtils.createRealMatrix(testData3x4));Random r=new Random(643895747384642l);int p=(5 * DenseRealMatrix.BLOCK_SIZE)/ 4;int q=(7 * DenseRealMatrix.BLOCK_SIZE)/ 4;checkDimension(createTestMatrix(r,p,q));checkDimension(createTestMatrix(r,q,p));}"
"org.apache.commons.math.linear.QRDecompositionImplTest.testAEqualQR",0,"/** * test A = QR */public void testAEqualQR(){checkAEqualQR(MatrixUtils.createRealMatrix(testData3x3NonSingular));checkAEqualQR(MatrixUtils.createRealMatrix(testData3x3Singular));checkAEqualQR(MatrixUtils.createRealMatrix(testData3x4));checkAEqualQR(MatrixUtils.createRealMatrix(testData4x3));Random r=new Random(643895747384642l);int p=(5 * DenseRealMatrix.BLOCK_SIZE)/ 4;int q=(7 * DenseRealMatrix.BLOCK_SIZE)/ 4;checkAEqualQR(createTestMatrix(r,p,q));checkAEqualQR(createTestMatrix(r,q,p));}"
"org.apache.commons.math.linear.QRDecompositionImplTest.testQOrthogonal",0,"/** * test the orthogonality of Q */public void testQOrthogonal(){checkQOrthogonal(MatrixUtils.createRealMatrix(testData3x3NonSingular));checkQOrthogonal(MatrixUtils.createRealMatrix(testData3x3Singular));checkQOrthogonal(MatrixUtils.createRealMatrix(testData3x4));checkQOrthogonal(MatrixUtils.createRealMatrix(testData4x3));Random r=new Random(643895747384642l);int p=(5 * DenseRealMatrix.BLOCK_SIZE)/ 4;int q=(7 * DenseRealMatrix.BLOCK_SIZE)/ 4;checkQOrthogonal(createTestMatrix(r,p,q));checkQOrthogonal(createTestMatrix(r,q,p));}"
"org.apache.commons.math.linear.QRDecompositionImplTest.testRUpperTriangular",0,"/** * test that R is upper triangular */public void testRUpperTriangular(){RealMatrix matrix=MatrixUtils.createRealMatrix(testData3x3NonSingular);checkUpperTriangular(new QRDecompositionImpl(matrix).getR());matrix=MatrixUtils.createRealMatrix(testData3x3Singular);checkUpperTriangular(new QRDecompositionImpl(matrix).getR());matrix=MatrixUtils.createRealMatrix(testData3x4);checkUpperTriangular(new QRDecompositionImpl(matrix).getR());matrix=MatrixUtils.createRealMatrix(testData4x3);checkUpperTriangular(new QRDecompositionImpl(matrix).getR());Random r=new Random(643895747384642l);int p=(5 * DenseRealMatrix.BLOCK_SIZE)/ 4;int q=(7 * DenseRealMatrix.BLOCK_SIZE)/ 4;matrix=createTestMatrix(r,p,q);checkUpperTriangular(new QRDecompositionImpl(matrix).getR());matrix=createTestMatrix(r,p,q);checkUpperTriangular(new QRDecompositionImpl(matrix).getR());}"
"org.apache.commons.math.linear.QRDecompositionImplTest.testHTrapezoidal",0,"/** * test that H is trapezoidal */public void testHTrapezoidal(){RealMatrix matrix=MatrixUtils.createRealMatrix(testData3x3NonSingular);checkTrapezoidal(new QRDecompositionImpl(matrix).getH());matrix=MatrixUtils.createRealMatrix(testData3x3Singular);checkTrapezoidal(new QRDecompositionImpl(matrix).getH());matrix=MatrixUtils.createRealMatrix(testData3x4);checkTrapezoidal(new QRDecompositionImpl(matrix).getH());matrix=MatrixUtils.createRealMatrix(testData4x3);checkTrapezoidal(new QRDecompositionImpl(matrix).getH());Random r=new Random(643895747384642l);int p=(5 * DenseRealMatrix.BLOCK_SIZE)/ 4;int q=(7 * DenseRealMatrix.BLOCK_SIZE)/ 4;matrix=createTestMatrix(r,p,q);checkTrapezoidal(new QRDecompositionImpl(matrix).getH());matrix=createTestMatrix(r,p,q);checkTrapezoidal(new QRDecompositionImpl(matrix).getH());}"
"org.apache.commons.math.linear.QRDecompositionImplTest.testMatricesValues",0,"/** * test matrices values */public void testMatricesValues(){QRDecomposition qr=new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x3NonSingular));RealMatrix qRef=MatrixUtils.createRealMatrix(new double[][]{{-12.0 / 14.0,69.0 / 175.0,-58.0 / 175.0},{-6.0 / 14.0,-158.0 / 175.0,6.0 / 175.0},{4.0 / 14.0,-30.0 / 175.0,-165.0 / 175.0}});RealMatrix rRef=MatrixUtils.createRealMatrix(new double[][]{{-14.0,-21.0,14.0},{0.0,-175.0,70.0},{0.0,0.0,35.0}});RealMatrix hRef=MatrixUtils.createRealMatrix(new double[][]{{26.0 / 14.0,0.0,0.0},{6.0 / 14.0,648.0 / 325.0,0.0},{-4.0 / 14.0,36.0 / 325.0,2.0}});RealMatrix q=qr.getQ();assertEquals(0,q.subtract(qRef).getNorm(),1.0e-13);RealMatrix qT=qr.getQT();assertEquals(0,qT.subtract(qRef.transpose()).getNorm(),1.0e-13);RealMatrix r=qr.getR();assertEquals(0,r.subtract(rRef).getNorm(),1.0e-13);RealMatrix h=qr.getH();assertEquals(0,h.subtract(hRef).getNorm(),1.0e-13);assertTrue(q == qr.getQ());assertTrue(r == qr.getR());assertTrue(h == qr.getH());}"
"org.apache.commons.math.analysis.LaguerreSolverTest.testDeprecated",0,"/** * Test deprecated APIs.*/@Deprecated public void testDeprecated()throws MathException {double min,max,expected,result,tolerance;double coefficients[]={-1.0,4.0};PolynomialFunction f=new PolynomialFunction(coefficients);UnivariateRealSolver solver=new LaguerreSolver(f);min=0.0;max=1.0;expected=0.25;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(min,max);assertEquals(expected,result,tolerance);}"
"org.apache.commons.math.analysis.LaguerreSolverTest.testLinearFunction",0,"/** * Test of solver for the linear function.*/public void testLinearFunction()throws MathException {double min,max,expected,result,tolerance;double coefficients[]={-1.0,4.0};PolynomialFunction f=new PolynomialFunction(coefficients);UnivariateRealSolver solver=new LaguerreSolver();min=0.0;max=1.0;expected=0.25;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(f,min,max);assertEquals(expected,result,tolerance);}"
"org.apache.commons.math.analysis.LaguerreSolverTest.testQuadraticFunction",0,"/** * Test of solver for the quadratic function.*/public void testQuadraticFunction()throws MathException {double min,max,expected,result,tolerance;double coefficients[]={-3.0,5.0,2.0};PolynomialFunction f=new PolynomialFunction(coefficients);UnivariateRealSolver solver=new LaguerreSolver();min=0.0;max=2.0;expected=0.5;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(f,min,max);assertEquals(expected,result,tolerance);min=-4.0;max=-1.0;expected=-3.0;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(f,min,max);assertEquals(expected,result,tolerance);}"
"org.apache.commons.math.analysis.LaguerreSolverTest.testQuinticFunction",0,"/** * Test of solver for the quintic function.*/public void testQuinticFunction()throws MathException {double min,max,expected,result,tolerance;double coefficients[]={-12.0,-1.0,1.0,-12.0,-1.0,1.0};PolynomialFunction f=new PolynomialFunction(coefficients);UnivariateRealSolver solver=new LaguerreSolver();min=-2.0;max=2.0;expected=-1.0;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(f,min,max);assertEquals(expected,result,tolerance);min=-5.0;max=-2.5;expected=-3.0;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(f,min,max);assertEquals(expected,result,tolerance);min=3.0;max=6.0;expected=4.0;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(f,min,max);assertEquals(expected,result,tolerance);}"
"org.apache.commons.math.analysis.LaguerreSolverTest.testQuinticFunction2",0,"/** * Test of solver for the quintic function using solveAll().*/public void testQuinticFunction2()throws MathException {double initial=0.0,tolerance;Complex expected,result[];double coefficients[]={4.0,0.0,1.0,4.0,0.0,1.0};LaguerreSolver solver=new LaguerreSolver();result=solver.solveAll(coefficients,initial);expected=new Complex(0.0,-2.0);tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected.abs()* solver.getRelativeAccuracy()));TestUtils.assertContains(result,expected,tolerance);expected=new Complex(0.0,2.0);tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected.abs()* solver.getRelativeAccuracy()));TestUtils.assertContains(result,expected,tolerance);expected=new Complex(0.5,0.5 * Math.sqrt(3.0));tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected.abs()* solver.getRelativeAccuracy()));TestUtils.assertContains(result,expected,tolerance);expected=new Complex(-1.0,0.0);tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected.abs()* solver.getRelativeAccuracy()));TestUtils.assertContains(result,expected,tolerance);expected=new Complex(0.5,-0.5 * Math.sqrt(3.0));tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected.abs()* solver.getRelativeAccuracy()));TestUtils.assertContains(result,expected,tolerance);}"
"org.apache.commons.math.analysis.LaguerreSolverTest.testParameters",0,"/** * Test of parameters for the solver.*/public void testParameters()throws Exception {double coefficients[]={-3.0,5.0,2.0};PolynomialFunction f=new PolynomialFunction(coefficients);UnivariateRealSolver solver=new LaguerreSolver();try {solver.solve(f,1,-1);fail(""Expecting IllegalArgumentException - bad interval"");}catch(IllegalArgumentException ex){}try {solver.solve(f,2,3);fail(""Expecting IllegalArgumentException - no bracketing"");}catch(IllegalArgumentException ex){}try {solver.solve(new SinFunction(),-1,1);fail(""Expecting IllegalArgumentException - bad function"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.testSetterInjection",0,"public void testSetterInjection()throws Exception {DescriptiveStatistics stats=new DescriptiveStatistics();stats.addValue(1);stats.addValue(3);assertEquals(2,stats.getMean(),1E-10);stats.setMeanImpl(new deepMean());assertEquals(42,stats.getMean(),1E-10);}"
"org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.testPercentileSetter",0,"public void testPercentileSetter()throws Exception {DescriptiveStatistics stats=new DescriptiveStatistics();stats.addValue(1);stats.addValue(2);stats.addValue(3);assertEquals(2,stats.getPercentile(50.0),1E-10);stats.setPercentileImpl(new goodPercentile());assertEquals(2,stats.getPercentile(50.0),1E-10);stats.setPercentileImpl(new subPercentile());assertEquals(10.0,stats.getPercentile(10.0),1E-10);try {stats.setPercentileImpl(new badPercentile());fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.testRemoval",0,"public void testRemoval(){final DescriptiveStatistics dstat=new DescriptiveStatistics();checkremoval(dstat,1,6.0,0.0,Double.NaN);checkremoval(dstat,3,5.0,3.0,4.5);checkremoval(dstat,6,3.5,2.5,3.0);checkremoval(dstat,9,3.5,2.5,3.0);checkremoval(dstat,DescriptiveStatistics.INFINITE_WINDOW,3.5,2.5,3.0);}"
"org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest.testDerivativesConsistency",0,"public void testDerivativesConsistency(){}"
"org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest.testSerialization",0,"public void testSerialization()throws DerivativeException,IntegratorException,IOException,ClassNotFoundException {TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double absTolerance=1.0e-8;double relTolerance=1.0e-8;GraggBulirschStoerIntegrator integ=new GraggBulirschStoerIntegrator(minStep,maxStep,absTolerance,relTolerance);integ.addStepHandler(new ContinuousOutputModel());integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);ByteArrayOutputStream bos=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(bos);for(StepHandler handler : integ.getStepHandlers()){oos.writeObject(handler);}assertTrue(bos.size()> 34000);assertTrue(bos.size()< 35000);ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());ObjectInputStream ois=new ObjectInputStream(bis);ContinuousOutputModel cm=(ContinuousOutputModel)ois.readObject();Random random=new Random(347588535632l);double maxError=0.0;for (int i=0;i < 1000;++i){double r=random.nextDouble();double time=r * pb.getInitialTime()+ (1.0 - r)* pb.getFinalTime();cm.setInterpolatedTime(time);double[]interpolatedY=cm.getInterpolatedState();double[]theoreticalY=pb.computeTheoreticalState(time);double dx=interpolatedY[0]- theoreticalY[0];double dy=interpolatedY[1]- theoreticalY[1];double error=dx * dx + dy * dy;if (error > maxError){maxError=error;}}assertTrue(maxError < 5.0e-11);}"
"org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest.testClone",0,"public void testClone()throws DerivativeException,IntegratorException {TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=scalAbsoluteTolerance;GraggBulirschStoerIntegrator integ=new GraggBulirschStoerIntegrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);integ.addStepHandler(new StepHandler(){private static final long serialVersionUID=-5947183291381232297L;public void handleStep(StepInterpolator interpolator,boolean isLast)throws DerivativeException {StepInterpolator cloned=interpolator.copy();double tA=cloned.getPreviousTime();double tB=cloned.getCurrentTime();double halfStep=Math.abs(tB - tA)/ 2;assertEquals(interpolator.getPreviousTime(),tA,1.0e-12);assertEquals(interpolator.getCurrentTime(),tB,1.0e-12);for (int i=0;i < 10;++i){double t=(i * tB + (9 - i)* tA)/ 9;interpolator.setInterpolatedTime(t);assertTrue(Math.abs(cloned.getInterpolatedTime()- t)> (halfStep / 10));cloned.setInterpolatedTime(t);assertEquals(t,cloned.getInterpolatedTime(),1.0e-12);double[]referenceState=interpolator.getInterpolatedState();double[]cloneState=cloned.getInterpolatedState();for (int j=0;j < referenceState.length;++j){assertEquals(referenceState[j],cloneState[j],1.0e-12);}}}public boolean requiresDenseOutput(){return true;}public void reset(){}});integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);}"
"org.apache.commons.math.analysis.NewtonSolverTest.testDeprecated",0,"@Deprecated public void testDeprecated()throws MathException {DifferentiableUnivariateRealFunction f=new SinFunction();double result;UnivariateRealSolver solver=new NewtonSolver(f);result=solver.solve(3,4);assertEquals(result,Math.PI,solver.getAbsoluteAccuracy());result=solver.solve(1,4);assertEquals(result,Math.PI,solver.getAbsoluteAccuracy());assertEquals(result,solver.getResult(),0);assertTrue(solver.getIterationCount()> 0);}"
"org.apache.commons.math.analysis.NewtonSolverTest.testSinZero",0,"/** */public void testSinZero()throws MathException {DifferentiableUnivariateRealFunction f=new SinFunction();double result;UnivariateRealSolver solver=new NewtonSolver();result=solver.solve(f,3,4);assertEquals(result,Math.PI,solver.getAbsoluteAccuracy());result=solver.solve(f,1,4);assertEquals(result,Math.PI,solver.getAbsoluteAccuracy());assertEquals(result,solver.getResult(),0);assertTrue(solver.getIterationCount()> 0);}"
"org.apache.commons.math.analysis.NewtonSolverTest.testQuinticZero",0,"/** */public void testQuinticZero()throws MathException {DifferentiableUnivariateRealFunction f=new QuinticFunction();double result;UnivariateRealSolver solver=new NewtonSolver();result=solver.solve(f,-0.2,0.2);assertEquals(result,0,solver.getAbsoluteAccuracy());result=solver.solve(f,-0.1,0.3);assertEquals(result,0,solver.getAbsoluteAccuracy());result=solver.solve(f,-0.3,0.45);assertEquals(result,0,solver.getAbsoluteAccuracy());result=solver.solve(f,0.3,0.7);assertEquals(result,0.5,solver.getAbsoluteAccuracy());result=solver.solve(f,0.2,0.6);assertEquals(result,0.5,solver.getAbsoluteAccuracy());result=solver.solve(f,0.05,0.95);assertEquals(result,0.5,solver.getAbsoluteAccuracy());result=solver.solve(f,0.85,1.25);assertEquals(result,1.0,solver.getAbsoluteAccuracy());result=solver.solve(f,0.8,1.2);assertEquals(result,1.0,solver.getAbsoluteAccuracy());result=solver.solve(f,0.85,1.75);assertEquals(result,1.0,solver.getAbsoluteAccuracy());result=solver.solve(f,0.55,1.45);assertEquals(result,1.0,solver.getAbsoluteAccuracy());result=solver.solve(f,0.85,5);assertEquals(result,1.0,solver.getAbsoluteAccuracy());}"
"org.apache.commons.math.analysis.NewtonSolverTest.testSerialization",0,"/** * Test Serialization and Recovery*/public void testSerialization()throws MathException {DifferentiableUnivariateRealFunction f=new QuinticFunction();double result;NewtonSolver solver=new NewtonSolver();NewtonSolver solver2=(NewtonSolver)TestUtils.serializeAndRecover(solver);result=solver.solve(f,-0.2,0.2);assertEquals(result,0,solver.getAbsoluteAccuracy());assertEquals(solver2.solve(f,-0.2,0.2),result,solver2.getAbsoluteAccuracy());result=solver.solve(f,-0.1,0.3);assertEquals(result,0,solver.getAbsoluteAccuracy());assertEquals(solver2.solve(f,-0.1,0.3),result,solver2.getAbsoluteAccuracy());result=solver.solve(f,-0.3,0.45);assertEquals(result,0,solver.getAbsoluteAccuracy());assertEquals(solver2.solve(f,-0.3,0.45),result,solver2.getAbsoluteAccuracy());result=solver.solve(f,0.3,0.7);assertEquals(result,0.5,solver.getAbsoluteAccuracy());assertEquals(solver2.solve(f,0.3,0.7),result,solver2.getAbsoluteAccuracy());result=solver.solve(f,0.2,0.6);assertEquals(result,0.5,solver.getAbsoluteAccuracy());assertEquals(solver2.solve(f,0.2,0.6),result,solver2.getAbsoluteAccuracy());result=solver.solve(f,0.05,0.95);assertEquals(result,0.5,solver.getAbsoluteAccuracy());assertEquals(solver2.solve(f,0.05,0.95),result,solver2.getAbsoluteAccuracy());result=solver.solve(f,0.85,1.25);assertEquals(result,1.0,solver.getAbsoluteAccuracy());assertEquals(solver2.solve(f,0.85,1.25),result,solver2.getAbsoluteAccuracy());result=solver.solve(f,0.8,1.2);assertEquals(result,1.0,solver.getAbsoluteAccuracy());assertEquals(solver2.solve(f,0.8,1.2),result,solver2.getAbsoluteAccuracy());result=solver.solve(f,0.85,1.75);assertEquals(result,1.0,solver.getAbsoluteAccuracy());assertEquals(solver2.solve(f,0.85,1.75),result,solver2.getAbsoluteAccuracy());result=solver.solve(f,0.55,1.45);assertEquals(result,1.0,solver.getAbsoluteAccuracy());assertEquals(solver2.solve(f,0.55,1.45),result,solver2.getAbsoluteAccuracy());result=solver.solve(f,0.85,5);assertEquals(result,1.0,solver.getAbsoluteAccuracy());assertEquals(solver2.solve(f,0.85,5),result,solver2.getAbsoluteAccuracy());double newValue=1.0e-2;f=new QuinticFunction();solver=new NewtonSolver();double oldValue=solver.getRelativeAccuracy();solver.setRelativeAccuracy(newValue);solver.resetRelativeAccuracy();assertEquals(oldValue,solver.getRelativeAccuracy(),1.0e-2);solver2=(NewtonSolver)TestUtils.serializeAndRecover(solver);assertEquals(oldValue,solver2.getRelativeAccuracy(),1.0e-2);solver2.setRelativeAccuracy(newValue);solver2.resetRelativeAccuracy();assertEquals(oldValue,solver2.getRelativeAccuracy(),1.0e-2);}"
"org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest.testNoReset",0,"public void testNoReset(){double[]y={0.0,1.0,-2.0};DummyStepInterpolator interpolator=new DummyStepInterpolator(y,true);interpolator.storeTime(0);interpolator.shift();interpolator.storeTime(1);double[]result=interpolator.getInterpolatedState();for (int i=0;i < result.length;++i){assertTrue(Math.abs(result[i]- y[i])< 1.0e-10);}}"
"org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest.testFixedState",0,"public void testFixedState()throws DerivativeException {double[]y={1.0,3.0,-4.0};DummyStepInterpolator interpolator=new DummyStepInterpolator(y,true);interpolator.storeTime(0);interpolator.shift();interpolator.storeTime(1);interpolator.setInterpolatedTime(0.1);double[]result=interpolator.getInterpolatedState();for (int i=0;i < result.length;++i){assertTrue(Math.abs(result[i]- y[i])< 1.0e-10);}interpolator.setInterpolatedTime(0.5);result=interpolator.getInterpolatedState();for (int i=0;i < result.length;++i){assertTrue(Math.abs(result[i]- y[i])< 1.0e-10);}}"
"org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest.testSerialization",0,"public void testSerialization()throws DerivativeException,IntegratorException,IOException,ClassNotFoundException {double[]y={0.0,1.0,-2.0};DummyStepInterpolator interpolator=new DummyStepInterpolator(y,true);interpolator.storeTime(0);interpolator.shift();interpolator.storeTime(1);ByteArrayOutputStream bos=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(bos);oos.writeObject(interpolator);assertTrue(bos.size()> 150);assertTrue(bos.size()< 250);ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());ObjectInputStream ois=new ObjectInputStream(bis);DummyStepInterpolator dsi=(DummyStepInterpolator)ois.readObject();dsi.setInterpolatedTime(0.5);double[]result=dsi.getInterpolatedState();for (int i=0;i < result.length;++i){assertTrue(Math.abs(result[i]- y[i])< 1.0e-10);}}"
"org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest.testImpossibleSerialization",0,"public void testImpossibleSerialization()throws DerivativeException,IntegratorException,IOException,ClassNotFoundException {double[]y={0.0,1.0,-2.0};AbstractStepInterpolator interpolator=new BadStepInterpolator(y,true);interpolator.storeTime(0);interpolator.shift();interpolator.storeTime(1);ByteArrayOutputStream bos=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(bos);try {oos.writeObject(interpolator);fail(""an exception should have been thrown"");}catch(IOException ioe){assertEquals(0,ioe.getMessage().length());}catch(Exception e){fail(""wrong exception caught"");}}"
"org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest.testSerializationError",0,"public void testSerializationError()throws DerivativeException,IntegratorException,IOException,ClassNotFoundException {double[]y={0.0,1.0,-2.0};ErrorGeneratingInterpolator interpolator=new ErrorGeneratingInterpolator(y,true);interpolator.storeTime(0);interpolator.shift();interpolator.storeTime(1);ByteArrayOutputStream bos=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(bos);oos.writeObject(interpolator);assertTrue(bos.size()> 300);assertTrue(bos.size()< 350);ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());ObjectInputStream ois=new ObjectInputStream(bis);try {ois.readObject();fail(""an exception should have been thrown"");}catch(IOException ioe){assertEquals(0,ioe.getMessage().length());}catch(Exception e){fail(""wrong exception caught"");}}"
"org.apache.commons.math.analysis.BrentSolverTest.testDeprecated",0,"@Deprecated public void testDeprecated()throws MathException {UnivariateRealFunction f=new SinFunction();double result;UnivariateRealSolver solver=new BrentSolver(f);result=solver.solve(3,4);assertEquals(result,Math.PI,solver.getAbsoluteAccuracy());assertTrue(solver.getIterationCount()<= 5);result=solver.solve(1,4);assertEquals(result,Math.PI,solver.getAbsoluteAccuracy());assertTrue(solver.getIterationCount()<= 6);solver=new SecantSolver(f);result=solver.solve(3,4);assertEquals(result,Math.PI,solver.getAbsoluteAccuracy());assertTrue(solver.getIterationCount()<= 5);result=solver.solve(1,4);assertEquals(result,Math.PI,solver.getAbsoluteAccuracy());assertTrue(solver.getIterationCount()<= 6);assertEquals(result,solver.getResult(),0);}"
"org.apache.commons.math.analysis.BrentSolverTest.testSinZero",0,"public void testSinZero()throws MathException {UnivariateRealFunction f=new SinFunction();double result;UnivariateRealSolver solver=new BrentSolver();result=solver.solve(f,3,4);assertEquals(result,Math.PI,solver.getAbsoluteAccuracy());assertTrue(solver.getIterationCount()<= 5);result=solver.solve(f,1,4);assertEquals(result,Math.PI,solver.getAbsoluteAccuracy());assertTrue(solver.getIterationCount()<= 6);solver=new SecantSolver();result=solver.solve(f,3,4);assertEquals(result,Math.PI,solver.getAbsoluteAccuracy());assertTrue(solver.getIterationCount()<= 5);result=solver.solve(f,1,4);assertEquals(result,Math.PI,solver.getAbsoluteAccuracy());assertTrue(solver.getIterationCount()<= 6);assertEquals(result,solver.getResult(),0);}"
"org.apache.commons.math.analysis.BrentSolverTest.testQuinticZero",0,"public void testQuinticZero()throws MathException {UnivariateRealFunction f=new QuinticFunction();double result;UnivariateRealSolver solver=new BrentSolver();result=solver.solve(f,-0.2,0.2);assertEquals(result,0,solver.getAbsoluteAccuracy());assertTrue(solver.getIterationCount()<= 2);result=solver.solve(f,-0.1,0.3);assertEquals(result,0,solver.getAbsoluteAccuracy());assertTrue(solver.getIterationCount()<= 6);result=solver.solve(f,-0.3,0.45);assertEquals(result,0,solver.getAbsoluteAccuracy());assertTrue(solver.getIterationCount()<= 7);result=solver.solve(f,0.3,0.7);assertEquals(result,0.5,solver.getAbsoluteAccuracy());assertTrue(solver.getIterationCount()<= 7);result=solver.solve(f,0.2,0.6);assertEquals(result,0.5,solver.getAbsoluteAccuracy());assertTrue(solver.getIterationCount()<= 7);result=solver.solve(f,0.05,0.95);assertEquals(result,0.5,solver.getAbsoluteAccuracy());assertTrue(solver.getIterationCount()<= 9);result=solver.solve(f,0.85,1.25);assertEquals(result,1.0,solver.getAbsoluteAccuracy());assertTrue(solver.getIterationCount()<= 9);result=solver.solve(f,0.8,1.2);assertEquals(result,1.0,solver.getAbsoluteAccuracy());assertTrue(solver.getIterationCount()<= 9);result=solver.solve(f,0.85,1.75);assertEquals(result,1.0,solver.getAbsoluteAccuracy());assertTrue(solver.getIterationCount()<= 11);result=solver.solve(f,0.55,1.45);assertEquals(result,1.0,solver.getAbsoluteAccuracy());assertTrue(solver.getIterationCount()<= 8);result=solver.solve(f,0.85,5);assertEquals(result,1.0,solver.getAbsoluteAccuracy());assertTrue(solver.getIterationCount()<= 13);solver=new SecantSolver();result=solver.solve(f,-0.2,0.2);assertEquals(result,0,solver.getAbsoluteAccuracy());assertTrue(solver.getIterationCount()<= 2);result=solver.solve(f,-0.1,0.3);assertEquals(result,0,solver.getAbsoluteAccuracy());assertTrue(solver.getIterationCount()<= 6);result=solver.solve(f,-0.3,0.45);assertEquals(result,0,solver.getAbsoluteAccuracy());assertTrue(solver.getIterationCount()<= 7);result=solver.solve(f,0.3,0.7);assertEquals(result,0.5,solver.getAbsoluteAccuracy());assertTrue(solver.getIterationCount()<= 8);result=solver.solve(f,0.2,0.6);assertEquals(result,0.5,solver.getAbsoluteAccuracy());assertTrue(solver.getIterationCount()<= 7);result=solver.solve(f,0.05,0.95);assertEquals(result,0.5,solver.getAbsoluteAccuracy());assertTrue(solver.getIterationCount()<= 9);result=solver.solve(f,0.85,1.25);assertEquals(result,1.0,solver.getAbsoluteAccuracy());assertTrue(solver.getIterationCount()<= 11);result=solver.solve(f,0.8,1.2);assertEquals(result,1.0,solver.getAbsoluteAccuracy());assertTrue(solver.getIterationCount()<= 9);result=solver.solve(f,0.85,1.75);assertEquals(result,1.0,solver.getAbsoluteAccuracy());assertTrue(solver.getIterationCount()<= 15);result=solver.solve(f,0.55,1.45);assertEquals(result,1.0,solver.getAbsoluteAccuracy());assertTrue(solver.getIterationCount()<= 8);result=solver.solve(f,0.85,5);assertEquals(result,1.0,solver.getAbsoluteAccuracy());assertTrue(solver.getIterationCount()<= 15);result=UnivariateRealSolverUtils.solve(f,-0.2,0.2);assertEquals(result,0,solver.getAbsoluteAccuracy());result=UnivariateRealSolverUtils.solve(f,-0.1,0.3);assertEquals(result,0,1E-8);result=UnivariateRealSolverUtils.solve(f,-0.3,0.45);assertEquals(result,0,1E-6);result=UnivariateRealSolverUtils.solve(f,0.3,0.7);assertEquals(result,0.5,1E-6);result=UnivariateRealSolverUtils.solve(f,0.2,0.6);assertEquals(result,0.5,1E-6);result=UnivariateRealSolverUtils.solve(f,0.05,0.95);assertEquals(result,0.5,1E-6);result=UnivariateRealSolverUtils.solve(f,0.85,1.25);assertEquals(result,1.0,1E-6);result=UnivariateRealSolverUtils.solve(f,0.8,1.2);assertEquals(result,1.0,1E-6);result=UnivariateRealSolverUtils.solve(f,0.85,1.75);assertEquals(result,1.0,1E-6);result=UnivariateRealSolverUtils.solve(f,0.55,1.45);assertEquals(result,1.0,1E-6);result=UnivariateRealSolverUtils.solve(f,0.85,5);assertEquals(result,1.0,1E-6);}"
"org.apache.commons.math.analysis.BrentSolverTest.testRootEndpoints",0,"public void testRootEndpoints()throws Exception {UnivariateRealFunction f=new SinFunction();UnivariateRealSolver solver=new BrentSolver();double result=solver.solve(f,Math.PI,4);assertEquals(result,Math.PI,solver.getAbsoluteAccuracy());result=solver.solve(f,3,Math.PI);assertEquals(result,Math.PI,solver.getAbsoluteAccuracy());}"
"org.apache.commons.math.analysis.BrentSolverTest.testBadEndpoints",0,"public void testBadEndpoints()throws Exception {UnivariateRealFunction f=new SinFunction();UnivariateRealSolver solver=new BrentSolver();try {solver.solve(f,1,-1);fail(""Expecting IllegalArgumentException - bad interval"");}catch(IllegalArgumentException ex){}try {solver.solve(f,1,1.5);fail(""Expecting IllegalArgumentException - non-bracketing"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.analysis.BrentSolverTest.testInitialGuess",0,"public void testInitialGuess()throws MathException {MonitoredFunction f=new MonitoredFunction(new QuinticFunction());UnivariateRealSolver solver=new BrentSolver();double result;result=solver.solve(f,0.6,7.0);assertEquals(result,1.0,solver.getAbsoluteAccuracy());int referenceCallsCount=f.getCallsCount();assertTrue(referenceCallsCount >= 13);try {result=solver.solve(f,0.6,7.0,0.0);fail(""an IllegalArgumentException was expected"");}catch(IllegalArgumentException iae){}catch(Exception e){fail(""wrong exception caught: "" + e.getMessage());}f.setCallsCount(0);result=solver.solve(f,0.6,7.0,0.61);assertEquals(result,1.0,solver.getAbsoluteAccuracy());assertTrue(f.getCallsCount()> referenceCallsCount);f.setCallsCount(0);result=solver.solve(f,0.6,7.0,0.999999);assertEquals(result,1.0,solver.getAbsoluteAccuracy());assertTrue(f.getCallsCount()< referenceCallsCount);f.setCallsCount(0);result=solver.solve(f,0.6,7.0,1.0);assertEquals(result,1.0,solver.getAbsoluteAccuracy());assertEquals(0,solver.getIterationCount());assertEquals(1,f.getCallsCount());}"
"org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructor",0,"public void testConstructor(){FunctionEvaluationException ex=new FunctionEvaluationException(0.0);assertNull(ex.getCause());assertNotNull(ex.getMessage());assertTrue(ex.getMessage().indexOf(""0"")> 0);assertEquals(0.0,ex.getArgument(),0);}"
"org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorPatternArguments",0,"public void testConstructorPatternArguments(){String pattern=""Evaluation failed for argument = {0}"";Object[]arguments={Double.valueOf(0.0)};FunctionEvaluationException ex=new FunctionEvaluationException(0.0,pattern,arguments);assertNull(ex.getCause());assertEquals(pattern,ex.getPattern());assertEquals(arguments.length,ex.getArguments().length);for (int i=0;i < arguments.length;++i){assertEquals(arguments[i],ex.getArguments()[i]);}assertFalse(pattern.equals(ex.getMessage()));assertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));}"
"org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorPatternArgumentsCause",0,"public void testConstructorPatternArgumentsCause(){String pattern=""Evaluation failed for argument = {0}"";Object[]arguments={Double.valueOf(0.0)};String inMsg=""inner message"";Exception cause=new Exception(inMsg);FunctionEvaluationException ex=new FunctionEvaluationException(0.0,pattern,arguments,cause);assertEquals(cause,ex.getCause());assertEquals(pattern,ex.getPattern());assertEquals(arguments.length,ex.getArguments().length);for (int i=0;i < arguments.length;++i){assertEquals(arguments[i],ex.getArguments()[i]);}assertFalse(pattern.equals(ex.getMessage()));assertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));}"
"org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorArgumentCause",0,"public void testConstructorArgumentCause(){String inMsg=""inner message"";Exception cause=new Exception(inMsg);FunctionEvaluationException ex=new FunctionEvaluationException(0.0,cause);assertEquals(cause,ex.getCause());assertTrue(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));}"
"org.apache.commons.math.stat.descriptive.summary.SumLogTest.testSpecialValues",0,"public void testSpecialValues(){SumOfLogs sum=new SumOfLogs();assertTrue(Double.isNaN(sum.getResult()));sum.increment(1d);assertFalse(Double.isNaN(sum.getResult()));sum.increment(0d);assertEquals(Double.NEGATIVE_INFINITY,sum.getResult(),0);sum.increment(Double.POSITIVE_INFINITY);assertTrue(Double.isNaN(sum.getResult()));sum.clear();assertTrue(Double.isNaN(sum.getResult()));sum.increment(Double.POSITIVE_INFINITY);assertEquals(Double.POSITIVE_INFINITY,sum.getResult(),0);sum.increment(-2d);assertTrue(Double.isNaN(sum.getResult()));}"
"org.apache.commons.math.complex.ComplexUtilsTest.testPolar2Complex",0,"public void testPolar2Complex(){TestUtils.assertEquals(Complex.ONE,ComplexUtils.polar2Complex(1,0),10e-12);TestUtils.assertEquals(Complex.ZERO,ComplexUtils.polar2Complex(0,1),10e-12);TestUtils.assertEquals(Complex.ZERO,ComplexUtils.polar2Complex(0,-1),10e-12);TestUtils.assertEquals(Complex.I,ComplexUtils.polar2Complex(1,pi / 2),10e-12);TestUtils.assertEquals(Complex.I.negate(),ComplexUtils.polar2Complex(1,-pi / 2),10e-12);double r=0;for (int i=0;i < 5;i++){r+=i;double theta=0;for (int j=0;j < 20;j++){theta+=pi / 6;TestUtils.assertEquals(altPolar(r,theta),ComplexUtils.polar2Complex(r,theta),10e-12);}theta=-2 * pi;for (int j=0;j < 20;j++){theta-=pi / 6;TestUtils.assertEquals(altPolar(r,theta),ComplexUtils.polar2Complex(r,theta),10e-12);}}}"
"org.apache.commons.math.complex.ComplexUtilsTest.testPolar2ComplexIllegalModulus",0,"public void testPolar2ComplexIllegalModulus(){try {ComplexUtils.polar2Complex(-1,0);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.complex.ComplexUtilsTest.testPolar2ComplexNaN",0,"public void testPolar2ComplexNaN(){TestUtils.assertSame(Complex.NaN,ComplexUtils.polar2Complex(nan,1));TestUtils.assertSame(Complex.NaN,ComplexUtils.polar2Complex(1,nan));TestUtils.assertSame(Complex.NaN,ComplexUtils.polar2Complex(nan,nan));}"
"org.apache.commons.math.complex.ComplexUtilsTest.testPolar2ComplexInf",0,"public void testPolar2ComplexInf(){TestUtils.assertSame(Complex.NaN,ComplexUtils.polar2Complex(1,inf));TestUtils.assertSame(Complex.NaN,ComplexUtils.polar2Complex(1,negInf));TestUtils.assertSame(Complex.NaN,ComplexUtils.polar2Complex(inf,inf));TestUtils.assertSame(Complex.NaN,ComplexUtils.polar2Complex(inf,negInf));TestUtils.assertSame(infInf,ComplexUtils.polar2Complex(inf,pi / 4));TestUtils.assertSame(infNaN,ComplexUtils.polar2Complex(inf,0));TestUtils.assertSame(infNegInf,ComplexUtils.polar2Complex(inf,-pi / 4));TestUtils.assertSame(negInfInf,ComplexUtils.polar2Complex(inf,3 * pi / 4));TestUtils.assertSame(negInfNegInf,ComplexUtils.polar2Complex(inf,5 * pi / 4));}"
"org.apache.commons.math.ConvergenceExceptionTest.testConstructor",0,"public void testConstructor(){ConvergenceException ex=new ConvergenceException();assertNull(ex.getCause());assertNotNull(ex.getMessage());assertNotNull(ex.getMessage(Locale.FRENCH));assertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));}"
"org.apache.commons.math.ConvergenceExceptionTest.testConstructorPatternArguments",0,"public void testConstructorPatternArguments(){String pattern=""a {0}x{1}matrix cannot be a rotation matrix"";Object[]arguments={Integer.valueOf(6),Integer.valueOf(4)};ConvergenceException ex=new ConvergenceException(pattern,arguments);assertNull(ex.getCause());assertEquals(pattern,ex.getPattern());assertEquals(arguments.length,ex.getArguments().length);for (int i=0;i < arguments.length;++i){assertEquals(arguments[i],ex.getArguments()[i]);}assertFalse(pattern.equals(ex.getMessage()));assertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));}"
"org.apache.commons.math.ConvergenceExceptionTest.testConstructorCause",0,"public void testConstructorCause(){String inMsg=""inner message"";Exception cause=new Exception(inMsg);ConvergenceException ex=new ConvergenceException(cause);assertEquals(cause,ex.getCause());}"
"org.apache.commons.math.ConvergenceExceptionTest.testConstructorPatternArgumentsCause",0,"public void testConstructorPatternArgumentsCause(){String pattern=""a {0}x{1}matrix cannot be a rotation matrix"";Object[]arguments={Integer.valueOf(6),Integer.valueOf(4)};String inMsg=""inner message"";Exception cause=new Exception(inMsg);ConvergenceException ex=new ConvergenceException(pattern,arguments,cause);assertEquals(cause,ex.getCause());assertEquals(pattern,ex.getPattern());assertEquals(arguments.length,ex.getArguments().length);for (int i=0;i < arguments.length;++i){assertEquals(arguments[i],ex.getArguments()[i]);}assertFalse(pattern.equals(ex.getMessage()));assertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));}"
"org.apache.commons.math.stat.inference.TTestFactoryTest.testOneSampleT",0,"public void testOneSampleT()throws Exception {double[]observed={93.0,103.0,95.0,101.0,91.0,105.0,96.0,94.0,101.0,88.0,98.0,94.0,101.0,92.0,95.0};double mu=100.0;SummaryStatistics sampleStats=null;sampleStats=new SummaryStatistics();for (int i=0;i < observed.length;i++){sampleStats.addValue(observed[i]);}assertEquals(""t statistic"",-2.81976445346,testStatistic.t(mu,observed),10E-10);assertEquals(""t statistic"",-2.81976445346,testStatistic.t(mu,sampleStats),10E-10);assertEquals(""p value"",0.0136390585873,testStatistic.tTest(mu,observed),10E-10);assertEquals(""p value"",0.0136390585873,testStatistic.tTest(mu,sampleStats),10E-10);try {testStatistic.t(mu,(double[])null);fail(""arguments too short,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {testStatistic.t(mu,(SummaryStatistics)null);fail(""arguments too short,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {testStatistic.t(mu,emptyObs);fail(""arguments too short,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {testStatistic.t(mu,emptyStats);fail(""arguments too short,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {testStatistic.t(mu,tooShortObs);fail(""insufficient data to compute t statistic,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {testStatistic.tTest(mu,tooShortObs);fail(""insufficient data to perform t test,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {testStatistic.t(mu,tooShortStats);fail(""insufficient data to compute t statistic,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {testStatistic.tTest(mu,tooShortStats);fail(""insufficient data to perform t test,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.stat.inference.TTestFactoryTest.testOneSampleTTest",0,"public void testOneSampleTTest()throws Exception {double[]oneSidedP={2d,0d,6d,6d,3d,3d,2d,3d,-6d,6d,6d,6d,3d,0d,1d,1d,0d,2d,3d,3d};SummaryStatistics oneSidedPStats=new SummaryStatistics();for (int i=0;i < oneSidedP.length;i++){oneSidedPStats.addValue(oneSidedP[i]);}assertEquals(""one sample t stat"",3.86485535541,testStatistic.t(0d,oneSidedP),10E-10);assertEquals(""one sample t stat"",3.86485535541,testStatistic.t(0d,oneSidedPStats),1E-10);assertEquals(""one sample p value"",0.000521637019637,testStatistic.tTest(0d,oneSidedP)/ 2d,10E-10);assertEquals(""one sample p value"",0.000521637019637,testStatistic.tTest(0d,oneSidedPStats)/ 2d,10E-5);assertTrue(""one sample t-test reject"",testStatistic.tTest(0d,oneSidedP,0.01));assertTrue(""one sample t-test reject"",testStatistic.tTest(0d,oneSidedPStats,0.01));assertTrue(""one sample t-test accept"",!testStatistic.tTest(0d,oneSidedP,0.0001));assertTrue(""one sample t-test accept"",!testStatistic.tTest(0d,oneSidedPStats,0.0001));try {testStatistic.tTest(0d,oneSidedP,95);fail(""alpha out of range,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {testStatistic.tTest(0d,oneSidedPStats,95);fail(""alpha out of range,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.stat.inference.TTestFactoryTest.testTwoSampleTHeterscedastic",0,"public void testTwoSampleTHeterscedastic()throws Exception {double[]sample1={7d,-4d,18d,17d,-3d,-5d,1d,10d,11d,-2d};double[]sample2={-1d,12d,-1d,-3d,3d,-5d,5d,2d,-11d,-1d,-3d};SummaryStatistics sampleStats1=new SummaryStatistics();for (int i=0;i < sample1.length;i++){sampleStats1.addValue(sample1[i]);}SummaryStatistics sampleStats2=new SummaryStatistics();for (int i=0;i < sample2.length;i++){sampleStats2.addValue(sample2[i]);}assertEquals(""two sample heteroscedastic t stat"",1.60371728768,testStatistic.t(sample1,sample2),1E-10);assertEquals(""two sample heteroscedastic t stat"",1.60371728768,testStatistic.t(sampleStats1,sampleStats2),1E-10);assertEquals(""two sample heteroscedastic p value"",0.128839369622,testStatistic.tTest(sample1,sample2),1E-10);assertEquals(""two sample heteroscedastic p value"",0.128839369622,testStatistic.tTest(sampleStats1,sampleStats2),1E-10);assertTrue(""two sample heteroscedastic t-test reject"",testStatistic.tTest(sample1,sample2,0.2));assertTrue(""two sample heteroscedastic t-test reject"",testStatistic.tTest(sampleStats1,sampleStats2,0.2));assertTrue(""two sample heteroscedastic t-test accept"",!testStatistic.tTest(sample1,sample2,0.1));assertTrue(""two sample heteroscedastic t-test accept"",!testStatistic.tTest(sampleStats1,sampleStats2,0.1));try {testStatistic.tTest(sample1,sample2,.95);fail(""alpha out of range,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {testStatistic.tTest(sampleStats1,sampleStats2,.95);fail(""alpha out of range,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {testStatistic.tTest(sample1,tooShortObs,.01);fail(""insufficient data,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {testStatistic.tTest(sampleStats1,tooShortStats,.01);fail(""insufficient data,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {testStatistic.tTest(sample1,tooShortObs);fail(""insufficient data,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {testStatistic.tTest(sampleStats1,tooShortStats);fail(""insufficient data,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {testStatistic.t(sample1,tooShortObs);fail(""insufficient data,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {testStatistic.t(sampleStats1,tooShortStats);fail(""insufficient data,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.stat.inference.TTestFactoryTest.testTwoSampleTHomoscedastic",0,"public void testTwoSampleTHomoscedastic()throws Exception {double[]sample1={2,4,6,8,10,97};double[]sample2={4,6,8,10,16};SummaryStatistics sampleStats1=new SummaryStatistics();for (int i=0;i < sample1.length;i++){sampleStats1.addValue(sample1[i]);}SummaryStatistics sampleStats2=new SummaryStatistics();for (int i=0;i < sample2.length;i++){sampleStats2.addValue(sample2[i]);}assertEquals(""two sample homoscedastic t stat"",0.73096310086,testStatistic.homoscedasticT(sample1,sample2),10E-11);assertEquals(""two sample homoscedastic p value"",0.4833963785,testStatistic.homoscedasticTTest(sampleStats1,sampleStats2),1E-10);assertTrue(""two sample homoscedastic t-test reject"",testStatistic.homoscedasticTTest(sample1,sample2,0.49));assertTrue(""two sample homoscedastic t-test accept"",!testStatistic.homoscedasticTTest(sample1,sample2,0.48));}"
"org.apache.commons.math.stat.inference.TTestFactoryTest.testSmallSamples",0,"public void testSmallSamples()throws Exception {double[]sample1={1d,3d};double[]sample2={4d,5d};assertEquals(-2.2360679775,testStatistic.t(sample1,sample2),1E-10);assertEquals(0.198727388935,testStatistic.tTest(sample1,sample2),1E-10);}"
"org.apache.commons.math.stat.inference.TTestFactoryTest.testPaired",0,"public void testPaired()throws Exception {double[]sample1={1d,3d,5d,7d};double[]sample2={0d,6d,11d,2d};double[]sample3={5d,7d,8d,10d};assertEquals(-0.3133,testStatistic.pairedT(sample1,sample2),1E-4);assertEquals(0.774544295819,testStatistic.pairedTTest(sample1,sample2),1E-10);assertEquals(0.001208,testStatistic.pairedTTest(sample1,sample3),1E-6);assertFalse(testStatistic.pairedTTest(sample1,sample3,.001));assertTrue(testStatistic.pairedTTest(sample1,sample3,.002));}"
"org.apache.commons.math.transform.FastHadamardTransformerTest.test8Points",0,"/** * Test of transformer for the a 8-point FHT (means n=8)*/public void test8Points(){checkAllTransforms(new int[]{1,4,-2,3,0,1,4,-1},new int[]{10,-4,2,-4,2,-12,6,8});}"
"org.apache.commons.math.transform.FastHadamardTransformerTest.test4Points",0,"/** * Test of transformer for the a 4-points FHT (means n=4)*/public void test4Points(){checkAllTransforms(new int[]{1,2,3,4},new int[]{10,-2,-4,0});}"
"org.apache.commons.math.transform.FastHadamardTransformerTest.testNoIntInverse",0,"/** * Test the inverse transform of an integer vector is not always an integer vector*/public void testNoIntInverse(){FastHadamardTransformer transformer=new FastHadamardTransformer();double[]x=transformer.inversetransform(new double[]{0,1,0,1});assertEquals(0.5,x[0],0);assertEquals(-0.5,x[1],0);assertEquals(0.0,x[2],0);assertEquals(0.0,x[3],0);}"
"org.apache.commons.math.transform.FastHadamardTransformerTest.test3Points",0,"/** * Test of transformer for wrong number of points*/public void test3Points(){try {new FastHadamardTransformer().transform(new double[3]);fail(""an exception should have been thrown"");}catch(IllegalArgumentException iae){}}"
"org.apache.commons.math.geometry.RotationOrderTest.testName",0,"public void testName(){RotationOrder[]orders={RotationOrder.XYZ,RotationOrder.XZY,RotationOrder.YXZ,RotationOrder.YZX,RotationOrder.ZXY,RotationOrder.ZYX,RotationOrder.XYX,RotationOrder.XZX,RotationOrder.YXY,RotationOrder.YZY,RotationOrder.ZXZ,RotationOrder.ZYZ};for (int i=0;i < orders.length;++i){assertEquals(getFieldName(orders[i]),orders[i].toString());}}"
"org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest.testDerivativesConsistency",0,"public void testDerivativesConsistency()throws DerivativeException,IntegratorException {TestProblem3 pb=new TestProblem3();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.001;ThreeEighthesIntegrator integ=new ThreeEighthesIntegrator(step);checkDerivativesConsistency(integ,pb,1.0e-10);}"
"org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest.testSerialization",0,"public void testSerialization()throws DerivativeException,IntegratorException,IOException,ClassNotFoundException {TestProblem3 pb=new TestProblem3(0.9);double step=(pb.getFinalTime()- pb.getInitialTime())* 0.0003;ThreeEighthesIntegrator integ=new ThreeEighthesIntegrator(step);integ.addStepHandler(new ContinuousOutputModel());integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);ByteArrayOutputStream bos=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(bos);for(StepHandler handler : integ.getStepHandlers()){oos.writeObject(handler);}assertTrue(bos.size()> 700000);assertTrue(bos.size()< 701000);ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());ObjectInputStream ois=new ObjectInputStream(bis);ContinuousOutputModel cm=(ContinuousOutputModel)ois.readObject();Random random=new Random(347588535632l);double maxError=0.0;for (int i=0;i < 1000;++i){double r=random.nextDouble();double time=r * pb.getInitialTime()+ (1.0 - r)* pb.getFinalTime();cm.setInterpolatedTime(time);double[]interpolatedY=cm.getInterpolatedState();double[]theoreticalY=pb.computeTheoreticalState(time);double dx=interpolatedY[0]- theoreticalY[0];double dy=interpolatedY[1]- theoreticalY[1];double error=dx * dx + dy * dy;if (error > maxError){maxError=error;}}assertTrue(maxError > 0.005);}"
"org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest.testSinFunction",0,"/** * Test of interpolator for the sine function. <p> |sin^(n)(zeta)| <= 1.0,zeta in [0,2*PI]*/public void testSinFunction()throws MathException {UnivariateRealFunction f=new SinFunction();UnivariateRealInterpolator interpolator=new DividedDifferenceInterpolator();double x[],y[],z,expected,result,tolerance;int n=6;double min=0.0,max=2 * Math.PI;x=new double[n];y=new double[n];for (int i=0;i < n;i++){x[i]=min + i * (max - min)/ n;y[i]=f.value(x[i]);}double derivativebound=1.0;UnivariateRealFunction p=interpolator.interpolate(x,y);z=Math.PI / 4;expected=f.value(z);result=p.value(z);tolerance=Math.abs(derivativebound * partialerror(x,z));assertEquals(expected,result,tolerance);z=Math.PI * 1.5;expected=f.value(z);result=p.value(z);tolerance=Math.abs(derivativebound * partialerror(x,z));assertEquals(expected,result,tolerance);}"
"org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest.testExpm1Function",0,"/** * Test of interpolator for the exponential function. <p> |expm1^(n)(zeta)| <= e,zeta in [-1,1]*/public void testExpm1Function()throws MathException {UnivariateRealFunction f=new Expm1Function();UnivariateRealInterpolator interpolator=new DividedDifferenceInterpolator();double x[],y[],z,expected,result,tolerance;int n=5;double min=-1.0,max=1.0;x=new double[n];y=new double[n];for (int i=0;i < n;i++){x[i]=min + i * (max - min)/ n;y[i]=f.value(x[i]);}double derivativebound=Math.E;UnivariateRealFunction p=interpolator.interpolate(x,y);z=0.0;expected=f.value(z);result=p.value(z);tolerance=Math.abs(derivativebound * partialerror(x,z));assertEquals(expected,result,tolerance);z=0.5;expected=f.value(z);result=p.value(z);tolerance=Math.abs(derivativebound * partialerror(x,z));assertEquals(expected,result,tolerance);z=-0.5;expected=f.value(z);result=p.value(z);tolerance=Math.abs(derivativebound * partialerror(x,z));assertEquals(expected,result,tolerance);}"
"org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest.testParameters",0,"/** * Test of parameters for the interpolator.*/public void testParameters()throws Exception {UnivariateRealInterpolator interpolator=new DividedDifferenceInterpolator();try {double x[]={1.0,2.0,2.0,4.0};double y[]={0.0,4.0,4.0,2.5};UnivariateRealFunction p=interpolator.interpolate(x,y);p.value(0.0);fail(""Expecting MathException - bad abscissas array"");}catch(MathException ex){}}"
"org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquare",0,"public void testChiSquare()throws Exception {long[]observed={10,9,11};double[]expected={10,10,10};assertEquals(""chi-square statistic"",0.2,testStatistic.chiSquare(expected,observed),10E-12);assertEquals(""chi-square p-value"",0.904837418036,testStatistic.chiSquareTest(expected,observed),1E-10);long[]observed1={500,623,72,70,31};double[]expected1={485,541,82,61,37};assertEquals(""chi-square test statistic"",9.023307936427388,testStatistic.chiSquare(expected1,observed1),1E-10);assertEquals(""chi-square p-value"",0.06051952647453607,testStatistic.chiSquareTest(expected1,observed1),1E-9);assertTrue(""chi-square test reject"",testStatistic.chiSquareTest(expected1,observed1,0.08));assertTrue(""chi-square test accept"",!testStatistic.chiSquareTest(expected1,observed1,0.05));try {testStatistic.chiSquareTest(expected1,observed1,95);fail(""alpha out of range,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}long[]tooShortObs={0};double[]tooShortEx={1};try {testStatistic.chiSquare(tooShortEx,tooShortObs);fail(""arguments too short,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}long[]unMatchedObs={0,1,2,3};double[]unMatchedEx={1,1,2};try {testStatistic.chiSquare(unMatchedEx,unMatchedObs);fail(""arrays have different lengths,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}expected[0]=0;try {testStatistic.chiSquareTest(expected,observed,.01);fail(""bad expected count,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}expected[0]=1;observed[0]=-1;try {testStatistic.chiSquareTest(expected,observed,.01);fail(""bad expected count,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareIndependence",0,"public void testChiSquareIndependence()throws Exception {long[][]counts={{40,22,43},{91,21,28},{60,10,22}};assertEquals(""chi-square test statistic"",22.709027688,testStatistic.chiSquare(counts),1E-9);assertEquals(""chi-square p-value"",0.000144751460134,testStatistic.chiSquareTest(counts),1E-9);assertTrue(""chi-square test reject"",testStatistic.chiSquareTest(counts,0.0002));assertTrue(""chi-square test accept"",!testStatistic.chiSquareTest(counts,0.0001));long[][]counts2={{10,15},{30,40},{60,90}};assertEquals(""chi-square test statistic"",0.168965517241,testStatistic.chiSquare(counts2),1E-9);assertEquals(""chi-square p-value"",0.918987499852,testStatistic.chiSquareTest(counts2),1E-9);assertTrue(""chi-square test accept"",!testStatistic.chiSquareTest(counts2,0.1));long[][]counts3={{40,22,43},{91,21,28},{60,10}};try {testStatistic.chiSquare(counts3);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}long[][]counts4={{40,22,43}};try {testStatistic.chiSquare(counts4);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}long[][]counts5={{40},{40},{30},{10}};try {testStatistic.chiSquare(counts5);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}long[][]counts6={{10,-2},{30,40},{60,90}};try {testStatistic.chiSquare(counts6);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}try {testStatistic.chiSquareTest(counts,0);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareLargeTestStatistic",0,"public void testChiSquareLargeTestStatistic()throws Exception {double[]exp=new double[]{3389119.5,649136.6,285745.4,25357364.76,11291189.78,543628.0,232921.0,437665.75};long[]obs=new long[]{2372383,584222,257170,17750155,7903832,489265,209628,393899};org.apache.commons.math.stat.inference.ChiSquareTestImpl csti=new org.apache.commons.math.stat.inference.ChiSquareTestImpl();double cst=csti.chiSquareTest(exp,obs);assertEquals(""chi-square p-value"",0.0,cst,1E-3);assertEquals(""chi-square test statistic"",114875.90421929007,testStatistic.chiSquare(exp,obs),1E-9);}"
"org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareZeroCount",0,"/** * Contingency table containing zeros - PR # 32531 */public void testChiSquareZeroCount()throws Exception {long[][]counts={{40,0,4},{91,1,2},{60,2,0}};assertEquals(""chi-square test statistic"",9.67444662263,testStatistic.chiSquare(counts),1E-9);assertEquals(""chi-square p-value"",0.0462835770603,testStatistic.chiSquareTest(counts),1E-9);}"
"org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonEqualCounts",0,"/** * Target values verified using DATAPLOT version 2006.3 */public void testChiSquareDataSetsComparisonEqualCounts()throws Exception {long[]observed1={10,12,12,10};long[]observed2={5,15,14,10};assertEquals(""chi-square p value"",0.541096,testStatistic.chiSquareTestDataSetsComparison(observed1,observed2),1E-6);assertEquals(""chi-square test statistic"",2.153846,testStatistic.chiSquareDataSetsComparison(observed1,observed2),1E-6);assertFalse(""chi-square test result"",testStatistic.chiSquareTestDataSetsComparison(observed1,observed2,0.4));}"
"org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonUnEqualCounts",0,"/** * Target values verified using DATAPLOT version 2006.3 */public void testChiSquareDataSetsComparisonUnEqualCounts()throws Exception {long[]observed1={10,12,12,10,15};long[]observed2={15,10,10,15,5};assertEquals(""chi-square p value"",0.124115,testStatistic.chiSquareTestDataSetsComparison(observed1,observed2),1E-6);assertEquals(""chi-square test statistic"",7.232189,testStatistic.chiSquareDataSetsComparison(observed1,observed2),1E-6);assertTrue(""chi-square test result"",testStatistic.chiSquareTestDataSetsComparison(observed1,observed2,0.13));assertFalse(""chi-square test result"",testStatistic.chiSquareTestDataSetsComparison(observed1,observed2,0.12));}"
"org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonBadCounts",0,"public void testChiSquareDataSetsComparisonBadCounts()throws Exception {long[]observed1={10,-1,12,10,15};long[]observed2={15,10,10,15,5};try {testStatistic.chiSquareTestDataSetsComparison(observed1,observed2);fail(""Expecting IllegalArgumentException - negative count"");}catch(IllegalArgumentException ex){}long[]observed3={10,0,12,10,15};long[]observed4={15,0,10,15,5};try {testStatistic.chiSquareTestDataSetsComparison(observed3,observed4);fail(""Expecting IllegalArgumentException - double 0's"");}catch(IllegalArgumentException ex){}long[]observed5={10,10,12,10,15};long[]observed6={0,0,0,0,0};try {testStatistic.chiSquareTestDataSetsComparison(observed5,observed6);fail(""Expecting IllegalArgumentException - vanishing counts"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testSimpleNoDecimals",0,"public void testSimpleNoDecimals(){Complex c=new Complex(1,1);String expected=""1 + 1i"";String actual=complexFormat.format(c);assertEquals(expected,actual);}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testSimpleWithDecimals",0,"public void testSimpleWithDecimals(){Complex c=new Complex(1.23,1.43);String expected=""1"" + getDecimalCharacter()+ ""23 + 1""+ getDecimalCharacter()+ ""43i"";String actual=complexFormat.format(c);assertEquals(expected,actual);}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testSimpleWithDecimalsTrunc",0,"public void testSimpleWithDecimalsTrunc(){Complex c=new Complex(1.2323,1.4343);String expected=""1"" + getDecimalCharacter()+ ""23 + 1""+ getDecimalCharacter()+ ""43i"";String actual=complexFormat.format(c);assertEquals(expected,actual);}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testNegativeReal",0,"public void testNegativeReal(){Complex c=new Complex(-1.2323,1.4343);String expected=""-1"" + getDecimalCharacter()+ ""23 + 1""+ getDecimalCharacter()+ ""43i"";String actual=complexFormat.format(c);assertEquals(expected,actual);}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testNegativeImaginary",0,"public void testNegativeImaginary(){Complex c=new Complex(1.2323,-1.4343);String expected=""1"" + getDecimalCharacter()+ ""23 - 1""+ getDecimalCharacter()+ ""43i"";String actual=complexFormat.format(c);assertEquals(expected,actual);}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testNegativeBoth",0,"public void testNegativeBoth(){Complex c=new Complex(-1.2323,-1.4343);String expected=""-1"" + getDecimalCharacter()+ ""23 - 1""+ getDecimalCharacter()+ ""43i"";String actual=complexFormat.format(c);assertEquals(expected,actual);}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testZeroReal",0,"public void testZeroReal(){Complex c=new Complex(0.0,-1.4343);String expected=""0 - 1"" + getDecimalCharacter()+ ""43i"";String actual=complexFormat.format(c);assertEquals(expected,actual);}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testZeroImaginary",0,"public void testZeroImaginary(){Complex c=new Complex(30.233,0);String expected=""30"" + getDecimalCharacter()+ ""23"";String actual=complexFormat.format(c);assertEquals(expected,actual);}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testDifferentImaginaryChar",0,"public void testDifferentImaginaryChar(){Complex c=new Complex(1,1);String expected=""1 + 1j"";String actual=complexFormatJ.format(c);assertEquals(expected,actual);}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testStaticFormatComplex",0,"public void testStaticFormatComplex(){Locale defaultLocal=Locale.getDefault();Locale.setDefault(getLocale());Complex c=new Complex(232.222,-342.33);String expected=""232"" + getDecimalCharacter()+ ""22 - 342""+ getDecimalCharacter()+ ""33i"";String actual=ComplexFormat.formatComplex(c);assertEquals(expected,actual);Locale.setDefault(defaultLocal);}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testNan",0,"public void testNan(){Complex c=new Complex(Double.NaN,Double.NaN);String expected=""(NaN)+ (NaN)i"";String actual=complexFormat.format(c);assertEquals(expected,actual);}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testPositiveInfinity",0,"public void testPositiveInfinity(){Complex c=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);String expected=""(Infinity)+ (Infinity)i"";String actual=complexFormat.format(c);assertEquals(expected,actual);}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testNegativeInfinity",0,"public void testNegativeInfinity(){Complex c=new Complex(Double.NEGATIVE_INFINITY,Double.NEGATIVE_INFINITY);String expected=""(-Infinity)- (Infinity)i"";String actual=complexFormat.format(c);assertEquals(expected,actual);}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testParseSimpleNoDecimals",0,"public void testParseSimpleNoDecimals(){String source=""1 + 1i"";Complex expected=new Complex(1,1);try {Complex actual=(Complex)complexFormat.parseObject(source);assertEquals(expected,actual);}catch(ParseException ex){fail(ex.getMessage());}}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testParseSimpleWithDecimals",0,"public void testParseSimpleWithDecimals(){String source=""1"" + getDecimalCharacter()+ ""23 + 1""+ getDecimalCharacter()+ ""43i"";Complex expected=new Complex(1.23,1.43);try {Complex actual=(Complex)complexFormat.parseObject(source);assertEquals(expected,actual);}catch(ParseException ex){fail(ex.getMessage());}}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testParseSimpleWithDecimalsTrunc",0,"public void testParseSimpleWithDecimalsTrunc(){String source=""1"" + getDecimalCharacter()+ ""2323 + 1""+ getDecimalCharacter()+ ""4343i"";Complex expected=new Complex(1.2323,1.4343);try {Complex actual=(Complex)complexFormat.parseObject(source);assertEquals(expected,actual);}catch(ParseException ex){fail(ex.getMessage());}}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testParseNegativeReal",0,"public void testParseNegativeReal(){String source=""-1"" + getDecimalCharacter()+ ""2323 + 1""+ getDecimalCharacter()+ ""4343i"";Complex expected=new Complex(-1.2323,1.4343);try {Complex actual=(Complex)complexFormat.parseObject(source);assertEquals(expected,actual);}catch(ParseException ex){fail(ex.getMessage());}}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testParseNegativeImaginary",0,"public void testParseNegativeImaginary(){String source=""1"" + getDecimalCharacter()+ ""2323 - 1""+ getDecimalCharacter()+ ""4343i"";Complex expected=new Complex(1.2323,-1.4343);try {Complex actual=(Complex)complexFormat.parseObject(source);assertEquals(expected,actual);}catch(ParseException ex){fail(ex.getMessage());}}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testParseNegativeBoth",0,"public void testParseNegativeBoth(){String source=""-1"" + getDecimalCharacter()+ ""2323 - 1""+ getDecimalCharacter()+ ""4343i"";Complex expected=new Complex(-1.2323,-1.4343);try {Complex actual=(Complex)complexFormat.parseObject(source);assertEquals(expected,actual);}catch(ParseException ex){fail(ex.getMessage());}}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testParseZeroReal",0,"public void testParseZeroReal(){String source=""0"" + getDecimalCharacter()+ ""0 - 1""+ getDecimalCharacter()+ ""4343i"";Complex expected=new Complex(0.0,-1.4343);try {Complex actual=(Complex)complexFormat.parseObject(source);assertEquals(expected,actual);}catch(ParseException ex){fail(ex.getMessage());}}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testParseZeroImaginary",0,"public void testParseZeroImaginary(){String source=""-1"" + getDecimalCharacter()+ ""2323"";Complex expected=new Complex(-1.2323,0);try {Complex actual=(Complex)complexFormat.parseObject(source);assertEquals(expected,actual);}catch(ParseException ex){fail(ex.getMessage());}}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testParseDifferentImaginaryChar",0,"public void testParseDifferentImaginaryChar(){String source=""-1"" + getDecimalCharacter()+ ""2323 - 1""+ getDecimalCharacter()+ ""4343j"";Complex expected=new Complex(-1.2323,-1.4343);try {Complex actual=(Complex)complexFormatJ.parseObject(source);assertEquals(expected,actual);}catch(ParseException ex){fail(ex.getMessage());}}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testParseNan",0,"public void testParseNan(){String source=""(NaN)+ (NaN)i"";Complex expected=new Complex(Double.NaN,Double.NaN);try {Complex actual=(Complex)complexFormat.parseObject(source);assertEquals(expected,actual);}catch(ParseException ex){fail(ex.getMessage());}}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testParsePositiveInfinity",0,"public void testParsePositiveInfinity(){String source=""(Infinity)+ (Infinity)i"";Complex expected=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);try {Complex actual=(Complex)complexFormat.parseObject(source);assertEquals(expected,actual);}catch(ParseException ex){fail(ex.getMessage());}}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testPaseNegativeInfinity",0,"public void testPaseNegativeInfinity(){String source=""(-Infinity)- (Infinity)i"";Complex expected=new Complex(Double.NEGATIVE_INFINITY,Double.NEGATIVE_INFINITY);try {Complex actual=(Complex)complexFormat.parseObject(source);assertEquals(expected,actual);}catch(ParseException ex){fail(ex.getMessage());}}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testConstructorSingleFormat",0,"public void testConstructorSingleFormat(){NumberFormat nf=NumberFormat.getInstance();ComplexFormat cf=new ComplexFormat(nf);assertNotNull(cf);assertEquals(nf,cf.getRealFormat());}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testGetImaginaryFormat",0,"public void testGetImaginaryFormat(){NumberFormat nf=NumberFormat.getInstance();ComplexFormat cf=new ComplexFormat();assertNotSame(nf,cf.getImaginaryFormat());cf.setImaginaryFormat(nf);assertSame(nf,cf.getImaginaryFormat());}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testSetImaginaryFormatNull",0,"public void testSetImaginaryFormatNull(){try {ComplexFormat cf=new ComplexFormat();cf.setImaginaryFormat(null);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testSetRealFormatNull",0,"public void testSetRealFormatNull(){try {ComplexFormat cf=new ComplexFormat();cf.setRealFormat(null);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testGetRealFormat",0,"public void testGetRealFormat(){NumberFormat nf=NumberFormat.getInstance();ComplexFormat cf=new ComplexFormat();assertNotSame(nf,cf.getRealFormat());cf.setRealFormat(nf);assertSame(nf,cf.getRealFormat());}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testSetImaginaryCharacterNull",0,"public void testSetImaginaryCharacterNull(){try {ComplexFormat cf=new ComplexFormat();cf.setImaginaryCharacter(null);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testSetImaginaryCharacterEmpty",0,"public void testSetImaginaryCharacterEmpty(){try {ComplexFormat cf=new ComplexFormat();cf.setImaginaryCharacter("""");fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testFormatNumber",0,"public void testFormatNumber(){CompositeFormat cf=ComplexFormat.getInstance(getLocale());Double pi=Double.valueOf(Math.PI);String text=cf.format(pi);assertEquals(""3"" + getDecimalCharacter()+ ""14"",text);}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testFormatObject",0,"public void testFormatObject(){try {CompositeFormat cf=new ComplexFormat();Object object=new Object();cf.format(object);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.complex.FrenchComplexFormatTest.testForgottenImaginaryCharacter",0,"public void testForgottenImaginaryCharacter(){ParsePosition pos=new ParsePosition(0);assertNull(new ComplexFormat().parse(""1 + 1"",pos));assertEquals(5,pos.getErrorIndex());}"
"org.apache.commons.math.ode.ContinuousOutputModelTest.testBoundaries",0,"public void testBoundaries()throws DerivativeException,IntegratorException {integ.addStepHandler(new ContinuousOutputModel());integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);ContinuousOutputModel cm=(ContinuousOutputModel)integ.getStepHandlers().iterator().next();cm.setInterpolatedTime(2.0 * pb.getInitialTime()- pb.getFinalTime());cm.setInterpolatedTime(2.0 * pb.getFinalTime()- pb.getInitialTime());cm.setInterpolatedTime(0.5 * (pb.getFinalTime()+ pb.getInitialTime()));}"
"org.apache.commons.math.ode.ContinuousOutputModelTest.testRandomAccess",0,"public void testRandomAccess()throws DerivativeException,IntegratorException {ContinuousOutputModel cm=new ContinuousOutputModel();integ.addStepHandler(cm);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Random random=new Random(347588535632l);double maxError=0.0;for (int i=0;i < 1000;++i){double r=random.nextDouble();double time=r * pb.getInitialTime()+ (1.0 - r)* pb.getFinalTime();cm.setInterpolatedTime(time);double[]interpolatedY=cm.getInterpolatedState();double[]theoreticalY=pb.computeTheoreticalState(time);double dx=interpolatedY[0]- theoreticalY[0];double dy=interpolatedY[1]- theoreticalY[1];double error=dx * dx + dy * dy;if (error > maxError){maxError=error;}}assertTrue(maxError < 1.0e-9);}"
"org.apache.commons.math.ode.ContinuousOutputModelTest.testModelsMerging",0,"public void testModelsMerging()throws DerivativeException,IntegratorException {FirstOrderDifferentialEquations problem=new FirstOrderDifferentialEquations(){private static final long serialVersionUID=2472449657345878299L;public void computeDerivatives(double t,double[]y,double[]dot)throws DerivativeException {dot[0]=-y[1];dot[1]=y[0];}public int getDimension(){return 2;}};ContinuousOutputModel cm1=new ContinuousOutputModel();FirstOrderIntegrator integ1=new DormandPrince853Integrator(0,1.0,1.0e-8,1.0e-8);integ1.addStepHandler(cm1);integ1.integrate(problem,Math.PI,new double[]{-1.0,0.0},0,new double[2]);ContinuousOutputModel cm2=new ContinuousOutputModel();FirstOrderIntegrator integ2=new DormandPrince853Integrator(0,0.1,1.0e-12,1.0e-12);integ2.addStepHandler(cm2);integ2.integrate(problem,2.0 * Math.PI,new double[]{1.0,0.0},Math.PI,new double[2]);ContinuousOutputModel cm=new ContinuousOutputModel();cm.append(cm2);cm.append(new ContinuousOutputModel());cm.append(cm1);assertEquals(2.0 * Math.PI,cm.getInitialTime(),1.0e-12);assertEquals(0,cm.getFinalTime(),1.0e-12);assertEquals(cm.getFinalTime(),cm.getInterpolatedTime(),1.0e-12);for (double t=0;t < 2.0 * Math.PI;t+=0.1){cm.setInterpolatedTime(t);double[]y=cm.getInterpolatedState();assertEquals(Math.cos(t),y[0],1.0e-7);assertEquals(Math.sin(t),y[1],1.0e-7);}}"
"org.apache.commons.math.ode.ContinuousOutputModelTest.testErrorConditions",0,"public void testErrorConditions()throws DerivativeException {ContinuousOutputModel cm=new ContinuousOutputModel();cm.handleStep(buildInterpolator(0,new double[]{0.0,1.0,-2.0},1),true);assertTrue(checkAppendError(cm,1.0,new double[]{0.0,1.0},2.0));assertTrue(checkAppendError(cm,10.0,new double[]{0.0,1.0,-2.0},20.0));assertTrue(checkAppendError(cm,1.0,new double[]{0.0,1.0,-2.0},0.0));assertFalse(checkAppendError(cm,1.0,new double[]{0.0,1.0,-2.0},2.0));}"
"org.apache.commons.math.analysis.NevilleInterpolatorTest.testSinFunction",0,"/** * Test of interpolator for the sine function. <p> |sin^(n)(zeta)| <= 1.0,zeta in [0,2*PI]*/public void testSinFunction()throws MathException {UnivariateRealFunction f=new SinFunction();UnivariateRealInterpolator interpolator=new NevilleInterpolator();double x[],y[],z,expected,result,tolerance;int n=6;double min=0.0,max=2 * Math.PI;x=new double[n];y=new double[n];for (int i=0;i < n;i++){x[i]=min + i * (max - min)/ n;y[i]=f.value(x[i]);}double derivativebound=1.0;UnivariateRealFunction p=interpolator.interpolate(x,y);z=Math.PI / 4;expected=f.value(z);result=p.value(z);tolerance=Math.abs(derivativebound * partialerror(x,z));assertEquals(expected,result,tolerance);z=Math.PI * 1.5;expected=f.value(z);result=p.value(z);tolerance=Math.abs(derivativebound * partialerror(x,z));assertEquals(expected,result,tolerance);}"
"org.apache.commons.math.analysis.NevilleInterpolatorTest.testExpm1Function",0,"/** * Test of interpolator for the exponential function. <p> |expm1^(n)(zeta)| <= e,zeta in [-1,1]*/public void testExpm1Function()throws MathException {UnivariateRealFunction f=new Expm1Function();UnivariateRealInterpolator interpolator=new NevilleInterpolator();double x[],y[],z,expected,result,tolerance;int n=5;double min=-1.0,max=1.0;x=new double[n];y=new double[n];for (int i=0;i < n;i++){x[i]=min + i * (max - min)/ n;y[i]=f.value(x[i]);}double derivativebound=Math.E;UnivariateRealFunction p=interpolator.interpolate(x,y);z=0.0;expected=f.value(z);result=p.value(z);tolerance=Math.abs(derivativebound * partialerror(x,z));assertEquals(expected,result,tolerance);z=0.5;expected=f.value(z);result=p.value(z);tolerance=Math.abs(derivativebound * partialerror(x,z));assertEquals(expected,result,tolerance);z=-0.5;expected=f.value(z);result=p.value(z);tolerance=Math.abs(derivativebound * partialerror(x,z));assertEquals(expected,result,tolerance);}"
"org.apache.commons.math.analysis.NevilleInterpolatorTest.testParameters",0,"/** * Test of parameters for the interpolator.*/public void testParameters()throws Exception {UnivariateRealInterpolator interpolator=new NevilleInterpolator();try {double x[]={1.0,2.0,2.0,4.0};double y[]={0.0,4.0,4.0,2.5};UnivariateRealFunction p=interpolator.interpolate(x,y);p.value(0.0);fail(""Expecting MathException - bad abscissas array"");}catch(MathException ex){}}"
"org.apache.commons.math.stat.descriptive.moment.SkewnessTest.testNaN",0,"/** * Make sure Double.NaN is returned iff n < 3*/public void testNaN(){Skewness skew=new Skewness();assertTrue(Double.isNaN(skew.getResult()));skew.increment(1d);assertTrue(Double.isNaN(skew.getResult()));skew.increment(1d);assertTrue(Double.isNaN(skew.getResult()));skew.increment(1d);assertFalse(Double.isNaN(skew.getResult()));}"
"org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutAndGetWith0ExpectedSize",0,"public void testPutAndGetWith0ExpectedSize(){OpenIntToDoubleHashMap map=new OpenIntToDoubleHashMap(0);assertPutAndGet(map);}"
"org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutAndGetWithExpectedSize",0,"public void testPutAndGetWithExpectedSize(){OpenIntToDoubleHashMap map=new OpenIntToDoubleHashMap(500);assertPutAndGet(map);}"
"org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutAndGet",0,"public void testPutAndGet(){OpenIntToDoubleHashMap map=new OpenIntToDoubleHashMap();assertPutAndGet(map);}"
"org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutAbsentOnExisting",0,"public void testPutAbsentOnExisting(){OpenIntToDoubleHashMap map=createFromJavaMap();int size=javaMap.size();for(Map.Entry<Integer,Double> mapEntry : generateAbsent().entrySet()){map.put(mapEntry.getKey(),mapEntry.getValue());assertEquals(++size,map.size());assertEquals(mapEntry.getValue(),map.get(mapEntry.getKey()));}}"
"org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutOnExisting",0,"public void testPutOnExisting(){OpenIntToDoubleHashMap map=createFromJavaMap();for(Map.Entry<Integer,Double> mapEntry : javaMap.entrySet()){map.put(mapEntry.getKey(),mapEntry.getValue());assertEquals(javaMap.size(),map.size());assertEquals(mapEntry.getValue(),map.get(mapEntry.getKey()));}}"
"org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testGetAbsent",0,"public void testGetAbsent(){Map<Integer,Double> generated=generateAbsent();OpenIntToDoubleHashMap map=createFromJavaMap();for(Map.Entry<Integer,Double> mapEntry : generated.entrySet())assertTrue(Double.isNaN(map.get(mapEntry.getKey())));}"
"org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testGetFromEmpty",0,"public void testGetFromEmpty(){OpenIntToDoubleHashMap map=new OpenIntToDoubleHashMap();assertTrue(Double.isNaN(map.get(5)));assertTrue(Double.isNaN(map.get(0)));assertTrue(Double.isNaN(map.get(50)));}"
"org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemove",0,"public void testRemove(){OpenIntToDoubleHashMap map=createFromJavaMap();int mapSize=javaMap.size();assertEquals(mapSize,map.size());for(Map.Entry<Integer,Double> mapEntry : javaMap.entrySet()){map.remove(mapEntry.getKey());assertEquals(--mapSize,map.size());assertTrue(Double.isNaN(map.get(mapEntry.getKey())));}assertPutAndGet(map);}"
"org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemove2",0,"public void testRemove2(){OpenIntToDoubleHashMap map=createFromJavaMap();int mapSize=javaMap.size();int count=0;Set<Integer> keysInMap=new HashSet<Integer>(javaMap.keySet());for(Map.Entry<Integer,Double> mapEntry : javaMap.entrySet()){keysInMap.remove(mapEntry.getKey());map.remove(mapEntry.getKey());assertEquals(--mapSize,map.size());assertTrue(Double.isNaN(map.get(mapEntry.getKey())));if (count++ > 5)break;}assertPutAndGet(map,mapSize,keysInMap);}"
"org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty",0,"public void testRemoveFromEmpty(){OpenIntToDoubleHashMap map=new OpenIntToDoubleHashMap();assertTrue(Double.isNaN(map.remove(50)));}"
"org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveAbsent",0,"public void testRemoveAbsent(){Map<Integer,Double> generated=generateAbsent();OpenIntToDoubleHashMap map=createFromJavaMap();int mapSize=map.size();for(Map.Entry<Integer,Double> mapEntry : generated.entrySet()){map.remove(mapEntry.getKey());assertEquals(mapSize,map.size());assertTrue(Double.isNaN(map.get(mapEntry.getKey())));}}"
"org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testCopy",0,"public void testCopy(){OpenIntToDoubleHashMap copy=new OpenIntToDoubleHashMap(createFromJavaMap());assertEquals(javaMap.size(),copy.size());for(Map.Entry<Integer,Double> mapEntry : javaMap.entrySet())assertEquals(mapEntry.getValue(),copy.get(mapEntry.getKey()));}"
"org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testContainsKey",0,"public void testContainsKey(){OpenIntToDoubleHashMap map=createFromJavaMap();for(Map.Entry<Integer,Double> mapEntry : javaMap.entrySet()){assertTrue(map.containsKey(mapEntry.getKey()));}for(Map.Entry<Integer,Double> mapEntry : generateAbsent().entrySet()){assertFalse(map.containsKey(mapEntry.getKey()));}for(Map.Entry<Integer,Double> mapEntry : javaMap.entrySet()){int key=mapEntry.getKey();assertTrue(map.containsKey(key));map.remove(key);assertFalse(map.containsKey(key));}}"
"org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator",0,"public void testIterator(){OpenIntToDoubleHashMap map=createFromJavaMap();OpenIntToDoubleHashMap.Iterator iterator=map.iterator();for (int i=0;i < map.size();++i){assertTrue(iterator.hasNext());iterator.advance();int key=iterator.key();assertTrue(map.containsKey(key));assertEquals(javaMap.get(key),map.get(key),0);assertEquals(javaMap.get(key),iterator.value(),0);assertTrue(javaMap.containsKey(key));}assertFalse(iterator.hasNext());try {iterator.advance();fail(""an exception should have been thrown"");}catch(NoSuchElementException nsee){}}"
"org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testConcurrentModification",0,"public void testConcurrentModification(){OpenIntToDoubleHashMap map=createFromJavaMap();OpenIntToDoubleHashMap.Iterator iterator=map.iterator();map.put(3,3);try {iterator.advance();fail(""an exception should have been thrown"");}catch(ConcurrentModificationException cme){}}"
"org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions",0,"/** * Regression test for a bug in findInsertionIndex where the hashing in the second probing loop was inconsistent with the first causing duplicate keys after the right sequence of puts and removes.*/public void testPutKeysWithCollisions(){OpenIntToDoubleHashMap map=new OpenIntToDoubleHashMap();int key1=-1996012590;double value1=1.0;map.put(key1,value1);int key2=835099822;map.put(key2,value1);int key3=1008859686;map.put(key3,value1);assertEquals(value1,map.get(key3));assertEquals(3,map.size());map.remove(key2);double value2=2.0;map.put(key3,value2);assertEquals(value2,map.get(key3));assertEquals(2,map.size());}"
"org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2",0,"/** * Similar to testPutKeysWithCollisions()but exercises the codepaths in a slightly different manner.*/public void testPutKeysWithCollision2(){OpenIntToDoubleHashMap map=new OpenIntToDoubleHashMap();int key1=837989881;double value1=1.0;map.put(key1,value1);int key2=476463321;map.put(key2,value1);assertEquals(2,map.size());assertEquals(value1,map.get(key2));map.remove(key1);double value2=2.0;map.put(key2,value2);assertEquals(1,map.size());assertEquals(value2,map.get(key2));}"
"org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest.testSpecialValues",0,"public void testSpecialValues(){GeometricMean mean=new GeometricMean();assertTrue(Double.isNaN(mean.getResult()));mean.increment(1d);assertFalse(Double.isNaN(mean.getResult()));mean.increment(0d);assertEquals(0d,mean.getResult(),0);mean.increment(Double.POSITIVE_INFINITY);assertTrue(Double.isNaN(mean.getResult()));mean.clear();assertTrue(Double.isNaN(mean.getResult()));mean.increment(Double.POSITIVE_INFINITY);assertEquals(Double.POSITIVE_INFINITY,mean.getResult(),0);mean.increment(-2d);assertTrue(Double.isNaN(mean.getResult()));}"
"org.apache.commons.math.special.GammaTest.testRegularizedGammaNanPositive",0,"public void testRegularizedGammaNanPositive(){testRegularizedGamma(Double.NaN,Double.NaN,1.0);}"
"org.apache.commons.math.special.GammaTest.testRegularizedGammaPositiveNan",0,"public void testRegularizedGammaPositiveNan(){testRegularizedGamma(Double.NaN,1.0,Double.NaN);}"
"org.apache.commons.math.special.GammaTest.testRegularizedGammaNegativePositive",0,"public void testRegularizedGammaNegativePositive(){testRegularizedGamma(Double.NaN,-1.5,1.0);}"
"org.apache.commons.math.special.GammaTest.testRegularizedGammaPositiveNegative",0,"public void testRegularizedGammaPositiveNegative(){testRegularizedGamma(Double.NaN,1.0,-1.0);}"
"org.apache.commons.math.special.GammaTest.testRegularizedGammaZeroPositive",0,"public void testRegularizedGammaZeroPositive(){testRegularizedGamma(Double.NaN,0.0,1.0);}"
"org.apache.commons.math.special.GammaTest.testRegularizedGammaPositiveZero",0,"public void testRegularizedGammaPositiveZero(){testRegularizedGamma(0.0,1.0,0.0);}"
"org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive",0,"public void testRegularizedGammaPositivePositive(){testRegularizedGamma(0.632120558828558,1.0,1.0);}"
"org.apache.commons.math.special.GammaTest.testLogGammaNan",0,"public void testLogGammaNan(){testLogGamma(Double.NaN,Double.NaN);}"
"org.apache.commons.math.special.GammaTest.testLogGammaNegative",0,"public void testLogGammaNegative(){testLogGamma(Double.NaN,-1.0);}"
"org.apache.commons.math.special.GammaTest.testLogGammaZero",0,"public void testLogGammaZero(){testLogGamma(Double.NaN,0.0);}"
"org.apache.commons.math.special.GammaTest.testLogGammaPositive",0,"public void testLogGammaPositive(){testLogGamma(0.6931471805599457,3.0);}"
"org.apache.commons.math.estimation.WeightedMeasurementTest.testConstruction",0,"public void testConstruction(){WeightedMeasurement m=new MyMeasurement(3.0,theoretical()+ 0.1,this);checkValue(m.getWeight(),3.0);checkValue(m.getMeasuredValue(),theoretical()+ 0.1);}"
"org.apache.commons.math.estimation.WeightedMeasurementTest.testIgnored",0,"public void testIgnored(){WeightedMeasurement m=new MyMeasurement(3.0,theoretical()+ 0.1,this);assertTrue(!m.isIgnored());m.setIgnored(true);assertTrue(m.isIgnored());m.setIgnored(false);assertTrue(!m.isIgnored());}"
"org.apache.commons.math.estimation.WeightedMeasurementTest.testTheory",0,"public void testTheory(){WeightedMeasurement m=new MyMeasurement(3.0,theoretical()+ 0.1,this);checkValue(m.getTheoreticalValue(),theoretical());checkValue(m.getResidual(),0.1);double oldP1=p1.getEstimate();p1.setEstimate(oldP1 + m.getResidual()/ m.getPartial(p1));checkValue(m.getResidual(),0.0);p1.setEstimate(oldP1);checkValue(m.getResidual(),0.1);double oldP2=p2.getEstimate();p2.setEstimate(oldP2 + m.getResidual()/ m.getPartial(p2));checkValue(m.getResidual(),0.0);p2.setEstimate(oldP2);checkValue(m.getResidual(),0.1);}"
"org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest.testDimensionCheck",0,"public void testDimensionCheck(){try {TestProblem1 pb=new TestProblem1();AdaptiveStepsizeIntegrator integrator=new GraggBulirschStoerIntegrator(0.0,1.0,1.0e-10,1.0e-10);integrator.integrate(pb,0.0,new double[pb.getDimension()+ 10],1.0,new double[pb.getDimension()+ 10]);fail(""an exception should have been thrown"");}catch(DerivativeException de){fail(""wrong exception caught"");}catch(IntegratorException ie){}}"
"org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest.testNullIntervalCheck",0,"public void testNullIntervalCheck(){try {TestProblem1 pb=new TestProblem1();GraggBulirschStoerIntegrator integrator=new GraggBulirschStoerIntegrator(0.0,1.0,1.0e-10,1.0e-10);integrator.integrate(pb,0.0,new double[pb.getDimension()],0.0,new double[pb.getDimension()]);fail(""an exception should have been thrown"");}catch(DerivativeException de){fail(""wrong exception caught"");}catch(IntegratorException ie){}}"
"org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest.testMinStep",0,"public void testMinStep()throws DerivativeException,IntegratorException {try {TestProblem5 pb=new TestProblem5();double minStep=0.1 * Math.abs(pb.getFinalTime()- pb.getInitialTime());double maxStep=Math.abs(pb.getFinalTime()- pb.getInitialTime());double[]vecAbsoluteTolerance={1.0e-20,1.0e-21};double[]vecRelativeTolerance={1.0e-20,1.0e-21};FirstOrderIntegrator integ=new GraggBulirschStoerIntegrator(minStep,maxStep,vecAbsoluteTolerance,vecRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);fail(""an exception should have been thrown"");}catch(DerivativeException de){fail(""wrong exception caught"");}catch(IntegratorException ie){}}"
"org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest.testBackward",0,"public void testBackward()throws DerivativeException,IntegratorException {TestProblem5 pb=new TestProblem5();double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=0.01 * scalAbsoluteTolerance;FirstOrderIntegrator integ=new GraggBulirschStoerIntegrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.getLastError()< 9.0e-10);assertTrue(handler.getMaximalValueError()< 9.0e-10);assertEquals(0,handler.getMaximalTimeError(),1.0e-12);assertEquals(""Gragg-Bulirsch-Stoer"",integ.getName());}"
"org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest.testIncreasingTolerance",0,"public void testIncreasingTolerance()throws DerivativeException,IntegratorException {int previousCalls=Integer.MAX_VALUE;for (int i=-12;i < -4;++i){TestProblem1 pb=new TestProblem1();double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double absTolerance=Math.pow(10.0,i);double relTolerance=absTolerance;FirstOrderIntegrator integ=new GraggBulirschStoerIntegrator(minStep,maxStep,absTolerance,relTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);double ratio=handler.getMaximalValueError()/ absTolerance;assertTrue(ratio < 2.4);assertTrue(ratio > 0.02);assertEquals(0,handler.getMaximalTimeError(),1.0e-12);int calls=pb.getCalls();assertTrue(calls <= previousCalls);previousCalls=calls;}}"
"org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest.testIntegratorControls",0,"public void testIntegratorControls(){}"
"org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest.testEvents",0,"public void testEvents()throws DerivativeException,IntegratorException {TestProblem4 pb=new TestProblem4();double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-10;double scalRelativeTolerance=0.01 * scalAbsoluteTolerance;FirstOrderIntegrator integ=new GraggBulirschStoerIntegrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);EventHandler[]functions=pb.getEventsHandlers();for (int l=0;l < functions.length;++l){integ.addEventHandler(functions[l],Double.POSITIVE_INFINITY,1.0e-8 * maxStep,1000);}assertEquals(functions.length,integ.getEventHandlers().size());integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.getMaximalValueError()< 5.0e-8);assertEquals(0,handler.getMaximalTimeError(),1.0e-12);assertEquals(12.0,handler.getLastTime(),1.0e-8 * maxStep);integ.clearEventHandlers();assertEquals(0,integ.getEventHandlers().size());}"
"org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest.testKepler",0,"public void testKepler()throws DerivativeException,IntegratorException {final TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double absTolerance=1.0e-6;double relTolerance=1.0e-6;FirstOrderIntegrator integ=new GraggBulirschStoerIntegrator(minStep,maxStep,absTolerance,relTolerance);integ.addStepHandler(new KeplerStepHandler(pb));integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(pb.getCalls()< 2150);}"
"org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest.testVariableSteps",0,"public void testVariableSteps()throws DerivativeException,IntegratorException {final TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double absTolerance=1.0e-8;double relTolerance=1.0e-8;FirstOrderIntegrator integ=new GraggBulirschStoerIntegrator(minStep,maxStep,absTolerance,relTolerance);integ.addStepHandler(new VariableStepHandler());double stopTime=integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertEquals(pb.getFinalTime(),stopTime,1.0e-10);assertEquals(""Gragg-Bulirsch-Stoer"",integ.getName());}"
"org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest.testUnstableDerivative",0,"public void testUnstableDerivative()throws DerivativeException,IntegratorException {final StepProblem stepProblem=new StepProblem(0.0,1.0,2.0);FirstOrderIntegrator integ=new GraggBulirschStoerIntegrator(0.1,10,1.0e-12,0.0);integ.addEventHandler(stepProblem,1.0,1.0e-12,1000);double[]y={Double.NaN};integ.integrate(stepProblem,0.0,new double[]{0.0},10.0,y);assertEquals(8.0,y[0],1.0e-12);}"
"org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testDimensionCheck",0,"public void testDimensionCheck(){try {TestProblem1 pb=new TestProblem1();new GillIntegrator(0.01).integrate(pb,0.0,new double[pb.getDimension()+ 10],1.0,new double[pb.getDimension()+ 10]);fail(""an exception should have been thrown"");}catch(DerivativeException de){fail(""wrong exception caught"");}catch(IntegratorException ie){}}"
"org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testDecreasingSteps",0,"public void testDecreasingSteps()throws DerivativeException,IntegratorException {TestProblemAbstract[]problems=TestProblemFactory.getProblems();for (int k=0;k < problems.length;++k){double previousError=Double.NaN;for (int i=5;i < 10;++i){TestProblemAbstract pb=(TestProblemAbstract)problems[k].clone();double step=(pb.getFinalTime()- pb.getInitialTime())* Math.pow(2.0,-i);FirstOrderIntegrator integ=new GillIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);EventHandler[]functions=pb.getEventsHandlers();for (int l=0;l < functions.length;++l){integ.addEventHandler(functions[l],Double.POSITIVE_INFINITY,1.0e-6 * step,1000);}double stopTime=integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);if (functions.length == 0){assertEquals(pb.getFinalTime(),stopTime,1.0e-10);}double error=handler.getMaximalValueError();if (i > 5){assertTrue(error < Math.abs(previousError));}previousError=error;assertEquals(0,handler.getMaximalTimeError(),1.0e-12);}}}"
"org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testSmallStep",0,"public void testSmallStep()throws DerivativeException,IntegratorException {TestProblem1 pb=new TestProblem1();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.001;FirstOrderIntegrator integ=new GillIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.getLastError()< 2.0e-13);assertTrue(handler.getMaximalValueError()< 4.0e-12);assertEquals(0,handler.getMaximalTimeError(),1.0e-12);assertEquals(""Gill"",integ.getName());}"
"org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testBigStep",0,"public void testBigStep()throws DerivativeException,IntegratorException {TestProblem1 pb=new TestProblem1();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.2;FirstOrderIntegrator integ=new GillIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.getLastError()> 0.0004);assertTrue(handler.getMaximalValueError()> 0.005);assertEquals(0,handler.getMaximalTimeError(),1.0e-12);}"
"org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testBackward",0,"public void testBackward()throws DerivativeException,IntegratorException {TestProblem5 pb=new TestProblem5();double step=Math.abs(pb.getFinalTime()- pb.getInitialTime())* 0.001;FirstOrderIntegrator integ=new GillIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.getLastError()< 5.0e-10);assertTrue(handler.getMaximalValueError()< 7.0e-10);assertEquals(0,handler.getMaximalTimeError(),1.0e-12);assertEquals(""Gill"",integ.getName());}"
"org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testKepler",0,"public void testKepler()throws DerivativeException,IntegratorException {final TestProblem3 pb=new TestProblem3(0.9);double step=(pb.getFinalTime()- pb.getInitialTime())* 0.0003;FirstOrderIntegrator integ=new GillIntegrator(step);integ.addStepHandler(new KeplerStepHandler(pb));integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);}"
"org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testUnstableDerivative",0,"public void testUnstableDerivative()throws DerivativeException,IntegratorException {final StepProblem stepProblem=new StepProblem(0.0,1.0,2.0);FirstOrderIntegrator integ=new GillIntegrator(0.3);integ.addEventHandler(stepProblem,1.0,1.0e-12,1000);double[]y={Double.NaN};integ.integrate(stepProblem,0.0,new double[]{0.0},10.0,y);assertEquals(8.0,y[0],1.0e-12);}"
"org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testStepSize",0,"public void testStepSize()throws DerivativeException,IntegratorException {final double step=1.23456;FirstOrderIntegrator integ=new GillIntegrator(step);integ.addStepHandler(new StepHandler(){private static final long serialVersionUID=0L;public void handleStep(StepInterpolator interpolator,boolean isLast){if (!isLast){assertEquals(step,interpolator.getCurrentTime()- interpolator.getPreviousTime(),1.0e-12);}}public boolean requiresDenseOutput(){return false;}public void reset(){}});integ.integrate(new FirstOrderDifferentialEquations(){private static final long serialVersionUID=0L;public void computeDerivatives(double t,double[]y,double[]dot){dot[0]=1.0;}public int getDimension(){return 1;}},0.0,new double[]{0.0},5.0,new double[1]);}"
"org.apache.commons.math.analysis.TrapezoidIntegratorTest.testSinFunction",0,"/** * Test of integrator for the sine function.*/public void testSinFunction()throws MathException {UnivariateRealFunction f=new SinFunction();UnivariateRealIntegrator integrator=new TrapezoidIntegrator(f);double min,max,expected,result,tolerance;min=0;max=Math.PI;expected=2;tolerance=Math.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(min,max);assertEquals(expected,result,tolerance);min=-Math.PI / 3;max=0;expected=-0.5;tolerance=Math.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(min,max);assertEquals(expected,result,tolerance);}"
"org.apache.commons.math.analysis.TrapezoidIntegratorTest.testQuinticFunction",0,"/** * Test of integrator for the quintic function.*/public void testQuinticFunction()throws MathException {UnivariateRealFunction f=new QuinticFunction();UnivariateRealIntegrator integrator=new TrapezoidIntegrator(f);double min,max,expected,result,tolerance;min=0;max=1;expected=-1.0 / 48;tolerance=Math.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(min,max);assertEquals(expected,result,tolerance);min=0;max=0.5;expected=11.0 / 768;tolerance=Math.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(min,max);assertEquals(expected,result,tolerance);min=-1;max=4;expected=2048 / 3.0 - 78 + 1.0 / 48;tolerance=Math.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(min,max);assertEquals(expected,result,tolerance);}"
"org.apache.commons.math.analysis.TrapezoidIntegratorTest.testParameters",0,"/** * Test of parameters for the integrator.*/public void testParameters()throws Exception {UnivariateRealFunction f=new SinFunction();UnivariateRealIntegrator integrator=new TrapezoidIntegrator(f);try {integrator.integrate(1,-1);fail(""Expecting IllegalArgumentException - bad interval"");}catch(IllegalArgumentException ex){}try {integrator.setMinimalIterationCount(5);integrator.setMaximalIterationCount(4);integrator.integrate(-1,1);fail(""Expecting IllegalArgumentException - bad iteration limits"");}catch(IllegalArgumentException ex){}try {integrator.setMinimalIterationCount(10);integrator.setMaximalIterationCount(99);integrator.integrate(-1,1);fail(""Expecting IllegalArgumentException - bad iteration limits"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.util.TransformerMapTest.testPutTransformer",0,"/** */public void testPutTransformer(){NumberTransformer expected=new DefaultTransformer();TransformerMap map=new TransformerMap();map.putTransformer(TransformerMapTest.class,expected);assertEquals(expected,map.getTransformer(TransformerMapTest.class));}"
"org.apache.commons.math.util.TransformerMapTest.testContainsClass",0,"/** */public void testContainsClass(){NumberTransformer expected=new DefaultTransformer();TransformerMap map=new TransformerMap();map.putTransformer(TransformerMapTest.class,expected);assertTrue(map.containsClass(TransformerMapTest.class));}"
"org.apache.commons.math.util.TransformerMapTest.testContainsTransformer",0,"/** */public void testContainsTransformer(){NumberTransformer expected=new DefaultTransformer();TransformerMap map=new TransformerMap();map.putTransformer(TransformerMapTest.class,expected);assertTrue(map.containsTransformer(expected));}"
"org.apache.commons.math.util.TransformerMapTest.testRemoveTransformer",0,"/** */public void testRemoveTransformer(){NumberTransformer expected=new DefaultTransformer();TransformerMap map=new TransformerMap();map.putTransformer(TransformerMapTest.class,expected);assertTrue(map.containsClass(TransformerMapTest.class));assertTrue(map.containsTransformer(expected));map.removeTransformer(TransformerMapTest.class);assertFalse(map.containsClass(TransformerMapTest.class));assertFalse(map.containsTransformer(expected));}"
"org.apache.commons.math.util.TransformerMapTest.testClear",0,"/** */public void testClear(){NumberTransformer expected=new DefaultTransformer();TransformerMap map=new TransformerMap();map.putTransformer(TransformerMapTest.class,expected);assertTrue(map.containsClass(TransformerMapTest.class));map.clear();assertFalse(map.containsClass(TransformerMapTest.class));}"
"org.apache.commons.math.util.TransformerMapTest.testClasses",0,"/** */public void testClasses(){NumberTransformer expected=new DefaultTransformer();TransformerMap map=new TransformerMap();map.putTransformer(TransformerMapTest.class,expected);assertTrue(map.classes().contains(TransformerMapTest.class));}"
"org.apache.commons.math.util.TransformerMapTest.testTransformers",0,"/** */public void testTransformers(){NumberTransformer expected=new DefaultTransformer();TransformerMap map=new TransformerMap();map.putTransformer(TransformerMapTest.class,expected);assertTrue(map.transformers().contains(expected));}"
"org.apache.commons.math.linear.RealMatrixImplTest.testDimensions",0,"/** * test dimensions */public void testDimensions(){RealMatrixImpl m=new RealMatrixImpl(testData);RealMatrixImpl m2=new RealMatrixImpl(testData2);assertEquals(""testData row dimension"",3,m.getRowDimension());assertEquals(""testData column dimension"",3,m.getColumnDimension());assertTrue(""testData is square"",m.isSquare());assertEquals(""testData2 row dimension"",m2.getRowDimension(),2);assertEquals(""testData2 column dimension"",m2.getColumnDimension(),3);assertTrue(""testData2 is not square"",!m2.isSquare());}"
"org.apache.commons.math.linear.RealMatrixImplTest.testCopyFunctions",0,"/** * test copy functions */public void testCopyFunctions(){RealMatrixImpl m1=new RealMatrixImpl(testData);RealMatrixImpl m2=new RealMatrixImpl(m1.getData());assertEquals(m2,m1);RealMatrixImpl m3=new RealMatrixImpl(testData);RealMatrixImpl m4=new RealMatrixImpl(m3.getData(),false);assertEquals(m4,m3);}"
"org.apache.commons.math.linear.RealMatrixImplTest.testAdd",0,"/** * test add */public void testAdd(){RealMatrixImpl m=new RealMatrixImpl(testData);RealMatrixImpl mInv=new RealMatrixImpl(testDataInv);RealMatrix mPlusMInv=m.add(mInv);double[][]sumEntries=mPlusMInv.getData();for (int row=0;row < m.getRowDimension();row++){for (int col=0;col < m.getColumnDimension();col++){assertEquals(""sum entry entry"",testDataPlusInv[row][col],sumEntries[row][col],entryTolerance);}}}"
"org.apache.commons.math.linear.RealMatrixImplTest.testAddFail",0,"/** * test add failure */public void testAddFail(){RealMatrixImpl m=new RealMatrixImpl(testData);RealMatrixImpl m2=new RealMatrixImpl(testData2);try {m.add(m2);fail(""IllegalArgumentException expected"");}catch(IllegalArgumentException ex){;}}"
"org.apache.commons.math.linear.RealMatrixImplTest.testNorm",0,"/** * test norm */public void testNorm(){RealMatrixImpl m=new RealMatrixImpl(testData);RealMatrixImpl m2=new RealMatrixImpl(testData2);assertEquals(""testData norm"",14d,m.getNorm(),entryTolerance);assertEquals(""testData2 norm"",7d,m2.getNorm(),entryTolerance);}"
"org.apache.commons.math.linear.RealMatrixImplTest.testFrobeniusNorm",0,"/** * test Frobenius norm */public void testFrobeniusNorm(){RealMatrixImpl m=new RealMatrixImpl(testData);RealMatrixImpl m2=new RealMatrixImpl(testData2);assertEquals(""testData Frobenius norm"",Math.sqrt(117.0),m.getFrobeniusNorm(),entryTolerance);assertEquals(""testData2 Frobenius norm"",Math.sqrt(52.0),m2.getFrobeniusNorm(),entryTolerance);}"
"org.apache.commons.math.linear.RealMatrixImplTest.testPlusMinus",0,"/** * test m-n = m + -n */public void testPlusMinus(){RealMatrixImpl m=new RealMatrixImpl(testData);RealMatrixImpl m2=new RealMatrixImpl(testDataInv);assertClose(""m-n = m + -n"",m.subtract(m2),m2.scalarMultiply(-1d).add(m),entryTolerance);try {m.subtract(new RealMatrixImpl(testData2));fail(""Expecting illegalArgumentException"");}catch(IllegalArgumentException ex){;}}"
"org.apache.commons.math.linear.RealMatrixImplTest.testMultiply",0,"/** * test multiply */public void testMultiply(){RealMatrixImpl m=new RealMatrixImpl(testData);RealMatrixImpl mInv=new RealMatrixImpl(testDataInv);RealMatrixImpl identity=new RealMatrixImpl(id);RealMatrixImpl m2=new RealMatrixImpl(testData2);assertClose(""inverse multiply"",m.multiply(mInv),identity,entryTolerance);assertClose(""inverse multiply"",mInv.multiply(m),identity,entryTolerance);assertClose(""identity multiply"",m.multiply(identity),m,entryTolerance);assertClose(""identity multiply"",identity.multiply(mInv),mInv,entryTolerance);assertClose(""identity multiply"",m2.multiply(identity),m2,entryTolerance);try {m.multiply(new RealMatrixImpl(bigSingular));fail(""Expecting illegalArgumentException"");}catch(IllegalArgumentException ex){;}}"
"org.apache.commons.math.linear.RealMatrixImplTest.testMultiply2",0,"public void testMultiply2(){RealMatrix m3=new RealMatrixImpl(d3);RealMatrix m4=new RealMatrixImpl(d4);RealMatrix m5=new RealMatrixImpl(d5);assertClose(""m3*m4=m5"",m3.multiply(m4),m5,entryTolerance);}"
"org.apache.commons.math.linear.RealMatrixImplTest.testTrace",0,"/** * test trace */public void testTrace(){RealMatrix m=new RealMatrixImpl(id);assertEquals(""identity trace"",3d,m.getTrace(),entryTolerance);m=new RealMatrixImpl(testData2);try {m.getTrace();fail(""Expecting NonSquareMatrixException"");}catch(NonSquareMatrixException ex){;}}"
"org.apache.commons.math.linear.RealMatrixImplTest.testScalarAdd",0,"/** * test sclarAdd */public void testScalarAdd(){RealMatrix m=new RealMatrixImpl(testData);assertClose(""scalar add"",new RealMatrixImpl(testDataPlus2),m.scalarAdd(2d),entryTolerance);}"
"org.apache.commons.math.linear.RealMatrixImplTest.testOperate",0,"/** * test operate */public void testOperate(){RealMatrix m=new RealMatrixImpl(id);assertClose(""identity operate"",testVector,m.operate(testVector),entryTolerance);assertClose(""identity operate"",testVector,m.operate(new RealVectorImpl(testVector)).getData(),entryTolerance);m=new RealMatrixImpl(bigSingular);try {m.operate(testVector);fail(""Expecting illegalArgumentException"");}catch(IllegalArgumentException ex){;}}"
"org.apache.commons.math.linear.RealMatrixImplTest.testMath209",0,"/** * test issue MATH-209 */public void testMath209(){RealMatrix a=new RealMatrixImpl(new double[][]{{1,2},{3,4},{5,6}},false);double[]b=a.operate(new double[]{1,1});assertEquals(a.getRowDimension(),b.length);assertEquals(3.0,b[0],1.0e-12);assertEquals(7.0,b[1],1.0e-12);assertEquals(11.0,b[2],1.0e-12);}"
"org.apache.commons.math.linear.RealMatrixImplTest.testTranspose",0,"/** * test transpose */public void testTranspose(){RealMatrix m=new RealMatrixImpl(testData);RealMatrix mIT=new LUDecompositionImpl(m).getSolver().getInverse().transpose();RealMatrix mTI=new LUDecompositionImpl(m.transpose()).getSolver().getInverse();assertClose(""inverse-transpose"",mIT,mTI,normTolerance);m=new RealMatrixImpl(testData2);RealMatrix mt=new RealMatrixImpl(testData2T);assertClose(""transpose"",mt,m.transpose(),normTolerance);}"
"org.apache.commons.math.linear.RealMatrixImplTest.testPremultiplyVector",0,"/** * test preMultiply by vector */public void testPremultiplyVector(){RealMatrix m=new RealMatrixImpl(testData);assertClose(""premultiply"",m.preMultiply(testVector),preMultTest,normTolerance);assertClose(""premultiply"",m.preMultiply(new RealVectorImpl(testVector).getData()),preMultTest,normTolerance);m=new RealMatrixImpl(bigSingular);try {m.preMultiply(testVector);fail(""expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){;}}"
"org.apache.commons.math.linear.RealMatrixImplTest.testPremultiply",0,"public void testPremultiply(){RealMatrix m3=new RealMatrixImpl(d3);RealMatrix m4=new RealMatrixImpl(d4);RealMatrix m5=new RealMatrixImpl(d5);assertClose(""m3*m4=m5"",m4.preMultiply(m3),m5,entryTolerance);RealMatrixImpl m=new RealMatrixImpl(testData);RealMatrixImpl mInv=new RealMatrixImpl(testDataInv);RealMatrixImpl identity=new RealMatrixImpl(id);assertClose(""inverse multiply"",m.preMultiply(mInv),identity,entryTolerance);assertClose(""inverse multiply"",mInv.preMultiply(m),identity,entryTolerance);assertClose(""identity multiply"",m.preMultiply(identity),m,entryTolerance);assertClose(""identity multiply"",identity.preMultiply(mInv),mInv,entryTolerance);try {m.preMultiply(new RealMatrixImpl(bigSingular));fail(""Expecting illegalArgumentException"");}catch(IllegalArgumentException ex){;}}"
"org.apache.commons.math.linear.RealMatrixImplTest.testGetVectors",0,"public void testGetVectors(){RealMatrix m=new RealMatrixImpl(testData);assertClose(""get row"",m.getRow(0),testDataRow1,entryTolerance);assertClose(""get col"",m.getColumn(2),testDataCol3,entryTolerance);try {m.getRow(10);fail(""expecting MatrixIndexException"");}catch(MatrixIndexException ex){;}try {m.getColumn(-1);fail(""expecting MatrixIndexException"");}catch(MatrixIndexException ex){;}}"
"org.apache.commons.math.linear.RealMatrixImplTest.testGetEntry",0,"public void testGetEntry(){RealMatrix m=new RealMatrixImpl(testData);assertEquals(""get entry"",m.getEntry(0,1),2d,entryTolerance);try {m.getEntry(10,4);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}}"
"org.apache.commons.math.linear.RealMatrixImplTest.testExamples",0,"/** * test examples in user guide */public void testExamples(){double[][]matrixData={{1d,2d,3d},{2d,5d,3d}};RealMatrix m=new RealMatrixImpl(matrixData);double[][]matrixData2={{1d,2d},{2d,5d},{1d,7d}};RealMatrix n=new RealMatrixImpl(matrixData2);RealMatrix p=m.multiply(n);assertEquals(2,p.getRowDimension());assertEquals(2,p.getColumnDimension());RealMatrix pInverse=new LUDecompositionImpl(p).getSolver().getInverse();assertEquals(2,pInverse.getRowDimension());assertEquals(2,pInverse.getColumnDimension());double[][]coefficientsData={{2,3,-2},{-1,7,6},{4,-3,-5}};RealMatrix coefficients=new RealMatrixImpl(coefficientsData);double[]constants={1,-2,1};double[]solution=new LUDecompositionImpl(coefficients).getSolver().solve(constants);assertEquals(2 * solution[0]+ 3 * solution[1]- 2 * solution[2],constants[0],1E-12);assertEquals(-1 * solution[0]+ 7 * solution[1]+ 6 * solution[2],constants[1],1E-12);assertEquals(4 * solution[0]- 3 * solution[1]- 5 * solution[2],constants[2],1E-12);}"
"org.apache.commons.math.linear.RealMatrixImplTest.testGetSubMatrix",0,"public void testGetSubMatrix(){RealMatrix m=new RealMatrixImpl(subTestData);checkGetSubMatrix(m,subRows23Cols00,2,3,0,0,false);checkGetSubMatrix(m,subRows00Cols33,0,0,3,3,false);checkGetSubMatrix(m,subRows01Cols23,0,1,2,3,false);checkGetSubMatrix(m,subRows02Cols13,new int[]{0,2},new int[]{1,3},false);checkGetSubMatrix(m,subRows03Cols12,new int[]{0,3},new int[]{1,2},false);checkGetSubMatrix(m,subRows03Cols123,new int[]{0,3},new int[]{1,2,3},false);checkGetSubMatrix(m,subRows20Cols123,new int[]{2,0},new int[]{1,2,3},false);checkGetSubMatrix(m,subRows31Cols31,new int[]{3,1},new int[]{3,1},false);checkGetSubMatrix(m,subRows31Cols31,new int[]{3,1},new int[]{3,1},false);checkGetSubMatrix(m,null,1,0,2,4,true);checkGetSubMatrix(m,null,-1,1,2,2,true);checkGetSubMatrix(m,null,1,0,2,2,true);checkGetSubMatrix(m,null,1,0,2,4,true);checkGetSubMatrix(m,null,new int[]{},new int[]{0},true);checkGetSubMatrix(m,null,new int[]{0},new int[]{4},true);}"
"org.apache.commons.math.linear.RealMatrixImplTest.testCopySubMatrix",0,"public void testCopySubMatrix(){RealMatrix m=new RealMatrixImpl(subTestData);checkCopy(m,subRows23Cols00,2,3,0,0,false);checkCopy(m,subRows00Cols33,0,0,3,3,false);checkCopy(m,subRows01Cols23,0,1,2,3,false);checkCopy(m,subRows02Cols13,new int[]{0,2},new int[]{1,3},false);checkCopy(m,subRows03Cols12,new int[]{0,3},new int[]{1,2},false);checkCopy(m,subRows03Cols123,new int[]{0,3},new int[]{1,2,3},false);checkCopy(m,subRows20Cols123,new int[]{2,0},new int[]{1,2,3},false);checkCopy(m,subRows31Cols31,new int[]{3,1},new int[]{3,1},false);checkCopy(m,subRows31Cols31,new int[]{3,1},new int[]{3,1},false);checkCopy(m,null,1,0,2,4,true);checkCopy(m,null,-1,1,2,2,true);checkCopy(m,null,1,0,2,2,true);checkCopy(m,null,1,0,2,4,true);checkCopy(m,null,new int[]{},new int[]{0},true);checkCopy(m,null,new int[]{0},new int[]{4},true);}"
"org.apache.commons.math.linear.RealMatrixImplTest.testGetRowMatrix",0,"public void testGetRowMatrix(){RealMatrix m=new RealMatrixImpl(subTestData);RealMatrix mRow0=new RealMatrixImpl(subRow0);RealMatrix mRow3=new RealMatrixImpl(subRow3);assertEquals(""Row0"",mRow0,m.getRowMatrix(0));assertEquals(""Row3"",mRow3,m.getRowMatrix(3));try {m.getRowMatrix(-1);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.getRowMatrix(4);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}}"
"org.apache.commons.math.linear.RealMatrixImplTest.testSetRowMatrix",0,"public void testSetRowMatrix(){RealMatrix m=new RealMatrixImpl(subTestData);RealMatrix mRow3=new RealMatrixImpl(subRow3);assertNotSame(mRow3,m.getRowMatrix(0));m.setRowMatrix(0,mRow3);assertEquals(mRow3,m.getRowMatrix(0));try {m.setRowMatrix(-1,mRow3);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.setRowMatrix(0,m);fail(""Expecting InvalidMatrixException"");}catch(InvalidMatrixException ex){}}"
"org.apache.commons.math.linear.RealMatrixImplTest.testGetColumnMatrix",0,"public void testGetColumnMatrix(){RealMatrix m=new RealMatrixImpl(subTestData);RealMatrix mColumn1=new RealMatrixImpl(subColumn1);RealMatrix mColumn3=new RealMatrixImpl(subColumn3);assertEquals(""Column1"",mColumn1,m.getColumnMatrix(1));assertEquals(""Column3"",mColumn3,m.getColumnMatrix(3));try {m.getColumnMatrix(-1);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.getColumnMatrix(4);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}}"
"org.apache.commons.math.linear.RealMatrixImplTest.testSetColumnMatrix",0,"public void testSetColumnMatrix(){RealMatrix m=new RealMatrixImpl(subTestData);RealMatrix mColumn3=new RealMatrixImpl(subColumn3);assertNotSame(mColumn3,m.getColumnMatrix(1));m.setColumnMatrix(1,mColumn3);assertEquals(mColumn3,m.getColumnMatrix(1));try {m.setColumnMatrix(-1,mColumn3);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.setColumnMatrix(0,m);fail(""Expecting InvalidMatrixException"");}catch(InvalidMatrixException ex){}}"
"org.apache.commons.math.linear.RealMatrixImplTest.testGetRowVector",0,"public void testGetRowVector(){RealMatrix m=new RealMatrixImpl(subTestData);RealVector mRow0=new RealVectorImpl(subRow0[0]);RealVector mRow3=new RealVectorImpl(subRow3[0]);assertEquals(""Row0"",mRow0,m.getRowVector(0));assertEquals(""Row3"",mRow3,m.getRowVector(3));try {m.getRowVector(-1);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.getRowVector(4);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}}"
"org.apache.commons.math.linear.RealMatrixImplTest.testSetRowVector",0,"public void testSetRowVector(){RealMatrix m=new RealMatrixImpl(subTestData);RealVector mRow3=new RealVectorImpl(subRow3[0]);assertNotSame(mRow3,m.getRowMatrix(0));m.setRowVector(0,mRow3);assertEquals(mRow3,m.getRowVector(0));try {m.setRowVector(-1,mRow3);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.setRowVector(0,new RealVectorImpl(5));fail(""Expecting InvalidMatrixException"");}catch(InvalidMatrixException ex){}}"
"org.apache.commons.math.linear.RealMatrixImplTest.testGetColumnVector",0,"public void testGetColumnVector(){RealMatrix m=new RealMatrixImpl(subTestData);RealVector mColumn1=columnToVector(subColumn1);RealVector mColumn3=columnToVector(subColumn3);assertEquals(""Column1"",mColumn1,m.getColumnVector(1));assertEquals(""Column3"",mColumn3,m.getColumnVector(3));try {m.getColumnVector(-1);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.getColumnVector(4);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}}"
"org.apache.commons.math.linear.RealMatrixImplTest.testSetColumnVector",0,"public void testSetColumnVector(){RealMatrix m=new RealMatrixImpl(subTestData);RealVector mColumn3=columnToVector(subColumn3);assertNotSame(mColumn3,m.getColumnVector(1));m.setColumnVector(1,mColumn3);assertEquals(mColumn3,m.getColumnVector(1));try {m.setColumnVector(-1,mColumn3);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.setColumnVector(0,new RealVectorImpl(5));fail(""Expecting InvalidMatrixException"");}catch(InvalidMatrixException ex){}}"
"org.apache.commons.math.linear.RealMatrixImplTest.testGetRow",0,"public void testGetRow(){RealMatrix m=new RealMatrixImpl(subTestData);checkArrays(subRow0[0],m.getRow(0));checkArrays(subRow3[0],m.getRow(3));try {m.getRow(-1);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.getRow(4);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}}"
"org.apache.commons.math.linear.RealMatrixImplTest.testSetRow",0,"public void testSetRow(){RealMatrix m=new RealMatrixImpl(subTestData);assertTrue(subRow3[0][0]!= m.getRow(0)[0]);m.setRow(0,subRow3[0]);checkArrays(subRow3[0],m.getRow(0));try {m.setRow(-1,subRow3[0]);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.setRow(0,new double[5]);fail(""Expecting InvalidMatrixException"");}catch(InvalidMatrixException ex){}}"
"org.apache.commons.math.linear.RealMatrixImplTest.testGetColumn",0,"public void testGetColumn(){RealMatrix m=new RealMatrixImpl(subTestData);double[]mColumn1=columnToArray(subColumn1);double[]mColumn3=columnToArray(subColumn3);checkArrays(mColumn1,m.getColumn(1));checkArrays(mColumn3,m.getColumn(3));try {m.getColumn(-1);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.getColumn(4);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}}"
"org.apache.commons.math.linear.RealMatrixImplTest.testSetColumn",0,"public void testSetColumn(){RealMatrix m=new RealMatrixImpl(subTestData);double[]mColumn3=columnToArray(subColumn3);assertTrue(mColumn3[0]!= m.getColumn(1)[0]);m.setColumn(1,mColumn3);checkArrays(mColumn3,m.getColumn(1));try {m.setColumn(-1,mColumn3);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.setColumn(0,new double[5]);fail(""Expecting InvalidMatrixException"");}catch(InvalidMatrixException ex){}}"
"org.apache.commons.math.linear.RealMatrixImplTest.testEqualsAndHashCode",0,"public void testEqualsAndHashCode(){RealMatrixImpl m=new RealMatrixImpl(testData);RealMatrixImpl m1=(RealMatrixImpl)m.copy();RealMatrixImpl mt=(RealMatrixImpl)m.transpose();assertTrue(m.hashCode()!= mt.hashCode());assertEquals(m.hashCode(),m1.hashCode());assertEquals(m,m);assertEquals(m,m1);assertFalse(m.equals(null));assertFalse(m.equals(mt));assertFalse(m.equals(new RealMatrixImpl(bigSingular)));}"
"org.apache.commons.math.linear.RealMatrixImplTest.testToString",0,"public void testToString(){RealMatrixImpl m=new RealMatrixImpl(testData);assertEquals(""RealMatrixImpl{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}"",m.toString());m=new RealMatrixImpl();assertEquals(""RealMatrixImpl{}"",m.toString());}"
"org.apache.commons.math.linear.RealMatrixImplTest.testSetSubMatrix",0,"public void testSetSubMatrix()throws Exception {RealMatrixImpl m=new RealMatrixImpl(testData);m.setSubMatrix(detData2,1,1);RealMatrix expected=MatrixUtils.createRealMatrix(new double[][]{{1.0,2.0,3.0},{2.0,1.0,3.0},{1.0,2.0,4.0}});assertEquals(expected,m);m.setSubMatrix(detData2,0,0);expected=MatrixUtils.createRealMatrix(new double[][]{{1.0,3.0,3.0},{2.0,4.0,3.0},{1.0,2.0,4.0}});assertEquals(expected,m);m.setSubMatrix(testDataPlus2,0,0);expected=MatrixUtils.createRealMatrix(new double[][]{{3.0,4.0,5.0},{4.0,7.0,5.0},{3.0,2.0,10.0}});assertEquals(expected,m);try {m.setSubMatrix(testData,1,1);fail(""expecting MatrixIndexException"");}catch(MatrixIndexException e){}try {m.setSubMatrix(testData,-1,1);fail(""expecting MatrixIndexException"");}catch(MatrixIndexException e){}try {m.setSubMatrix(testData,1,-1);fail(""expecting MatrixIndexException"");}catch(MatrixIndexException e){}try {m.setSubMatrix(null,1,1);fail(""expecting NullPointerException"");}catch(NullPointerException e){}RealMatrixImpl m2=new RealMatrixImpl();try {m2.setSubMatrix(testData,0,1);fail(""expecting IllegalStateException"");}catch(IllegalStateException e){}try {m2.setSubMatrix(testData,1,0);fail(""expecting IllegalStateException"");}catch(IllegalStateException e){}try {m.setSubMatrix(new double[][]{{1},{2,3}},0,0);fail(""expecting IllegalArgumentException"");}catch(IllegalArgumentException e){}try {m.setSubMatrix(new double[][]{{}},0,0);fail(""expecting IllegalArgumentException"");}catch(IllegalArgumentException e){}}"
"org.apache.commons.math.linear.RealMatrixImplTest.testWalk",0,"public void testWalk(){int rows=150;int columns=75;RealMatrix m=new RealMatrixImpl(rows,columns);m.walkInRowOrder(new SetVisitor());GetVisitor getVisitor=new GetVisitor();m.walkInOptimizedOrder(getVisitor);assertEquals(rows * columns,getVisitor.getCount());m=new RealMatrixImpl(rows,columns);m.walkInRowOrder(new SetVisitor(),1,rows - 2,1,columns - 2);getVisitor=new GetVisitor();m.walkInOptimizedOrder(getVisitor,1,rows - 2,1,columns - 2);assertEquals((rows - 2)* (columns - 2),getVisitor.getCount());for (int i=0;i < rows;++i){assertEquals(0.0,m.getEntry(i,0),0);assertEquals(0.0,m.getEntry(i,columns - 1),0);}for (int j=0;j < columns;++j){assertEquals(0.0,m.getEntry(0,j),0);assertEquals(0.0,m.getEntry(rows - 1,j),0);}m=new RealMatrixImpl(rows,columns);m.walkInColumnOrder(new SetVisitor());getVisitor=new GetVisitor();m.walkInOptimizedOrder(getVisitor);assertEquals(rows * columns,getVisitor.getCount());m=new RealMatrixImpl(rows,columns);m.walkInColumnOrder(new SetVisitor(),1,rows - 2,1,columns - 2);getVisitor=new GetVisitor();m.walkInOptimizedOrder(getVisitor,1,rows - 2,1,columns - 2);assertEquals((rows - 2)* (columns - 2),getVisitor.getCount());for (int i=0;i < rows;++i){assertEquals(0.0,m.getEntry(i,0),0);assertEquals(0.0,m.getEntry(i,columns - 1),0);}for (int j=0;j < columns;++j){assertEquals(0.0,m.getEntry(0,j),0);assertEquals(0.0,m.getEntry(rows - 1,j),0);}m=new RealMatrixImpl(rows,columns);m.walkInOptimizedOrder(new SetVisitor());getVisitor=new GetVisitor();m.walkInRowOrder(getVisitor);assertEquals(rows * columns,getVisitor.getCount());m=new RealMatrixImpl(rows,columns);m.walkInOptimizedOrder(new SetVisitor(),1,rows - 2,1,columns - 2);getVisitor=new GetVisitor();m.walkInRowOrder(getVisitor,1,rows - 2,1,columns - 2);assertEquals((rows - 2)* (columns - 2),getVisitor.getCount());for (int i=0;i < rows;++i){assertEquals(0.0,m.getEntry(i,0),0);assertEquals(0.0,m.getEntry(i,columns - 1),0);}for (int j=0;j < columns;++j){assertEquals(0.0,m.getEntry(0,j),0);assertEquals(0.0,m.getEntry(rows - 1,j),0);}m=new RealMatrixImpl(rows,columns);m.walkInOptimizedOrder(new SetVisitor());getVisitor=new GetVisitor();m.walkInColumnOrder(getVisitor);assertEquals(rows * columns,getVisitor.getCount());m=new RealMatrixImpl(rows,columns);m.walkInOptimizedOrder(new SetVisitor(),1,rows - 2,1,columns - 2);getVisitor=new GetVisitor();m.walkInColumnOrder(getVisitor,1,rows - 2,1,columns - 2);assertEquals((rows - 2)* (columns - 2),getVisitor.getCount());for (int i=0;i < rows;++i){assertEquals(0.0,m.getEntry(i,0),0);assertEquals(0.0,m.getEntry(i,columns - 1),0);}for (int j=0;j < columns;++j){assertEquals(0.0,m.getEntry(0,j),0);assertEquals(0.0,m.getEntry(rows - 1,j),0);}}"
"org.apache.commons.math.distribution.ChiSquareDistributionTest.testSmallDf",0,"public void testSmallDf()throws Exception {setDistribution(new ChiSquaredDistributionImpl(0.1d));setTolerance(1E-4);setCumulativeTestPoints(new double[]{1.168926E-60,1.168926E-40,1.063132E-32,1.144775E-26,1.168926E-20,5.472917,2.175255,1.13438,0.5318646,0.1526342});setInverseCumulativeTestValues(getCumulativeTestPoints());setInverseCumulativeTestPoints(getCumulativeTestValues());verifyCumulativeProbabilities();verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math.distribution.ChiSquareDistributionTest.testDfAccessors",0,"public void testDfAccessors(){ChiSquaredDistribution distribution=(ChiSquaredDistribution)getDistribution();assertEquals(5d,distribution.getDegreesOfFreedom(),Double.MIN_VALUE);distribution.setDegreesOfFreedom(4d);assertEquals(4d,distribution.getDegreesOfFreedom(),Double.MIN_VALUE);try {distribution.setDegreesOfFreedom(0d);fail(""Expecting IllegalArgumentException for df = 0"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.distribution.ChiSquareDistributionTest.testDensity",0,"public void testDensity(){double[]x=new double[]{-0.1,1e-6,0.5,1,2,5};checkDensity(1,x,new double[]{0.00000000000,398.94208093034,0.43939128947,0.24197072452,0.10377687436,0.01464498256});checkDensity(0.1,x,new double[]{0.000000000e+00,2.486453997e+04,7.464238732e-02,3.009077718e-02,9.447299159e-03,8.827199396e-04});checkDensity(2,x,new double[]{0.00000000000,0.49999975000,0.38940039154,0.30326532986,0.18393972059,0.04104249931});checkDensity(10,x,new double[]{0.000000000e+00,1.302082682e-27,6.337896998e-05,7.897534632e-04,7.664155024e-03,6.680094289e-02});}"
"org.apache.commons.math.distribution.ChiSquareDistributionTest.testSampling",0,"public void testSampling(){}"
"org.apache.commons.math.distribution.ChiSquareDistributionTest.testCumulativeProbabilities",0,"/** * Verifies that cumulative probability density calculations match expected values using default test instance data*/public void testCumulativeProbabilities()throws Exception {verifyCumulativeProbabilities();}"
"org.apache.commons.math.distribution.ChiSquareDistributionTest.testInverseCumulativeProbabilities",0,"/** * Verifies that inverse cumulative probability density calculations match expected values using default test instance data*/public void testInverseCumulativeProbabilities()throws Exception {verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math.distribution.ChiSquareDistributionTest.testConsistency",0,"/** * Verifies that probability computations are consistent*/public void testConsistency()throws Exception {for (int i=1;i < cumulativeTestPoints.length;i++){TestUtils.assertEquals(0d,distribution.cumulativeProbability(cumulativeTestPoints[i],cumulativeTestPoints[i]),tolerance);double upper=Math.max(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double lower=Math.min(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double diff=distribution.cumulativeProbability(upper)- distribution.cumulativeProbability(lower);double direct=distribution.cumulativeProbability(lower,upper);TestUtils.assertEquals(""Inconsistent cumulative probabilities for ("" + lower + "",""+ upper+ "")"",diff,direct,tolerance);}}"
"org.apache.commons.math.distribution.ChiSquareDistributionTest.testIllegalArguments",0,"/** * Verifies that illegal arguments are correctly handled*/public void testIllegalArguments()throws Exception {try {distribution.cumulativeProbability(1,0);fail(""Expecting IllegalArgumentException for bad cumulativeProbability interval"");}catch(IllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(-1);fail(""Expecting IllegalArgumentException for p = -1"");}catch(IllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(2);fail(""Expecting IllegalArgumentException for p = 2"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testDimensions",0,"/** * test dimensions */public void testDimensions(){DenseRealMatrix m=new DenseRealMatrix(testData);DenseRealMatrix m2=new DenseRealMatrix(testData2);assertEquals(""testData row dimension"",3,m.getRowDimension());assertEquals(""testData column dimension"",3,m.getColumnDimension());assertTrue(""testData is square"",m.isSquare());assertEquals(""testData2 row dimension"",m2.getRowDimension(),2);assertEquals(""testData2 column dimension"",m2.getColumnDimension(),3);assertTrue(""testData2 is not square"",!m2.isSquare());}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testCopyFunctions",0,"/** * test copy functions */public void testCopyFunctions(){Random r=new Random(66636328996002l);DenseRealMatrix m1=createRandomMatrix(r,47,83);DenseRealMatrix m2=new DenseRealMatrix(m1.getData());assertEquals(m1,m2);DenseRealMatrix m3=new DenseRealMatrix(testData);DenseRealMatrix m4=new DenseRealMatrix(m3.getData());assertEquals(m3,m4);}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testAdd",0,"/** * test add */public void testAdd(){DenseRealMatrix m=new DenseRealMatrix(testData);DenseRealMatrix mInv=new DenseRealMatrix(testDataInv);RealMatrix mPlusMInv=m.add(mInv);double[][]sumEntries=mPlusMInv.getData();for (int row=0;row < m.getRowDimension();row++){for (int col=0;col < m.getColumnDimension();col++){assertEquals(""sum entry entry"",testDataPlusInv[row][col],sumEntries[row][col],entryTolerance);}}}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testAddFail",0,"/** * test add failure */public void testAddFail(){DenseRealMatrix m=new DenseRealMatrix(testData);DenseRealMatrix m2=new DenseRealMatrix(testData2);try {m.add(m2);fail(""IllegalArgumentException expected"");}catch(IllegalArgumentException ex){;}}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testNorm",0,"/** * test norm */public void testNorm(){DenseRealMatrix m=new DenseRealMatrix(testData);DenseRealMatrix m2=new DenseRealMatrix(testData2);assertEquals(""testData norm"",14d,m.getNorm(),entryTolerance);assertEquals(""testData2 norm"",7d,m2.getNorm(),entryTolerance);}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testFrobeniusNorm",0,"/** * test Frobenius norm */public void testFrobeniusNorm(){DenseRealMatrix m=new DenseRealMatrix(testData);DenseRealMatrix m2=new DenseRealMatrix(testData2);assertEquals(""testData Frobenius norm"",Math.sqrt(117.0),m.getFrobeniusNorm(),entryTolerance);assertEquals(""testData2 Frobenius norm"",Math.sqrt(52.0),m2.getFrobeniusNorm(),entryTolerance);}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testPlusMinus",0,"/** * test m-n = m + -n */public void testPlusMinus(){DenseRealMatrix m=new DenseRealMatrix(testData);DenseRealMatrix m2=new DenseRealMatrix(testDataInv);assertClose(m.subtract(m2),m2.scalarMultiply(-1d).add(m),entryTolerance);try {m.subtract(new DenseRealMatrix(testData2));fail(""Expecting illegalArgumentException"");}catch(IllegalArgumentException ex){;}}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testMultiply",0,"/** * test multiply */public void testMultiply(){DenseRealMatrix m=new DenseRealMatrix(testData);DenseRealMatrix mInv=new DenseRealMatrix(testDataInv);DenseRealMatrix identity=new DenseRealMatrix(id);DenseRealMatrix m2=new DenseRealMatrix(testData2);assertClose(m.multiply(mInv),identity,entryTolerance);assertClose(mInv.multiply(m),identity,entryTolerance);assertClose(m.multiply(identity),m,entryTolerance);assertClose(identity.multiply(mInv),mInv,entryTolerance);assertClose(m2.multiply(identity),m2,entryTolerance);try {m.multiply(new DenseRealMatrix(bigSingular));fail(""Expecting illegalArgumentException"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testSeveralBlocks",0,"public void testSeveralBlocks(){RealMatrix m=new DenseRealMatrix(35,71);for (int i=0;i < m.getRowDimension();++i){for (int j=0;j < m.getColumnDimension();++j){m.setEntry(i,j,i + j / 1024.0);}}RealMatrix mT=m.transpose();assertEquals(m.getRowDimension(),mT.getColumnDimension());assertEquals(m.getColumnDimension(),mT.getRowDimension());for (int i=0;i < mT.getRowDimension();++i){for (int j=0;j < mT.getColumnDimension();++j){assertEquals(m.getEntry(j,i),mT.getEntry(i,j),0);}}RealMatrix mPm=m.add(m);for (int i=0;i < mPm.getRowDimension();++i){for (int j=0;j < mPm.getColumnDimension();++j){assertEquals(2 * m.getEntry(i,j),mPm.getEntry(i,j),0);}}RealMatrix mPmMm=mPm.subtract(m);for (int i=0;i < mPmMm.getRowDimension();++i){for (int j=0;j < mPmMm.getColumnDimension();++j){assertEquals(m.getEntry(i,j),mPmMm.getEntry(i,j),0);}}RealMatrix mTm=mT.multiply(m);for (int i=0;i < mTm.getRowDimension();++i){for (int j=0;j < mTm.getColumnDimension();++j){double sum=0;for (int k=0;k < mT.getColumnDimension();++k){sum+=(k + i / 1024.0)* (k + j / 1024.0);}assertEquals(sum,mTm.getEntry(i,j),0);}}RealMatrix mmT=m.multiply(mT);for (int i=0;i < mmT.getRowDimension();++i){for (int j=0;j < mmT.getColumnDimension();++j){double sum=0;for (int k=0;k < m.getColumnDimension();++k){sum+=(i + k / 1024.0)* (j + k / 1024.0);}assertEquals(sum,mmT.getEntry(i,j),0);}}RealMatrix sub1=m.getSubMatrix(2,9,5,20);for (int i=0;i < sub1.getRowDimension();++i){for (int j=0;j < sub1.getColumnDimension();++j){assertEquals((i + 2)+ (j + 5)/ 1024.0,sub1.getEntry(i,j),0);}}RealMatrix sub2=m.getSubMatrix(10,12,3,70);for (int i=0;i < sub2.getRowDimension();++i){for (int j=0;j < sub2.getColumnDimension();++j){assertEquals((i + 10)+ (j + 3)/ 1024.0,sub2.getEntry(i,j),0);}}RealMatrix sub3=m.getSubMatrix(30,34,0,5);for (int i=0;i < sub3.getRowDimension();++i){for (int j=0;j < sub3.getColumnDimension();++j){assertEquals((i + 30)+ (j + 0)/ 1024.0,sub3.getEntry(i,j),0);}}RealMatrix sub4=m.getSubMatrix(30,32,62,65);for (int i=0;i < sub4.getRowDimension();++i){for (int j=0;j < sub4.getColumnDimension();++j){assertEquals((i + 30)+ (j + 62)/ 1024.0,sub4.getEntry(i,j),0);}}}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testMultiply2",0,"public void testMultiply2(){RealMatrix m3=new DenseRealMatrix(d3);RealMatrix m4=new DenseRealMatrix(d4);RealMatrix m5=new DenseRealMatrix(d5);assertClose(m3.multiply(m4),m5,entryTolerance);}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testTrace",0,"/** * test trace */public void testTrace(){RealMatrix m=new DenseRealMatrix(id);assertEquals(""identity trace"",3d,m.getTrace(),entryTolerance);m=new DenseRealMatrix(testData2);try {m.getTrace();fail(""Expecting NonSquareMatrixException"");}catch(NonSquareMatrixException ex){;}}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testScalarAdd",0,"/** * test scalarAdd */public void testScalarAdd(){RealMatrix m=new DenseRealMatrix(testData);assertClose(new DenseRealMatrix(testDataPlus2),m.scalarAdd(2d),entryTolerance);}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testOperate",0,"/** * test operate */public void testOperate(){RealMatrix m=new DenseRealMatrix(id);assertClose(testVector,m.operate(testVector),entryTolerance);assertClose(testVector,m.operate(new RealVectorImpl(testVector)).getData(),entryTolerance);m=new DenseRealMatrix(bigSingular);try {m.operate(testVector);fail(""Expecting illegalArgumentException"");}catch(IllegalArgumentException ex){;}}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testOperateLarge",0,"public void testOperateLarge(){int p=(7 * DenseRealMatrix.BLOCK_SIZE)/ 2;int q=(5 * DenseRealMatrix.BLOCK_SIZE)/ 2;int r=3 * DenseRealMatrix.BLOCK_SIZE;Random random=new Random(111007463902334l);RealMatrix m1=createRandomMatrix(random,p,q);RealMatrix m2=createRandomMatrix(random,q,r);RealMatrix m1m2=m1.multiply(m2);for (int i=0;i < r;++i){checkArrays(m1m2.getColumn(i),m1.operate(m2.getColumn(i)));}}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testOperatePremultiplyLarge",0,"public void testOperatePremultiplyLarge(){int p=(7 * DenseRealMatrix.BLOCK_SIZE)/ 2;int q=(5 * DenseRealMatrix.BLOCK_SIZE)/ 2;int r=3 * DenseRealMatrix.BLOCK_SIZE;Random random=new Random(111007463902334l);RealMatrix m1=createRandomMatrix(random,p,q);RealMatrix m2=createRandomMatrix(random,q,r);RealMatrix m1m2=m1.multiply(m2);for (int i=0;i < p;++i){checkArrays(m1m2.getRow(i),m2.preMultiply(m1.getRow(i)));}}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testMath209",0,"/** * test issue MATH-209 */public void testMath209(){RealMatrix a=new DenseRealMatrix(new double[][]{{1,2},{3,4},{5,6}});double[]b=a.operate(new double[]{1,1});assertEquals(a.getRowDimension(),b.length);assertEquals(3.0,b[0],1.0e-12);assertEquals(7.0,b[1],1.0e-12);assertEquals(11.0,b[2],1.0e-12);}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testTranspose",0,"/** * test transpose */public void testTranspose(){RealMatrix m=new DenseRealMatrix(testData);RealMatrix mIT=new LUDecompositionImpl(m).getSolver().getInverse().transpose();RealMatrix mTI=new LUDecompositionImpl(m.transpose()).getSolver().getInverse();assertClose(mIT,mTI,normTolerance);m=new DenseRealMatrix(testData2);RealMatrix mt=new DenseRealMatrix(testData2T);assertClose(mt,m.transpose(),normTolerance);}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testPremultiplyVector",0,"/** * test preMultiply by vector */public void testPremultiplyVector(){RealMatrix m=new DenseRealMatrix(testData);assertClose(m.preMultiply(testVector),preMultTest,normTolerance);assertClose(m.preMultiply(new RealVectorImpl(testVector).getData()),preMultTest,normTolerance);m=new DenseRealMatrix(bigSingular);try {m.preMultiply(testVector);fail(""expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){;}}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testPremultiply",0,"public void testPremultiply(){RealMatrix m3=new DenseRealMatrix(d3);RealMatrix m4=new DenseRealMatrix(d4);RealMatrix m5=new DenseRealMatrix(d5);assertClose(m4.preMultiply(m3),m5,entryTolerance);DenseRealMatrix m=new DenseRealMatrix(testData);DenseRealMatrix mInv=new DenseRealMatrix(testDataInv);DenseRealMatrix identity=new DenseRealMatrix(id);assertClose(m.preMultiply(mInv),identity,entryTolerance);assertClose(mInv.preMultiply(m),identity,entryTolerance);assertClose(m.preMultiply(identity),m,entryTolerance);assertClose(identity.preMultiply(mInv),mInv,entryTolerance);try {m.preMultiply(new DenseRealMatrix(bigSingular));fail(""Expecting illegalArgumentException"");}catch(IllegalArgumentException ex){;}}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testGetVectors",0,"public void testGetVectors(){RealMatrix m=new DenseRealMatrix(testData);assertClose(m.getRow(0),testDataRow1,entryTolerance);assertClose(m.getColumn(2),testDataCol3,entryTolerance);try {m.getRow(10);fail(""expecting MatrixIndexException"");}catch(MatrixIndexException ex){;}try {m.getColumn(-1);fail(""expecting MatrixIndexException"");}catch(MatrixIndexException ex){;}}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testGetEntry",0,"public void testGetEntry(){RealMatrix m=new DenseRealMatrix(testData);assertEquals(""get entry"",m.getEntry(0,1),2d,entryTolerance);try {m.getEntry(10,4);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testExamples",0,"/** * test examples in user guide */public void testExamples(){double[][]matrixData={{1d,2d,3d},{2d,5d,3d}};RealMatrix m=new DenseRealMatrix(matrixData);double[][]matrixData2={{1d,2d},{2d,5d},{1d,7d}};RealMatrix n=new DenseRealMatrix(matrixData2);RealMatrix p=m.multiply(n);assertEquals(2,p.getRowDimension());assertEquals(2,p.getColumnDimension());RealMatrix pInverse=new LUDecompositionImpl(p).getSolver().getInverse();assertEquals(2,pInverse.getRowDimension());assertEquals(2,pInverse.getColumnDimension());double[][]coefficientsData={{2,3,-2},{-1,7,6},{4,-3,-5}};RealMatrix coefficients=new DenseRealMatrix(coefficientsData);double[]constants={1,-2,1};double[]solution=new LUDecompositionImpl(coefficients).getSolver().solve(constants);assertEquals(2 * solution[0]+ 3 * solution[1]- 2 * solution[2],constants[0],1E-12);assertEquals(-1 * solution[0]+ 7 * solution[1]+ 6 * solution[2],constants[1],1E-12);assertEquals(4 * solution[0]- 3 * solution[1]- 5 * solution[2],constants[2],1E-12);}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testGetSubMatrix",0,"public void testGetSubMatrix(){RealMatrix m=new DenseRealMatrix(subTestData);checkGetSubMatrix(m,subRows23Cols00,2,3,0,0,false);checkGetSubMatrix(m,subRows00Cols33,0,0,3,3,false);checkGetSubMatrix(m,subRows01Cols23,0,1,2,3,false);checkGetSubMatrix(m,subRows02Cols13,new int[]{0,2},new int[]{1,3},false);checkGetSubMatrix(m,subRows03Cols12,new int[]{0,3},new int[]{1,2},false);checkGetSubMatrix(m,subRows03Cols123,new int[]{0,3},new int[]{1,2,3},false);checkGetSubMatrix(m,subRows20Cols123,new int[]{2,0},new int[]{1,2,3},false);checkGetSubMatrix(m,subRows31Cols31,new int[]{3,1},new int[]{3,1},false);checkGetSubMatrix(m,subRows31Cols31,new int[]{3,1},new int[]{3,1},false);checkGetSubMatrix(m,null,1,0,2,4,true);checkGetSubMatrix(m,null,-1,1,2,2,true);checkGetSubMatrix(m,null,1,0,2,2,true);checkGetSubMatrix(m,null,1,0,2,4,true);checkGetSubMatrix(m,null,new int[]{},new int[]{0},true);checkGetSubMatrix(m,null,new int[]{0},new int[]{4},true);}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testGetSetMatrixLarge",0,"public void testGetSetMatrixLarge(){int n=3 * DenseRealMatrix.BLOCK_SIZE;RealMatrix m=new DenseRealMatrix(n,n);RealMatrix sub=new DenseRealMatrix(n - 4,n - 4).scalarAdd(1);m.setSubMatrix(sub.getData(),2,2);for (int i=0;i < n;++i){for (int j=0;j < n;++j){if ((i < 2)|| (i > n - 3)|| (j < 2)|| (j > n - 3)){assertEquals(0.0,m.getEntry(i,j),0.0);}else {assertEquals(1.0,m.getEntry(i,j),0.0);}}}assertEquals(sub,m.getSubMatrix(2,n - 3,2,n - 3));}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testCopySubMatrix",0,"public void testCopySubMatrix(){RealMatrix m=new DenseRealMatrix(subTestData);checkCopy(m,subRows23Cols00,2,3,0,0,false);checkCopy(m,subRows00Cols33,0,0,3,3,false);checkCopy(m,subRows01Cols23,0,1,2,3,false);checkCopy(m,subRows02Cols13,new int[]{0,2},new int[]{1,3},false);checkCopy(m,subRows03Cols12,new int[]{0,3},new int[]{1,2},false);checkCopy(m,subRows03Cols123,new int[]{0,3},new int[]{1,2,3},false);checkCopy(m,subRows20Cols123,new int[]{2,0},new int[]{1,2,3},false);checkCopy(m,subRows31Cols31,new int[]{3,1},new int[]{3,1},false);checkCopy(m,subRows31Cols31,new int[]{3,1},new int[]{3,1},false);checkCopy(m,null,1,0,2,4,true);checkCopy(m,null,-1,1,2,2,true);checkCopy(m,null,1,0,2,2,true);checkCopy(m,null,1,0,2,4,true);checkCopy(m,null,new int[]{},new int[]{0},true);checkCopy(m,null,new int[]{0},new int[]{4},true);}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testGetRowMatrix",0,"public void testGetRowMatrix(){RealMatrix m=new DenseRealMatrix(subTestData);RealMatrix mRow0=new DenseRealMatrix(subRow0);RealMatrix mRow3=new DenseRealMatrix(subRow3);assertEquals(""Row0"",mRow0,m.getRowMatrix(0));assertEquals(""Row3"",mRow3,m.getRowMatrix(3));try {m.getRowMatrix(-1);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.getRowMatrix(4);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testSetRowMatrix",0,"public void testSetRowMatrix(){RealMatrix m=new DenseRealMatrix(subTestData);RealMatrix mRow3=new DenseRealMatrix(subRow3);assertNotSame(mRow3,m.getRowMatrix(0));m.setRowMatrix(0,mRow3);assertEquals(mRow3,m.getRowMatrix(0));try {m.setRowMatrix(-1,mRow3);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.setRowMatrix(0,m);fail(""Expecting InvalidMatrixException"");}catch(InvalidMatrixException ex){}}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testGetSetRowMatrixLarge",0,"public void testGetSetRowMatrixLarge(){int n=3 * DenseRealMatrix.BLOCK_SIZE;RealMatrix m=new DenseRealMatrix(n,n);RealMatrix sub=new DenseRealMatrix(1,n).scalarAdd(1);m.setRowMatrix(2,sub);for (int i=0;i < n;++i){for (int j=0;j < n;++j){if (i != 2){assertEquals(0.0,m.getEntry(i,j),0.0);}else {assertEquals(1.0,m.getEntry(i,j),0.0);}}}assertEquals(sub,m.getRowMatrix(2));}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testGetColumnMatrix",0,"public void testGetColumnMatrix(){RealMatrix m=new DenseRealMatrix(subTestData);RealMatrix mColumn1=new DenseRealMatrix(subColumn1);RealMatrix mColumn3=new DenseRealMatrix(subColumn3);assertEquals(mColumn1,m.getColumnMatrix(1));assertEquals(mColumn3,m.getColumnMatrix(3));try {m.getColumnMatrix(-1);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.getColumnMatrix(4);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testSetColumnMatrix",0,"public void testSetColumnMatrix(){RealMatrix m=new DenseRealMatrix(subTestData);RealMatrix mColumn3=new DenseRealMatrix(subColumn3);assertNotSame(mColumn3,m.getColumnMatrix(1));m.setColumnMatrix(1,mColumn3);assertEquals(mColumn3,m.getColumnMatrix(1));try {m.setColumnMatrix(-1,mColumn3);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.setColumnMatrix(0,m);fail(""Expecting InvalidMatrixException"");}catch(InvalidMatrixException ex){}}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testGetSetColumnMatrixLarge",0,"public void testGetSetColumnMatrixLarge(){int n=3 * DenseRealMatrix.BLOCK_SIZE;RealMatrix m=new DenseRealMatrix(n,n);RealMatrix sub=new DenseRealMatrix(n,1).scalarAdd(1);m.setColumnMatrix(2,sub);for (int i=0;i < n;++i){for (int j=0;j < n;++j){if (j != 2){assertEquals(0.0,m.getEntry(i,j),0.0);}else {assertEquals(1.0,m.getEntry(i,j),0.0);}}}assertEquals(sub,m.getColumnMatrix(2));}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testGetRowVector",0,"public void testGetRowVector(){RealMatrix m=new DenseRealMatrix(subTestData);RealVector mRow0=new RealVectorImpl(subRow0[0]);RealVector mRow3=new RealVectorImpl(subRow3[0]);assertEquals(mRow0,m.getRowVector(0));assertEquals(mRow3,m.getRowVector(3));try {m.getRowVector(-1);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.getRowVector(4);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testSetRowVector",0,"public void testSetRowVector(){RealMatrix m=new DenseRealMatrix(subTestData);RealVector mRow3=new RealVectorImpl(subRow3[0]);assertNotSame(mRow3,m.getRowMatrix(0));m.setRowVector(0,mRow3);assertEquals(mRow3,m.getRowVector(0));try {m.setRowVector(-1,mRow3);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.setRowVector(0,new RealVectorImpl(5));fail(""Expecting InvalidMatrixException"");}catch(InvalidMatrixException ex){}}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testGetSetRowVectorLarge",0,"public void testGetSetRowVectorLarge(){int n=3 * DenseRealMatrix.BLOCK_SIZE;RealMatrix m=new DenseRealMatrix(n,n);RealVector sub=new RealVectorImpl(n,1.0);m.setRowVector(2,sub);for (int i=0;i < n;++i){for (int j=0;j < n;++j){if (i != 2){assertEquals(0.0,m.getEntry(i,j),0.0);}else {assertEquals(1.0,m.getEntry(i,j),0.0);}}}assertEquals(sub,m.getRowVector(2));}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testGetColumnVector",0,"public void testGetColumnVector(){RealMatrix m=new DenseRealMatrix(subTestData);RealVector mColumn1=columnToVector(subColumn1);RealVector mColumn3=columnToVector(subColumn3);assertEquals(mColumn1,m.getColumnVector(1));assertEquals(mColumn3,m.getColumnVector(3));try {m.getColumnVector(-1);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.getColumnVector(4);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testSetColumnVector",0,"public void testSetColumnVector(){RealMatrix m=new DenseRealMatrix(subTestData);RealVector mColumn3=columnToVector(subColumn3);assertNotSame(mColumn3,m.getColumnVector(1));m.setColumnVector(1,mColumn3);assertEquals(mColumn3,m.getColumnVector(1));try {m.setColumnVector(-1,mColumn3);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.setColumnVector(0,new RealVectorImpl(5));fail(""Expecting InvalidMatrixException"");}catch(InvalidMatrixException ex){}}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testGetSetColumnVectorLarge",0,"public void testGetSetColumnVectorLarge(){int n=3 * DenseRealMatrix.BLOCK_SIZE;RealMatrix m=new DenseRealMatrix(n,n);RealVector sub=new RealVectorImpl(n,1.0);m.setColumnVector(2,sub);for (int i=0;i < n;++i){for (int j=0;j < n;++j){if (j != 2){assertEquals(0.0,m.getEntry(i,j),0.0);}else {assertEquals(1.0,m.getEntry(i,j),0.0);}}}assertEquals(sub,m.getColumnVector(2));}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testGetRow",0,"public void testGetRow(){RealMatrix m=new DenseRealMatrix(subTestData);checkArrays(subRow0[0],m.getRow(0));checkArrays(subRow3[0],m.getRow(3));try {m.getRow(-1);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.getRow(4);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testSetRow",0,"public void testSetRow(){RealMatrix m=new DenseRealMatrix(subTestData);assertTrue(subRow3[0][0]!= m.getRow(0)[0]);m.setRow(0,subRow3[0]);checkArrays(subRow3[0],m.getRow(0));try {m.setRow(-1,subRow3[0]);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.setRow(0,new double[5]);fail(""Expecting InvalidMatrixException"");}catch(InvalidMatrixException ex){}}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testGetSetRowLarge",0,"public void testGetSetRowLarge(){int n=3 * DenseRealMatrix.BLOCK_SIZE;RealMatrix m=new DenseRealMatrix(n,n);double[]sub=new double[n];Arrays.fill(sub,1.0);m.setRow(2,sub);for (int i=0;i < n;++i){for (int j=0;j < n;++j){if (i != 2){assertEquals(0.0,m.getEntry(i,j),0.0);}else {assertEquals(1.0,m.getEntry(i,j),0.0);}}}checkArrays(sub,m.getRow(2));}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testGetColumn",0,"public void testGetColumn(){RealMatrix m=new DenseRealMatrix(subTestData);double[]mColumn1=columnToArray(subColumn1);double[]mColumn3=columnToArray(subColumn3);checkArrays(mColumn1,m.getColumn(1));checkArrays(mColumn3,m.getColumn(3));try {m.getColumn(-1);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.getColumn(4);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testSetColumn",0,"public void testSetColumn(){RealMatrix m=new DenseRealMatrix(subTestData);double[]mColumn3=columnToArray(subColumn3);assertTrue(mColumn3[0]!= m.getColumn(1)[0]);m.setColumn(1,mColumn3);checkArrays(mColumn3,m.getColumn(1));try {m.setColumn(-1,mColumn3);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.setColumn(0,new double[5]);fail(""Expecting InvalidMatrixException"");}catch(InvalidMatrixException ex){}}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testGetSetColumnLarge",0,"public void testGetSetColumnLarge(){int n=3 * DenseRealMatrix.BLOCK_SIZE;RealMatrix m=new DenseRealMatrix(n,n);double[]sub=new double[n];Arrays.fill(sub,1.0);m.setColumn(2,sub);for (int i=0;i < n;++i){for (int j=0;j < n;++j){if (j != 2){assertEquals(0.0,m.getEntry(i,j),0.0);}else {assertEquals(1.0,m.getEntry(i,j),0.0);}}}checkArrays(sub,m.getColumn(2));}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testEqualsAndHashCode",0,"public void testEqualsAndHashCode(){DenseRealMatrix m=new DenseRealMatrix(testData);DenseRealMatrix m1=(DenseRealMatrix)m.copy();DenseRealMatrix mt=(DenseRealMatrix)m.transpose();assertTrue(m.hashCode()!= mt.hashCode());assertEquals(m.hashCode(),m1.hashCode());assertEquals(m,m);assertEquals(m,m1);assertFalse(m.equals(null));assertFalse(m.equals(mt));assertFalse(m.equals(new DenseRealMatrix(bigSingular)));}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testToString",0,"public void testToString(){DenseRealMatrix m=new DenseRealMatrix(testData);assertEquals(""DenseRealMatrix{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}"",m.toString());}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testSetSubMatrix",0,"public void testSetSubMatrix()throws Exception {DenseRealMatrix m=new DenseRealMatrix(testData);m.setSubMatrix(detData2,1,1);RealMatrix expected=new DenseRealMatrix(new double[][]{{1.0,2.0,3.0},{2.0,1.0,3.0},{1.0,2.0,4.0}});assertEquals(expected,m);m.setSubMatrix(detData2,0,0);expected=new DenseRealMatrix(new double[][]{{1.0,3.0,3.0},{2.0,4.0,3.0},{1.0,2.0,4.0}});assertEquals(expected,m);m.setSubMatrix(testDataPlus2,0,0);expected=new DenseRealMatrix(new double[][]{{3.0,4.0,5.0},{4.0,7.0,5.0},{3.0,2.0,10.0}});assertEquals(expected,m);DenseRealMatrix matrix=new DenseRealMatrix(new double[][]{{1,2,3,4},{5,6,7,8},{9,0,1,2}});matrix.setSubMatrix(new double[][]{{3,4},{5,6}},1,1);expected=new DenseRealMatrix(new double[][]{{1,2,3,4},{5,3,4,8},{9,5,6,2}});assertEquals(expected,matrix);try {m.setSubMatrix(testData,1,1);fail(""expecting MatrixIndexException"");}catch(MatrixIndexException e){}try {m.setSubMatrix(testData,-1,1);fail(""expecting MatrixIndexException"");}catch(MatrixIndexException e){}try {m.setSubMatrix(testData,1,-1);fail(""expecting MatrixIndexException"");}catch(MatrixIndexException e){}try {m.setSubMatrix(null,1,1);fail(""expecting NullPointerException"");}catch(NullPointerException e){}try {m.setSubMatrix(new double[][]{{1},{2,3}},0,0);fail(""expecting IllegalArgumentException"");}catch(IllegalArgumentException e){}try {m.setSubMatrix(new double[][]{{}},0,0);fail(""expecting IllegalArgumentException"");}catch(IllegalArgumentException e){}}"
"org.apache.commons.math.linear.DenseRealMatrixTest.testWalk",0,"public void testWalk(){int rows=150;int columns=75;RealMatrix m=new DenseRealMatrix(rows,columns);m.walkInRowOrder(new SetVisitor());GetVisitor getVisitor=new GetVisitor();m.walkInOptimizedOrder(getVisitor);assertEquals(rows * columns,getVisitor.getCount());m=new DenseRealMatrix(rows,columns);m.walkInRowOrder(new SetVisitor(),1,rows - 2,1,columns - 2);getVisitor=new GetVisitor();m.walkInOptimizedOrder(getVisitor,1,rows - 2,1,columns - 2);assertEquals((rows - 2)* (columns - 2),getVisitor.getCount());for (int i=0;i < rows;++i){assertEquals(0.0,m.getEntry(i,0),0);assertEquals(0.0,m.getEntry(i,columns - 1),0);}for (int j=0;j < columns;++j){assertEquals(0.0,m.getEntry(0,j),0);assertEquals(0.0,m.getEntry(rows - 1,j),0);}m=new DenseRealMatrix(rows,columns);m.walkInColumnOrder(new SetVisitor());getVisitor=new GetVisitor();m.walkInOptimizedOrder(getVisitor);assertEquals(rows * columns,getVisitor.getCount());m=new DenseRealMatrix(rows,columns);m.walkInColumnOrder(new SetVisitor(),1,rows - 2,1,columns - 2);getVisitor=new GetVisitor();m.walkInOptimizedOrder(getVisitor,1,rows - 2,1,columns - 2);assertEquals((rows - 2)* (columns - 2),getVisitor.getCount());for (int i=0;i < rows;++i){assertEquals(0.0,m.getEntry(i,0),0);assertEquals(0.0,m.getEntry(i,columns - 1),0);}for (int j=0;j < columns;++j){assertEquals(0.0,m.getEntry(0,j),0);assertEquals(0.0,m.getEntry(rows - 1,j),0);}m=new DenseRealMatrix(rows,columns);m.walkInOptimizedOrder(new SetVisitor());getVisitor=new GetVisitor();m.walkInRowOrder(getVisitor);assertEquals(rows * columns,getVisitor.getCount());m=new DenseRealMatrix(rows,columns);m.walkInOptimizedOrder(new SetVisitor(),1,rows - 2,1,columns - 2);getVisitor=new GetVisitor();m.walkInRowOrder(getVisitor,1,rows - 2,1,columns - 2);assertEquals((rows - 2)* (columns - 2),getVisitor.getCount());for (int i=0;i < rows;++i){assertEquals(0.0,m.getEntry(i,0),0);assertEquals(0.0,m.getEntry(i,columns - 1),0);}for (int j=0;j < columns;++j){assertEquals(0.0,m.getEntry(0,j),0);assertEquals(0.0,m.getEntry(rows - 1,j),0);}m=new DenseRealMatrix(rows,columns);m.walkInOptimizedOrder(new SetVisitor());getVisitor=new GetVisitor();m.walkInColumnOrder(getVisitor);assertEquals(rows * columns,getVisitor.getCount());m=new DenseRealMatrix(rows,columns);m.walkInOptimizedOrder(new SetVisitor(),1,rows - 2,1,columns - 2);getVisitor=new GetVisitor();m.walkInColumnOrder(getVisitor,1,rows - 2,1,columns - 2);assertEquals((rows - 2)* (columns - 2),getVisitor.getCount());for (int i=0;i < rows;++i){assertEquals(0.0,m.getEntry(i,0),0);assertEquals(0.0,m.getEntry(i,columns - 1),0);}for (int j=0;j < columns;++j){assertEquals(0.0,m.getEntry(0,j),0);assertEquals(0.0,m.getEntry(rows - 1,j),0);}}"
"org.apache.commons.math.optimization.NelderMeadTest.testCostExceptions",0,"public void testCostExceptions()throws ConvergenceException {CostFunction wrong=new CostFunction(){public double cost(double[]x)throws CostException {if (x[0]< 0){throw new CostException(""{0}"",new Object[]{""oops""});}else       if (x[0]> 1){throw new CostException(new RuntimeException(""oops""));}else {return x[0]* (1 - x[0]);}}};try {new NelderMead(0.9,1.9,0.4,0.6).minimize(wrong,10,new ValueChecker(1.0e-3),new double[]{-0.5},new double[]{0.5});fail(""an exception should have been thrown"");}catch(CostException ce){assertNull(ce.getCause());}catch(Exception e){fail(""wrong exception caught: "" + e.getMessage());}try {new NelderMead(0.9,1.9,0.4,0.6).minimize(wrong,10,new ValueChecker(1.0e-3),new double[]{0.5},new double[]{1.5});fail(""an exception should have been thrown"");}catch(CostException ce){assertNotNull(ce.getCause());}catch(Exception e){fail(""wrong exception caught: "" + e.getMessage());}}"
"org.apache.commons.math.optimization.NelderMeadTest.testRosenbrock",0,"public void testRosenbrock()throws CostException,ConvergenceException,NotPositiveDefiniteMatrixException {CostFunction rosenbrock=new CostFunction(){public double cost(double[]x){++count;double a=x[1]- x[0]* x[0];double b=1.0 - x[0];return 100 * a * a + b * b;}};count=0;NelderMead nm=new NelderMead();try {nm.minimize(rosenbrock,100,new ValueChecker(1.0e-3),new double[][]{{-1.2,1.0},{3.5,-2.3},{0.4,1.5}},1,5384353l);fail(""an exception should have been thrown"");}catch(ConvergenceException ce){}catch(Exception e){e.printStackTrace(System.err);fail(""wrong exception caught: "" + e.getMessage());}count=0;PointCostPair optimum=nm.minimize(rosenbrock,100,new ValueChecker(1.0e-3),new double[][]{{-1.2,1.0},{0.9,1.2},{3.5,-2.3}},10,1642738l);assertTrue(count > 700);assertTrue(count < 800);assertEquals(0.0,optimum.getCost(),5.0e-5);assertEquals(1.0,optimum.getPoint()[0],0.01);assertEquals(1.0,optimum.getPoint()[1],0.01);PointCostPair[]minima=nm.getMinima();assertEquals(10,minima.length);assertNotNull(minima[0]);assertNull(minima[minima.length - 1]);for (int i=0;i < minima.length;++i){if (minima[i]== null){if ((i + 1)< minima.length){assertTrue(minima[i + 1]== null);}}else {if (i > 0){assertTrue(minima[i - 1].getCost()<= minima[i].getCost());}}}RandomGenerator rg=new JDKRandomGenerator();rg.setSeed(64453353l);RandomVectorGenerator rvg=new UncorrelatedRandomVectorGenerator(new double[]{0.9,1.1},new double[]{0.2,0.2},new UniformRandomGenerator(rg));optimum=nm.minimize(rosenbrock,100,new ValueChecker(1.0e-3),rvg);assertEquals(0.0,optimum.getCost(),2.0e-4);optimum=nm.minimize(rosenbrock,100,new ValueChecker(1.0e-3),rvg,3);assertEquals(0.0,optimum.getCost(),3.0e-5);}"
"org.apache.commons.math.optimization.NelderMeadTest.testPowell",0,"public void testPowell()throws CostException,ConvergenceException {CostFunction powell=new CostFunction(){public double cost(double[]x){++count;double a=x[0]+ 10 * x[1];double b=x[2]- x[3];double c=x[1]- 2 * x[2];double d=x[0]- x[3];return a * a + 5 * b * b + c * c * c* c + 10 * d * d* d* d;}};count=0;NelderMead nm=new NelderMead();PointCostPair optimum=nm.minimize(powell,200,new ValueChecker(1.0e-3),new double[]{3.0,-1.0,0.0,1.0},new double[]{4.0,0.0,1.0,2.0},1,1642738l);assertTrue(count < 150);assertEquals(0.0,optimum.getCost(),6.0e-4);assertEquals(0.0,optimum.getPoint()[0],0.07);assertEquals(0.0,optimum.getPoint()[1],0.07);assertEquals(0.0,optimum.getPoint()[2],0.07);assertEquals(0.0,optimum.getPoint()[3],0.07);}"
"org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.testMismatch",0,"public void testMismatch(){try {new VectorialCovariance(8,true).increment(new double[5]);fail(""an exception should have been thrown"");}catch(DimensionMismatchException dme){assertEquals(5,dme.getDimension1());assertEquals(8,dme.getDimension2());}catch(Exception e){fail(""wrong exception type caught: "" + e.getClass().getName());}}"
"org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.testSimplistic",0,"public void testSimplistic()throws DimensionMismatchException {VectorialCovariance stat=new VectorialCovariance(2,true);stat.increment(new double[]{-1.0,1.0});stat.increment(new double[]{1.0,-1.0});RealMatrix c=stat.getResult();assertEquals(2.0,c.getEntry(0,0),1.0e-12);assertEquals(-2.0,c.getEntry(1,0),1.0e-12);assertEquals(2.0,c.getEntry(1,1),1.0e-12);}"
"org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.testBasicStats",0,"public void testBasicStats()throws DimensionMismatchException {VectorialCovariance stat=new VectorialCovariance(points[0].length,true);for (int i=0;i < points.length;++i){stat.increment(points[i]);}assertEquals(points.length,stat.getN());RealMatrix c=stat.getResult();double[][]refC=new double[][]{{8.0470,-1.9195,-3.4445},{-1.9195,1.0470,3.2795},{-3.4445,3.2795,12.2070}};for (int i=0;i < c.getRowDimension();++i){for (int j=0;j <= i;++j){assertEquals(refC[i][j],c.getEntry(i,j),1.0e-12);}}}"
"org.apache.commons.math.distribution.BinomialDistributionTest.testDegenerate0",0,"/** * Test degenerate case p = 0   */public void testDegenerate0()throws Exception {setDistribution(new BinomialDistributionImpl(5,0.0d));setCumulativeTestPoints(new int[]{-1,0,1,5,10});setCumulativeTestValues(new double[]{0d,1d,1d,1d,1d});setDensityTestPoints(new int[]{-1,0,1,10,11});setDensityTestValues(new double[]{0d,1d,0d,0d,0d});setInverseCumulativeTestPoints(new double[]{0.1d,0.5d});setInverseCumulativeTestValues(new int[]{-1,-1});verifyDensities();verifyCumulativeProbabilities();verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math.distribution.BinomialDistributionTest.testDegenerate1",0,"/** * Test degenerate case p = 1   */public void testDegenerate1()throws Exception {setDistribution(new BinomialDistributionImpl(5,1.0d));setCumulativeTestPoints(new int[]{-1,0,1,2,5,10});setCumulativeTestValues(new double[]{0d,0d,0d,0d,1d,1d});setDensityTestPoints(new int[]{-1,0,1,2,5,10});setDensityTestValues(new double[]{0d,0d,0d,0d,1d,0d});setInverseCumulativeTestPoints(new double[]{0.1d,0.5d});setInverseCumulativeTestValues(new int[]{4,4});verifyDensities();verifyCumulativeProbabilities();verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math.DuplicateSampleAbscissaExceptionTest.testConstructor",0,"public void testConstructor(){DuplicateSampleAbscissaException ex=new DuplicateSampleAbscissaException(1.2,10,11);assertNull(ex.getCause());assertNotNull(ex.getMessage());assertTrue(ex.getMessage().indexOf(""1.2"")> 0);assertEquals(1.2,ex.getDuplicateAbscissa(),0);assertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));}"
"org.apache.commons.math.distribution.NormalDistributionTest.testQuantiles",0,"public void testQuantiles()throws Exception {verifyQuantiles();setDistribution(new NormalDistributionImpl(0,1));verifyQuantiles();setDistribution(new NormalDistributionImpl(0,0.1));verifyQuantiles();}"
"org.apache.commons.math.distribution.NormalDistributionTest.testInverseCumulativeProbabilityExtremes",0,"public void testInverseCumulativeProbabilityExtremes()throws Exception {setInverseCumulativeTestPoints(new double[]{0,1});setInverseCumulativeTestValues(new double[]{Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY});verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math.distribution.NormalDistributionTest.testGetMean",0,"public void testGetMean(){NormalDistribution distribution=(NormalDistribution)getDistribution();assertEquals(2.1,distribution.getMean(),0);}"
"org.apache.commons.math.distribution.NormalDistributionTest.testSetMean",0,"public void testSetMean()throws Exception {double mu=Math.random();NormalDistribution distribution=(NormalDistribution)getDistribution();distribution.setMean(mu);verifyQuantiles();}"
"org.apache.commons.math.distribution.NormalDistributionTest.testGetStandardDeviation",0,"public void testGetStandardDeviation(){NormalDistribution distribution=(NormalDistribution)getDistribution();assertEquals(1.4,distribution.getStandardDeviation(),0);}"
"org.apache.commons.math.distribution.NormalDistributionTest.testSetStandardDeviation",0,"public void testSetStandardDeviation()throws Exception {double sigma=0.1d + Math.random();NormalDistribution distribution=(NormalDistribution)getDistribution();distribution.setStandardDeviation(sigma);assertEquals(sigma,distribution.getStandardDeviation(),0);verifyQuantiles();try {distribution.setStandardDeviation(0);fail(""Expecting IllegalArgumentException for sd = 0"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.distribution.NormalDistributionTest.testDensity",0,"public void testDensity(){double[]x=new double[]{-2,-1,0,1,2};checkDensity(0,1,x,new double[]{0.05399096651,0.24197072452,0.39894228040,0.24197072452,0.05399096651});checkDensity(1.1,1,x,new double[]{0.003266819056,0.043983595980,0.217852177033,0.396952547477,0.266085249899});}"
"org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues",0,"/** * Check to make sure top-coding of extreme values works correctly. Verifies fix for JIRA MATH-167*/public void testExtremeValues()throws Exception {NormalDistribution distribution=(NormalDistribution)getDistribution();distribution.setMean(0);distribution.setStandardDeviation(1);for (int i=0;i < 100;i+=5){double lowerTail=distribution.cumulativeProbability((double)-i);double upperTail=distribution.cumulativeProbability((double)i);if (i < 10){assertTrue(lowerTail > 0.0d);assertTrue(upperTail < 1.0d);}else {assertTrue(lowerTail < 0.00001);assertTrue(upperTail > 0.99999);}}}"
"org.apache.commons.math.distribution.NormalDistributionTest.testCumulativeProbabilities",0,"/** * Verifies that cumulative probability density calculations match expected values using default test instance data*/public void testCumulativeProbabilities()throws Exception {verifyCumulativeProbabilities();}"
"org.apache.commons.math.distribution.NormalDistributionTest.testInverseCumulativeProbabilities",0,"/** * Verifies that inverse cumulative probability density calculations match expected values using default test instance data*/public void testInverseCumulativeProbabilities()throws Exception {verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math.distribution.NormalDistributionTest.testConsistency",0,"/** * Verifies that probability computations are consistent*/public void testConsistency()throws Exception {for (int i=1;i < cumulativeTestPoints.length;i++){TestUtils.assertEquals(0d,distribution.cumulativeProbability(cumulativeTestPoints[i],cumulativeTestPoints[i]),tolerance);double upper=Math.max(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double lower=Math.min(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double diff=distribution.cumulativeProbability(upper)- distribution.cumulativeProbability(lower);double direct=distribution.cumulativeProbability(lower,upper);TestUtils.assertEquals(""Inconsistent cumulative probabilities for ("" + lower + "",""+ upper+ "")"",diff,direct,tolerance);}}"
"org.apache.commons.math.distribution.NormalDistributionTest.testIllegalArguments",0,"/** * Verifies that illegal arguments are correctly handled*/public void testIllegalArguments()throws Exception {try {distribution.cumulativeProbability(1,0);fail(""Expecting IllegalArgumentException for bad cumulativeProbability interval"");}catch(IllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(-1);fail(""Expecting IllegalArgumentException for p = -1"");}catch(IllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(2);fail(""Expecting IllegalArgumentException for p = 2"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.distribution.ExponentialDistributionTest.testCumulativeProbabilityExtremes",0,"public void testCumulativeProbabilityExtremes()throws Exception {setCumulativeTestPoints(new double[]{-2,0});setCumulativeTestValues(new double[]{0,0});verifyCumulativeProbabilities();}"
"org.apache.commons.math.distribution.ExponentialDistributionTest.testInverseCumulativeProbabilityExtremes",0,"public void testInverseCumulativeProbabilityExtremes()throws Exception {setInverseCumulativeTestPoints(new double[]{0,1});setInverseCumulativeTestValues(new double[]{0,Double.POSITIVE_INFINITY});verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math.distribution.ExponentialDistributionTest.testCumulativeProbability2",0,"public void testCumulativeProbability2()throws Exception {double actual=getDistribution().cumulativeProbability(0.25,0.75);assertEquals(0.0905214,actual,10e-4);}"
"org.apache.commons.math.distribution.ExponentialDistributionTest.testDensity",0,"public void testDensity()throws MathException {ExponentialDistribution d1=new ExponentialDistributionImpl(1);assertEquals(0.0,d1.density(-1e-9));assertEquals(1.0,d1.density(0.0));assertEquals(0.0,d1.density(1000.0));assertEquals(Math.exp(-1),d1.density(1.0));assertEquals(Math.exp(-2),d1.density(2.0));ExponentialDistribution d2=new ExponentialDistributionImpl(3);assertEquals(1 / 3.0,d2.density(0.0));assertEquals(0.2388437702,d2.density(1.0),1e-8);assertEquals(0.1711390397,d2.density(2.0),1e-8);}"
"org.apache.commons.math.distribution.ExponentialDistributionTest.testMeanAccessors",0,"public void testMeanAccessors(){ExponentialDistribution distribution=(ExponentialDistribution)getDistribution();assertEquals(5d,distribution.getMean(),Double.MIN_VALUE);distribution.setMean(2d);assertEquals(2d,distribution.getMean(),Double.MIN_VALUE);try {distribution.setMean(0);fail(""Expecting IllegalArgumentException for 0 mean"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.distribution.ExponentialDistributionTest.testCumulativeProbabilities",0,"/** * Verifies that cumulative probability density calculations match expected values using default test instance data*/public void testCumulativeProbabilities()throws Exception {verifyCumulativeProbabilities();}"
"org.apache.commons.math.distribution.ExponentialDistributionTest.testInverseCumulativeProbabilities",0,"/** * Verifies that inverse cumulative probability density calculations match expected values using default test instance data*/public void testInverseCumulativeProbabilities()throws Exception {verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math.distribution.ExponentialDistributionTest.testConsistency",0,"/** * Verifies that probability computations are consistent*/public void testConsistency()throws Exception {for (int i=1;i < cumulativeTestPoints.length;i++){TestUtils.assertEquals(0d,distribution.cumulativeProbability(cumulativeTestPoints[i],cumulativeTestPoints[i]),tolerance);double upper=Math.max(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double lower=Math.min(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double diff=distribution.cumulativeProbability(upper)- distribution.cumulativeProbability(lower);double direct=distribution.cumulativeProbability(lower,upper);TestUtils.assertEquals(""Inconsistent cumulative probabilities for ("" + lower + "",""+ upper+ "")"",diff,direct,tolerance);}}"
"org.apache.commons.math.distribution.ExponentialDistributionTest.testIllegalArguments",0,"/** * Verifies that illegal arguments are correctly handled*/public void testIllegalArguments()throws Exception {try {distribution.cumulativeProbability(1,0);fail(""Expecting IllegalArgumentException for bad cumulativeProbability interval"");}catch(IllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(-1);fail(""Expecting IllegalArgumentException for p = -1"");}catch(IllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(2);fail(""Expecting IllegalArgumentException for p = 2"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.linear.BiDiagonalTransformerTest.testDimensions",0,"public void testDimensions(){checkdimensions(MatrixUtils.createRealMatrix(testSquare));checkdimensions(MatrixUtils.createRealMatrix(testNonSquare));checkdimensions(MatrixUtils.createRealMatrix(testNonSquare).transpose());}"
"org.apache.commons.math.linear.BiDiagonalTransformerTest.testAEqualUSVt",0,"public void testAEqualUSVt(){checkAEqualUSVt(MatrixUtils.createRealMatrix(testSquare));checkAEqualUSVt(MatrixUtils.createRealMatrix(testNonSquare));checkAEqualUSVt(MatrixUtils.createRealMatrix(testNonSquare).transpose());}"
"org.apache.commons.math.linear.BiDiagonalTransformerTest.testUOrthogonal",0,"public void testUOrthogonal(){checkOrthogonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare)).getU());checkOrthogonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare)).getU());checkOrthogonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare).transpose()).getU());}"
"org.apache.commons.math.linear.BiDiagonalTransformerTest.testVOrthogonal",0,"public void testVOrthogonal(){checkOrthogonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare)).getV());checkOrthogonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare)).getV());checkOrthogonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare).transpose()).getV());}"
"org.apache.commons.math.linear.BiDiagonalTransformerTest.testBBiDiagonal",0,"public void testBBiDiagonal(){checkBiDiagonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare)).getB());checkBiDiagonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare)).getB());checkBiDiagonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare).transpose()).getB());}"
"org.apache.commons.math.linear.BiDiagonalTransformerTest.testMatricesValues",0,"public void testMatricesValues(){BiDiagonalTransformer transformer=new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare));final double s17=Math.sqrt(17.0);RealMatrix uRef=MatrixUtils.createRealMatrix(new double[][]{{-8 / (5 * s17),19 / (5 * s17)},{-19 / (5 * s17),-8 / (5 * s17)}});RealMatrix bRef=MatrixUtils.createRealMatrix(new double[][]{{-3 * s17 / 5,32 * s17 / 85},{0.0,-5 * s17 / 17}});RealMatrix vRef=MatrixUtils.createRealMatrix(new double[][]{{1.0,0.0},{0.0,-1.0}});RealMatrix u=transformer.getU();assertEquals(0,u.subtract(uRef).getNorm(),1.0e-14);RealMatrix b=transformer.getB();assertEquals(0,b.subtract(bRef).getNorm(),1.0e-14);RealMatrix v=transformer.getV();assertEquals(0,v.subtract(vRef).getNorm(),1.0e-14);assertTrue(u == transformer.getU());assertTrue(b == transformer.getB());assertTrue(v == transformer.getV());}"
"org.apache.commons.math.linear.BiDiagonalTransformerTest.testUpperOrLower",0,"public void testUpperOrLower(){assertTrue(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare)).isUpperBiDiagonal());assertTrue(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare)).isUpperBiDiagonal());assertFalse(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare).transpose()).isUpperBiDiagonal());}"
"org.apache.commons.math.ode.sampling.StepNormalizerTest.testBoundaries",0,"public void testBoundaries()throws DerivativeException,IntegratorException {double range=pb.getFinalTime()- pb.getInitialTime();setLastSeen(false);integ.addStepHandler(new StepNormalizer(range / 10.0,new FixedStepHandler(){private static final long serialVersionUID=1650337364641626444L;private boolean firstCall=true;public void handleStep(double t,double[]y,double[]yDot,boolean isLast){if (firstCall){checkValue(t,pb.getInitialTime());firstCall=false;}if (isLast){setLastSeen(true);checkValue(t,pb.getFinalTime());}}}));integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(lastSeen);}"
"org.apache.commons.math.ode.sampling.StepNormalizerTest.testBeforeEnd",0,"public void testBeforeEnd()throws DerivativeException,IntegratorException {final double range=pb.getFinalTime()- pb.getInitialTime();setLastSeen(false);integ.addStepHandler(new StepNormalizer(range / 10.5,new FixedStepHandler(){private static final long serialVersionUID=2228457391561277298L;public void handleStep(double t,double[]y,double[]yDot,boolean isLast){if (isLast){setLastSeen(true);checkValue(t,pb.getFinalTime()- range / 21.0);}}}));integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(lastSeen);}"
"org.apache.commons.math.analysis.BisectionSolverTest.testDeprecated",0,"@Deprecated public void testDeprecated()throws MathException {UnivariateRealFunction f=new SinFunction();double result;UnivariateRealSolver solver=new BisectionSolver(f);result=solver.solve(3,4);assertEquals(result,Math.PI,solver.getAbsoluteAccuracy());result=solver.solve(1,4);assertEquals(result,Math.PI,solver.getAbsoluteAccuracy());}"
"org.apache.commons.math.analysis.BisectionSolverTest.testSinZero",0,"public void testSinZero()throws MathException {UnivariateRealFunction f=new SinFunction();double result;UnivariateRealSolver solver=new BisectionSolver();result=solver.solve(f,3,4);assertEquals(result,Math.PI,solver.getAbsoluteAccuracy());result=solver.solve(f,1,4);assertEquals(result,Math.PI,solver.getAbsoluteAccuracy());}"
"org.apache.commons.math.analysis.BisectionSolverTest.testQuinticZero",0,"public void testQuinticZero()throws MathException {UnivariateRealFunction f=new QuinticFunction();double result;UnivariateRealSolver solver=new BisectionSolver();result=solver.solve(f,-0.2,0.2);assertEquals(result,0,solver.getAbsoluteAccuracy());result=solver.solve(f,-0.1,0.3);assertEquals(result,0,solver.getAbsoluteAccuracy());result=solver.solve(f,-0.3,0.45);assertEquals(result,0,solver.getAbsoluteAccuracy());result=solver.solve(f,0.3,0.7);assertEquals(result,0.5,solver.getAbsoluteAccuracy());result=solver.solve(f,0.2,0.6);assertEquals(result,0.5,solver.getAbsoluteAccuracy());result=solver.solve(f,0.05,0.95);assertEquals(result,0.5,solver.getAbsoluteAccuracy());result=solver.solve(f,0.85,1.25);assertEquals(result,1.0,solver.getAbsoluteAccuracy());result=solver.solve(f,0.8,1.2);assertEquals(result,1.0,solver.getAbsoluteAccuracy());result=solver.solve(f,0.85,1.75);assertEquals(result,1.0,solver.getAbsoluteAccuracy());result=solver.solve(f,0.55,1.45);assertEquals(result,1.0,solver.getAbsoluteAccuracy());result=solver.solve(f,0.85,5);assertEquals(result,1.0,solver.getAbsoluteAccuracy());assertEquals(result,solver.getResult(),0);assertTrue(solver.getIterationCount()> 0);}"
"org.apache.commons.math.analysis.BisectionSolverTest.testSetFunctionValueAccuracy",0,"/** */public void testSetFunctionValueAccuracy(){double expected=1.0e-2;UnivariateRealSolver solver=new BisectionSolver();solver.setFunctionValueAccuracy(expected);assertEquals(expected,solver.getFunctionValueAccuracy(),1.0e-2);}"
"org.apache.commons.math.analysis.BisectionSolverTest.testResetFunctionValueAccuracy",0,"/** */public void testResetFunctionValueAccuracy(){double newValue=1.0e-2;UnivariateRealSolver solver=new BisectionSolver();double oldValue=solver.getFunctionValueAccuracy();solver.setFunctionValueAccuracy(newValue);solver.resetFunctionValueAccuracy();assertEquals(oldValue,solver.getFunctionValueAccuracy(),1.0e-2);}"
"org.apache.commons.math.analysis.BisectionSolverTest.testSetAbsoluteAccuracy",0,"/** */public void testSetAbsoluteAccuracy(){double expected=1.0e-2;UnivariateRealSolver solver=new BisectionSolver();solver.setAbsoluteAccuracy(expected);assertEquals(expected,solver.getAbsoluteAccuracy(),1.0e-2);}"
"org.apache.commons.math.analysis.BisectionSolverTest.testResetAbsoluteAccuracy",0,"/** */public void testResetAbsoluteAccuracy(){double newValue=1.0e-2;UnivariateRealSolver solver=new BisectionSolver();double oldValue=solver.getAbsoluteAccuracy();solver.setAbsoluteAccuracy(newValue);solver.resetAbsoluteAccuracy();assertEquals(oldValue,solver.getAbsoluteAccuracy(),1.0e-2);}"
"org.apache.commons.math.analysis.BisectionSolverTest.testSetMaximalIterationCount",0,"/** */public void testSetMaximalIterationCount(){int expected=100;UnivariateRealSolver solver=new BisectionSolver();solver.setMaximalIterationCount(expected);assertEquals(expected,solver.getMaximalIterationCount());}"
"org.apache.commons.math.analysis.BisectionSolverTest.testResetMaximalIterationCount",0,"/** */public void testResetMaximalIterationCount(){int newValue=10000;UnivariateRealSolver solver=new BisectionSolver();int oldValue=solver.getMaximalIterationCount();solver.setMaximalIterationCount(newValue);solver.resetMaximalIterationCount();assertEquals(oldValue,solver.getMaximalIterationCount());}"
"org.apache.commons.math.analysis.BisectionSolverTest.testSetRelativeAccuracy",0,"/** */public void testSetRelativeAccuracy(){double expected=1.0e-2;UnivariateRealSolver solver=new BisectionSolver();solver.setRelativeAccuracy(expected);assertEquals(expected,solver.getRelativeAccuracy(),1.0e-2);}"
"org.apache.commons.math.analysis.BisectionSolverTest.testResetRelativeAccuracy",0,"/** */public void testResetRelativeAccuracy(){double newValue=1.0e-2;UnivariateRealSolver solver=new BisectionSolver();double oldValue=solver.getRelativeAccuracy();solver.setRelativeAccuracy(newValue);solver.resetRelativeAccuracy();assertEquals(oldValue,solver.getRelativeAccuracy(),1.0e-2);}"
"org.apache.commons.math.analysis.BisectionSolverTest.testSerialization",0,"/** * Test Serialization and Recovery*/public void testSerialization()throws MathException {UnivariateRealFunction f=(UnivariateRealFunction)TestUtils.serializeAndRecover(new QuinticFunction());double result;BisectionSolver solver=new BisectionSolver();UnivariateRealSolver solver2=(UnivariateRealSolver)TestUtils.serializeAndRecover(solver);result=solver.solve(f,-0.2,0.2);assertEquals(result,0,solver.getAbsoluteAccuracy());assertEquals(solver2.solve(f,-0.2,0.2),result,solver2.getAbsoluteAccuracy());result=solver.solve(f,-0.1,0.3);assertEquals(result,0,solver.getAbsoluteAccuracy());assertEquals(solver2.solve(f,-0.1,0.3),result,solver2.getAbsoluteAccuracy());result=solver.solve(f,-0.3,0.45);assertEquals(result,0,solver.getAbsoluteAccuracy());assertEquals(solver2.solve(f,-0.3,0.45),result,solver2.getAbsoluteAccuracy());result=solver.solve(f,0.3,0.7);assertEquals(result,0.5,solver.getAbsoluteAccuracy());assertEquals(solver2.solve(f,0.3,0.7),result,solver2.getAbsoluteAccuracy());result=solver.solve(f,0.2,0.6);assertEquals(result,0.5,solver.getAbsoluteAccuracy());assertEquals(solver2.solve(f,0.2,0.6),result,solver2.getAbsoluteAccuracy());result=solver.solve(f,0.05,0.95);assertEquals(result,0.5,solver.getAbsoluteAccuracy());assertEquals(solver2.solve(f,0.05,0.95),result,solver2.getAbsoluteAccuracy());result=solver.solve(f,0.85,1.25);assertEquals(result,1.0,solver.getAbsoluteAccuracy());assertEquals(solver2.solve(f,0.85,1.25),result,solver2.getAbsoluteAccuracy());result=solver.solve(f,0.8,1.2);assertEquals(result,1.0,solver.getAbsoluteAccuracy());assertEquals(solver2.solve(f,0.8,1.2),result,solver2.getAbsoluteAccuracy());result=solver.solve(f,0.85,1.75);assertEquals(result,1.0,solver.getAbsoluteAccuracy());assertEquals(solver2.solve(f,0.85,1.75),result,solver2.getAbsoluteAccuracy());result=solver.solve(f,0.55,1.45);assertEquals(result,1.0,solver.getAbsoluteAccuracy());assertEquals(solver2.solve(f,0.55,1.45),result,solver2.getAbsoluteAccuracy());result=solver.solve(f,0.85,5);assertEquals(result,1.0,solver.getAbsoluteAccuracy());assertEquals(solver2.solve(f,0.85,5),result,solver2.getAbsoluteAccuracy());double newValue=1.0e-2;f=(UnivariateRealFunction)TestUtils.serializeAndRecover(new QuinticFunction());solver=new BisectionSolver();double oldValue=solver.getRelativeAccuracy();solver.setRelativeAccuracy(newValue);solver.resetRelativeAccuracy();assertEquals(oldValue,solver.getRelativeAccuracy(),1.0e-2);solver2=(UnivariateRealSolver)TestUtils.serializeAndRecover(solver);assertEquals(oldValue,solver2.getRelativeAccuracy(),1.0e-2);solver2.setRelativeAccuracy(newValue);solver2.resetRelativeAccuracy();assertEquals(oldValue,solver2.getRelativeAccuracy(),1.0e-2);}"
"org.apache.commons.math.linear.SingularValueSolverTest.testSolveDimensionErrors",0,"/** * test solve dimension errors */public void testSolveDimensionErrors(){DecompositionSolver solver=new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testSquare)).getSolver();RealMatrix b=MatrixUtils.createRealMatrix(new double[3][2]);try {solver.solve(b);fail(""an exception should have been thrown"");}catch(IllegalArgumentException iae){}catch(Exception e){fail(""wrong exception caught"");}try {solver.solve(b.getColumn(0));fail(""an exception should have been thrown"");}catch(IllegalArgumentException iae){}catch(Exception e){fail(""wrong exception caught"");}try {solver.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)));fail(""an exception should have been thrown"");}catch(IllegalArgumentException iae){}catch(Exception e){fail(""wrong exception caught"");}}"
"org.apache.commons.math.linear.SingularValueSolverTest.testSolveSingularityErrors",0,"/** * test solve singularity errors */public void testSolveSingularityErrors(){RealMatrix m=MatrixUtils.createRealMatrix(new double[][]{{1.0,0.0},{0.0,0.0}});DecompositionSolver solver=new SingularValueDecompositionImpl(m).getSolver();RealMatrix b=MatrixUtils.createRealMatrix(new double[2][2]);try {solver.solve(b);fail(""an exception should have been thrown"");}catch(InvalidMatrixException ime){}catch(Exception e){fail(""wrong exception caught"");}try {solver.solve(b.getColumn(0));fail(""an exception should have been thrown"");}catch(InvalidMatrixException ime){}catch(Exception e){fail(""wrong exception caught"");}try {solver.solve(b.getColumnVector(0));fail(""an exception should have been thrown"");}catch(InvalidMatrixException ime){}catch(Exception e){fail(""wrong exception caught"");}try {solver.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)));fail(""an exception should have been thrown"");}catch(InvalidMatrixException ime){}catch(Exception e){fail(""wrong exception caught"");}}"
"org.apache.commons.math.linear.SingularValueSolverTest.testSolve",0,"/** * test solve */public void testSolve(){DecompositionSolver solver=new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testSquare)).getSolver();RealMatrix b=MatrixUtils.createRealMatrix(new double[][]{{1,2,3},{0,-5,1}});RealMatrix xRef=MatrixUtils.createRealMatrix(new double[][]{{-8.0 / 25.0,-263.0 / 75.0,-29.0 / 75.0},{19.0 / 25.0,78.0 / 25.0,49.0 / 25.0}});assertEquals(0,solver.solve(b).subtract(xRef).getNorm(),normTolerance);for (int i=0;i < b.getColumnDimension();++i){assertEquals(0,new RealVectorImpl(solver.solve(b.getColumn(i))).subtract(xRef.getColumnVector(i)).getNorm(),1.0e-13);}for (int i=0;i < b.getColumnDimension();++i){assertEquals(0,solver.solve(b.getColumnVector(i)).subtract(xRef.getColumnVector(i)).getNorm(),1.0e-13);}for (int i=0;i < b.getColumnDimension();++i){RealVectorImplTest.RealVectorTestImpl v=new RealVectorImplTest.RealVectorTestImpl(b.getColumn(i));assertEquals(0,solver.solve(v).subtract(xRef.getColumnVector(i)).getNorm(),1.0e-13);}}"
"org.apache.commons.math.linear.SingularValueSolverTest.testConditionNumber",0,"/** * test condition number */public void testConditionNumber(){SingularValueDecompositionImpl svd=new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testSquare));assertEquals(3.0,svd.getConditionNumber(),1.0e-15);}"
"org.apache.commons.math.util.MathUtilsTest.test0Choose0",0,"/** * Verify that b(0,0)= 1 */public void test0Choose0(){assertEquals(MathUtils.binomialCoefficientDouble(0,0),1d,0);assertEquals(MathUtils.binomialCoefficientLog(0,0),0d,0);assertEquals(MathUtils.binomialCoefficient(0,0),1);}"
"org.apache.commons.math.util.MathUtilsTest.testAddAndCheck",0,"public void testAddAndCheck(){int big=Integer.MAX_VALUE;int bigNeg=Integer.MIN_VALUE;assertEquals(big,MathUtils.addAndCheck(big,0));try {MathUtils.addAndCheck(big,1);fail(""Expecting ArithmeticException"");}catch(ArithmeticException ex){}try {MathUtils.addAndCheck(bigNeg,-1);fail(""Expecting ArithmeticException"");}catch(ArithmeticException ex){}}"
"org.apache.commons.math.util.MathUtilsTest.testAddAndCheckLong",0,"public void testAddAndCheckLong(){long max=Long.MAX_VALUE;long min=Long.MIN_VALUE;assertEquals(max,MathUtils.addAndCheck(max,0L));assertEquals(min,MathUtils.addAndCheck(min,0L));assertEquals(max,MathUtils.addAndCheck(0L,max));assertEquals(min,MathUtils.addAndCheck(0L,min));assertEquals(1,MathUtils.addAndCheck(-1L,2L));assertEquals(1,MathUtils.addAndCheck(2L,-1L));testAddAndCheckLongFailure(max,1L);testAddAndCheckLongFailure(min,-1L);testAddAndCheckLongFailure(1L,max);testAddAndCheckLongFailure(-1L,min);}"
"org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficient",0,"public void testBinomialCoefficient(){long[]bcoef5={1,5,10,10,5,1};long[]bcoef6={1,6,15,20,15,6,1};for (int i=0;i < 6;i++){assertEquals(""5 choose "" + i,bcoef5[i],MathUtils.binomialCoefficient(5,i));}for (int i=0;i < 7;i++){assertEquals(""6 choose "" + i,bcoef6[i],MathUtils.binomialCoefficient(6,i));}for (int n=1;n < 10;n++){for (int k=0;k <= n;k++){assertEquals(n + "" choose "" + k,binomialCoefficient(n,k),MathUtils.binomialCoefficient(n,k));assertEquals(n + "" choose "" + k,(double)binomialCoefficient(n,k),MathUtils.binomialCoefficientDouble(n,k),Double.MIN_VALUE);assertEquals(n + "" choose "" + k,Math.log((double)binomialCoefficient(n,k)),MathUtils.binomialCoefficientLog(n,k),10E-12);}}}"
"org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientFail",0,"public void testBinomialCoefficientFail(){try {MathUtils.binomialCoefficient(4,5);fail(""expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){;}try {MathUtils.binomialCoefficientDouble(4,5);fail(""expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){;}try {MathUtils.binomialCoefficientLog(4,5);fail(""expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){;}try {MathUtils.binomialCoefficient(67,34);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){;}double x=MathUtils.binomialCoefficientDouble(1030,515);assertTrue(""expecting infinite binomial coefficient"",Double.isInfinite(x));}"
"org.apache.commons.math.util.MathUtilsTest.testCosh",0,"public void testCosh(){double x=3.0;double expected=10.06766;assertEquals(expected,MathUtils.cosh(x),1.0e-5);}"
"org.apache.commons.math.util.MathUtilsTest.testCoshNaN",0,"public void testCoshNaN(){assertTrue(Double.isNaN(MathUtils.cosh(Double.NaN)));}"
"org.apache.commons.math.util.MathUtilsTest.testEquals",0,"public void testEquals(){double[]testArray={Double.NaN,Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,1d,0d};for (int i=0;i < testArray.length;i++){for (int j=0;j < testArray.length;j++){if (i == j){assertTrue(MathUtils.equals(testArray[i],testArray[j]));assertTrue(MathUtils.equals(testArray[j],testArray[i]));}else {assertTrue(!MathUtils.equals(testArray[i],testArray[j]));assertTrue(!MathUtils.equals(testArray[j],testArray[i]));}}}}"
"org.apache.commons.math.util.MathUtilsTest.testArrayEquals",0,"public void testArrayEquals(){assertFalse(MathUtils.equals(new double[]{1d},null));assertFalse(MathUtils.equals(null,new double[]{1d}));assertTrue(MathUtils.equals((double[])null,(double[])null));assertFalse(MathUtils.equals(new double[]{1d},new double[0]));assertTrue(MathUtils.equals(new double[]{1d},new double[]{1d}));assertTrue(MathUtils.equals(new double[]{Double.NaN,Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,1d,0d},new double[]{Double.NaN,Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,1d,0d}));assertFalse(MathUtils.equals(new double[]{Double.POSITIVE_INFINITY},new double[]{Double.NEGATIVE_INFINITY}));assertFalse(MathUtils.equals(new double[]{1d},new double[]{MathUtils.nextAfter(1d,2d)}));}"
"org.apache.commons.math.util.MathUtilsTest.testFactorial",0,"public void testFactorial(){for (int i=1;i < 10;i++){assertEquals(i + ""! "",factorial(i),MathUtils.factorial(i));assertEquals(i + ""! "",(double)factorial(i),MathUtils.factorialDouble(i),Double.MIN_VALUE);assertEquals(i + ""! "",Math.log((double)factorial(i)),MathUtils.factorialLog(i),10E-12);}assertEquals(""0"",1,MathUtils.factorial(0));assertEquals(""0"",1.0d,MathUtils.factorialDouble(0),1E-14);assertEquals(""0"",0.0d,MathUtils.factorialLog(0),1E-14);}"
"org.apache.commons.math.util.MathUtilsTest.testFactorialFail",0,"public void testFactorialFail(){try {MathUtils.factorial(-1);fail(""expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){;}try {MathUtils.factorialDouble(-1);fail(""expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){;}try {MathUtils.factorialLog(-1);fail(""expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){;}try {MathUtils.factorial(21);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){;}assertTrue(""expecting infinite factorial value"",Double.isInfinite(MathUtils.factorialDouble(171)));}"
"org.apache.commons.math.util.MathUtilsTest.testGcd",1,"public void testGcd(){int a=30;int b=50;int c=77;assertEquals(0,MathUtils.gcd(0,0));assertEquals(b,MathUtils.gcd(0,b));assertEquals(a,MathUtils.gcd(a,0));assertEquals(b,MathUtils.gcd(0,-b));assertEquals(a,MathUtils.gcd(-a,0));assertEquals(10,MathUtils.gcd(a,b));assertEquals(10,MathUtils.gcd(-a,b));assertEquals(10,MathUtils.gcd(a,-b));assertEquals(10,MathUtils.gcd(-a,-b));assertEquals(1,MathUtils.gcd(a,c));assertEquals(1,MathUtils.gcd(-a,c));assertEquals(1,MathUtils.gcd(a,-c));assertEquals(1,MathUtils.gcd(-a,-c));assertEquals(3 * (1 << 15),MathUtils.gcd(3 * (1 << 20),9 * (1 << 15)));}"
"org.apache.commons.math.util.MathUtilsTest.testHash",0,"public void testHash(){double[]testArray={Double.NaN,Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,1d,0d,1E-14,(1 + 1E-14),Double.MIN_VALUE,Double.MAX_VALUE};for (int i=0;i < testArray.length;i++){for (int j=0;j < testArray.length;j++){if (i == j){assertEquals(MathUtils.hash(testArray[i]),MathUtils.hash(testArray[j]));assertEquals(MathUtils.hash(testArray[j]),MathUtils.hash(testArray[i]));}else {assertTrue(MathUtils.hash(testArray[i])!= MathUtils.hash(testArray[j]));assertTrue(MathUtils.hash(testArray[j])!= MathUtils.hash(testArray[i]));}}}}"
"org.apache.commons.math.util.MathUtilsTest.testArrayHash",0,"public void testArrayHash(){assertEquals(0,MathUtils.hash((double[])null));assertEquals(MathUtils.hash(new double[]{Double.NaN,Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,1d,0d}),MathUtils.hash(new double[]{Double.NaN,Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,1d,0d}));assertFalse(MathUtils.hash(new double[]{1d})== MathUtils.hash(new double[]{MathUtils.nextAfter(1d,2d)}));assertFalse(MathUtils.hash(new double[]{1d})== MathUtils.hash(new double[]{1d,1d}));}"
"org.apache.commons.math.util.MathUtilsTest.testPermutedArrayHash",0,"/** * Make sure that permuted arrays do not hash to the same value.*/public void testPermutedArrayHash(){double[]original=new double[10];double[]permuted=new double[10];RandomDataImpl random=new RandomDataImpl();for (int i=0;i < 10;i++){original[i]=random.nextUniform((double)i + 0.5,(double)i + 0.75);}boolean isIdentity=true;do {int[]permutation=random.nextPermutation(10,10);for (int i=0;i < 10;i++){if (i != permutation[i]){isIdentity=false;}permuted[i]=original[permutation[i]];}}while (isIdentity);assertFalse(MathUtils.hash(original)== MathUtils.hash(permuted));}"
"org.apache.commons.math.util.MathUtilsTest.testIndicatorByte",0,"public void testIndicatorByte(){assertEquals((byte)1,MathUtils.indicator((byte)2));assertEquals((byte)1,MathUtils.indicator((byte)0));assertEquals((byte)(-1),MathUtils.indicator((byte)(-2)));}"
"org.apache.commons.math.util.MathUtilsTest.testIndicatorDouble",0,"public void testIndicatorDouble(){double delta=0.0;assertEquals(1.0,MathUtils.indicator(2.0),delta);assertEquals(1.0,MathUtils.indicator(0.0),delta);assertEquals(-1.0,MathUtils.indicator(-2.0),delta);}"
"org.apache.commons.math.util.MathUtilsTest.testIndicatorFloat",0,"public void testIndicatorFloat(){float delta=0.0F;assertEquals(1.0F,MathUtils.indicator(2.0F),delta);assertEquals(1.0F,MathUtils.indicator(0.0F),delta);assertEquals(-1.0F,MathUtils.indicator(-2.0F),delta);}"
"org.apache.commons.math.util.MathUtilsTest.testIndicatorInt",0,"public void testIndicatorInt(){assertEquals((int)1,MathUtils.indicator((int)(2)));assertEquals((int)1,MathUtils.indicator((int)(0)));assertEquals((int)(-1),MathUtils.indicator((int)(-2)));}"
"org.apache.commons.math.util.MathUtilsTest.testIndicatorLong",0,"public void testIndicatorLong(){assertEquals(1L,MathUtils.indicator(2L));assertEquals(1L,MathUtils.indicator(0L));assertEquals(-1L,MathUtils.indicator(-2L));}"
"org.apache.commons.math.util.MathUtilsTest.testIndicatorShort",0,"public void testIndicatorShort(){assertEquals((short)1,MathUtils.indicator((short)2));assertEquals((short)1,MathUtils.indicator((short)0));assertEquals((short)(-1),MathUtils.indicator((short)(-2)));}"
"org.apache.commons.math.util.MathUtilsTest.testLcm",0,"public void testLcm(){int a=30;int b=50;int c=77;assertEquals(0,MathUtils.lcm(0,b));assertEquals(0,MathUtils.lcm(a,0));assertEquals(b,MathUtils.lcm(1,b));assertEquals(a,MathUtils.lcm(a,1));assertEquals(150,MathUtils.lcm(a,b));assertEquals(150,MathUtils.lcm(-a,b));assertEquals(150,MathUtils.lcm(a,-b));assertEquals(2310,MathUtils.lcm(a,c));try {MathUtils.lcm(Integer.MAX_VALUE,Integer.MAX_VALUE - 1);fail(""Expecting ArithmeticException"");}catch(ArithmeticException ex){}}"
"org.apache.commons.math.util.MathUtilsTest.testLog",0,"public void testLog(){assertEquals(2.0,MathUtils.log(2,4),0);assertEquals(3.0,MathUtils.log(2,8),0);assertTrue(Double.isNaN(MathUtils.log(-1,1)));assertTrue(Double.isNaN(MathUtils.log(1,-1)));assertTrue(Double.isNaN(MathUtils.log(0,0)));assertEquals(0,MathUtils.log(0,10),0);assertEquals(Double.NEGATIVE_INFINITY,MathUtils.log(10,0),0);}"
"org.apache.commons.math.util.MathUtilsTest.testMulAndCheck",0,"public void testMulAndCheck(){int big=Integer.MAX_VALUE;int bigNeg=Integer.MIN_VALUE;assertEquals(big,MathUtils.mulAndCheck(big,1));try {MathUtils.mulAndCheck(big,2);fail(""Expecting ArithmeticException"");}catch(ArithmeticException ex){}try {MathUtils.mulAndCheck(bigNeg,2);fail(""Expecting ArithmeticException"");}catch(ArithmeticException ex){}}"
"org.apache.commons.math.util.MathUtilsTest.testMulAndCheckLong",0,"public void testMulAndCheckLong(){long max=Long.MAX_VALUE;long min=Long.MIN_VALUE;assertEquals(max,MathUtils.mulAndCheck(max,1L));assertEquals(min,MathUtils.mulAndCheck(min,1L));assertEquals(0L,MathUtils.mulAndCheck(max,0L));assertEquals(0L,MathUtils.mulAndCheck(min,0L));assertEquals(max,MathUtils.mulAndCheck(1L,max));assertEquals(min,MathUtils.mulAndCheck(1L,min));assertEquals(0L,MathUtils.mulAndCheck(0L,max));assertEquals(0L,MathUtils.mulAndCheck(0L,min));testMulAndCheckLongFailure(max,2L);testMulAndCheckLongFailure(2L,max);testMulAndCheckLongFailure(min,2L);testMulAndCheckLongFailure(2L,min);testMulAndCheckLongFailure(min,-1L);testMulAndCheckLongFailure(-1L,min);}"
"org.apache.commons.math.util.MathUtilsTest.testNextAfter",0,"public void testNextAfter(){assertEquals(16.0,MathUtils.nextAfter(15.999999999999998,34.27555555555555),0.0);assertEquals(-15.999999999999996,MathUtils.nextAfter(-15.999999999999998,34.27555555555555),0.0);assertEquals(15.999999999999996,MathUtils.nextAfter(15.999999999999998,2.142222222222222),0.0);assertEquals(-15.999999999999996,MathUtils.nextAfter(-15.999999999999998,2.142222222222222),0.0);assertEquals(8.000000000000002,MathUtils.nextAfter(8.0,34.27555555555555),0.0);assertEquals(-7.999999999999999,MathUtils.nextAfter(-8.0,34.27555555555555),0.0);assertEquals(7.999999999999999,MathUtils.nextAfter(8.0,2.142222222222222),0.0);assertEquals(-7.999999999999999,MathUtils.nextAfter(-8.0,2.142222222222222),0.0);assertEquals(2.308922399667661E-4,MathUtils.nextAfter(2.3089223996676606E-4,2.308922399667661E-4),0.0);assertEquals(2.308922399667661E-4,MathUtils.nextAfter(2.3089223996676606E-4,2.3089223996676606E-4),0.0);assertEquals(2.3089223996676603E-4,MathUtils.nextAfter(2.3089223996676606E-4,2.3089223996676603E-4),0.0);assertEquals(2.3089223996676603E-4,MathUtils.nextAfter(2.3089223996676606E-4,-2.308922399667661E-4),0.0);assertEquals(2.3089223996676603E-4,MathUtils.nextAfter(2.3089223996676606E-4,-2.3089223996676606E-4),0.0);assertEquals(2.3089223996676603E-4,MathUtils.nextAfter(2.3089223996676606E-4,-2.3089223996676603E-4),0.0);assertEquals(-2.3089223996676603E-4,MathUtils.nextAfter(-2.3089223996676606E-4,2.308922399667661E-4),0.0);assertEquals(-2.3089223996676603E-4,MathUtils.nextAfter(-2.3089223996676606E-4,2.3089223996676606E-4),0.0);assertEquals(-2.3089223996676603E-4,MathUtils.nextAfter(-2.3089223996676606E-4,2.3089223996676603E-4),0.0);assertEquals(-2.308922399667661E-4,MathUtils.nextAfter(-2.3089223996676606E-4,-2.308922399667661E-4),0.0);assertEquals(-2.308922399667661E-4,MathUtils.nextAfter(-2.3089223996676606E-4,-2.3089223996676606E-4),0.0);assertEquals(-2.3089223996676603E-4,MathUtils.nextAfter(-2.3089223996676606E-4,-2.3089223996676603E-4),0.0);}"
"org.apache.commons.math.util.MathUtilsTest.testNextAfterSpecialCases",0,"public void testNextAfterSpecialCases(){assertTrue(Double.isInfinite(MathUtils.nextAfter(Double.NEGATIVE_INFINITY,0)));assertTrue(Double.isInfinite(MathUtils.nextAfter(Double.POSITIVE_INFINITY,0)));assertTrue(Double.isNaN(MathUtils.nextAfter(Double.NaN,0)));assertTrue(Double.isInfinite(MathUtils.nextAfter(Double.MAX_VALUE,Double.POSITIVE_INFINITY)));assertTrue(Double.isInfinite(MathUtils.nextAfter(-Double.MAX_VALUE,Double.NEGATIVE_INFINITY)));assertEquals(Double.MIN_VALUE,MathUtils.nextAfter(0,1),0);assertEquals(-Double.MIN_VALUE,MathUtils.nextAfter(0,-1),0);assertEquals(0,MathUtils.nextAfter(Double.MIN_VALUE,-1),0);assertEquals(0,MathUtils.nextAfter(-Double.MIN_VALUE,1),0);}"
"org.apache.commons.math.util.MathUtilsTest.testScalb",0,"public void testScalb(){assertEquals(0.0,MathUtils.scalb(0.0,5),1.0e-15);assertEquals(32.0,MathUtils.scalb(1.0,5),1.0e-15);assertEquals(1.0 / 32.0,MathUtils.scalb(1.0,-5),1.0e-15);assertEquals(Math.PI,MathUtils.scalb(Math.PI,0),1.0e-15);assertTrue(Double.isInfinite(MathUtils.scalb(Double.POSITIVE_INFINITY,1)));assertTrue(Double.isInfinite(MathUtils.scalb(Double.NEGATIVE_INFINITY,1)));assertTrue(Double.isNaN(MathUtils.scalb(Double.NaN,1)));}"
"org.apache.commons.math.util.MathUtilsTest.testNormalizeAngle",0,"public void testNormalizeAngle(){for (double a=-15.0;a <= 15.0;a+=0.1){for (double b=-15.0;b <= 15.0;b+=0.2){double c=MathUtils.normalizeAngle(a,b);assertTrue((b - Math.PI)<= c);assertTrue(c <= (b + Math.PI));double twoK=Math.rint((a - c)/ Math.PI);assertEquals(c,a - twoK * Math.PI,1.0e-14);}}}"
"org.apache.commons.math.util.MathUtilsTest.testRoundDouble",0,"public void testRoundDouble(){double x=1.234567890;assertEquals(1.23,MathUtils.round(x,2),0.0);assertEquals(1.235,MathUtils.round(x,3),0.0);assertEquals(1.2346,MathUtils.round(x,4),0.0);assertEquals(39.25,MathUtils.round(39.245,2),0.0);assertEquals(39.24,MathUtils.round(39.245,2,BigDecimal.ROUND_DOWN),0.0);double xx=39.0;xx=xx + 245d / 1000d;assertEquals(39.25,MathUtils.round(xx,2),0.0);assertEquals(30.1d,MathUtils.round(30.095d,2),0.0d);assertEquals(30.1d,MathUtils.round(30.095d,1),0.0d);assertEquals(33.1d,MathUtils.round(33.095d,1),0.0d);assertEquals(33.1d,MathUtils.round(33.095d,2),0.0d);assertEquals(50.09d,MathUtils.round(50.085d,2),0.0d);assertEquals(50.19d,MathUtils.round(50.185d,2),0.0d);assertEquals(50.01d,MathUtils.round(50.005d,2),0.0d);assertEquals(30.01d,MathUtils.round(30.005d,2),0.0d);assertEquals(30.65d,MathUtils.round(30.645d,2),0.0d);assertEquals(1.24,MathUtils.round(x,2,BigDecimal.ROUND_CEILING),0.0);assertEquals(1.235,MathUtils.round(x,3,BigDecimal.ROUND_CEILING),0.0);assertEquals(1.2346,MathUtils.round(x,4,BigDecimal.ROUND_CEILING),0.0);assertEquals(-1.23,MathUtils.round(-x,2,BigDecimal.ROUND_CEILING),0.0);assertEquals(-1.234,MathUtils.round(-x,3,BigDecimal.ROUND_CEILING),0.0);assertEquals(-1.2345,MathUtils.round(-x,4,BigDecimal.ROUND_CEILING),0.0);assertEquals(1.23,MathUtils.round(x,2,BigDecimal.ROUND_DOWN),0.0);assertEquals(1.234,MathUtils.round(x,3,BigDecimal.ROUND_DOWN),0.0);assertEquals(1.2345,MathUtils.round(x,4,BigDecimal.ROUND_DOWN),0.0);assertEquals(-1.23,MathUtils.round(-x,2,BigDecimal.ROUND_DOWN),0.0);assertEquals(-1.234,MathUtils.round(-x,3,BigDecimal.ROUND_DOWN),0.0);assertEquals(-1.2345,MathUtils.round(-x,4,BigDecimal.ROUND_DOWN),0.0);assertEquals(1.23,MathUtils.round(x,2,BigDecimal.ROUND_FLOOR),0.0);assertEquals(1.234,MathUtils.round(x,3,BigDecimal.ROUND_FLOOR),0.0);assertEquals(1.2345,MathUtils.round(x,4,BigDecimal.ROUND_FLOOR),0.0);assertEquals(-1.24,MathUtils.round(-x,2,BigDecimal.ROUND_FLOOR),0.0);assertEquals(-1.235,MathUtils.round(-x,3,BigDecimal.ROUND_FLOOR),0.0);assertEquals(-1.2346,MathUtils.round(-x,4,BigDecimal.ROUND_FLOOR),0.0);assertEquals(1.23,MathUtils.round(x,2,BigDecimal.ROUND_HALF_DOWN),0.0);assertEquals(1.235,MathUtils.round(x,3,BigDecimal.ROUND_HALF_DOWN),0.0);assertEquals(1.2346,MathUtils.round(x,4,BigDecimal.ROUND_HALF_DOWN),0.0);assertEquals(-1.23,MathUtils.round(-x,2,BigDecimal.ROUND_HALF_DOWN),0.0);assertEquals(-1.235,MathUtils.round(-x,3,BigDecimal.ROUND_HALF_DOWN),0.0);assertEquals(-1.2346,MathUtils.round(-x,4,BigDecimal.ROUND_HALF_DOWN),0.0);assertEquals(1.234,MathUtils.round(1.2345,3,BigDecimal.ROUND_HALF_DOWN),0.0);assertEquals(-1.234,MathUtils.round(-1.2345,3,BigDecimal.ROUND_HALF_DOWN),0.0);assertEquals(1.23,MathUtils.round(x,2,BigDecimal.ROUND_HALF_EVEN),0.0);assertEquals(1.235,MathUtils.round(x,3,BigDecimal.ROUND_HALF_EVEN),0.0);assertEquals(1.2346,MathUtils.round(x,4,BigDecimal.ROUND_HALF_EVEN),0.0);assertEquals(-1.23,MathUtils.round(-x,2,BigDecimal.ROUND_HALF_EVEN),0.0);assertEquals(-1.235,MathUtils.round(-x,3,BigDecimal.ROUND_HALF_EVEN),0.0);assertEquals(-1.2346,MathUtils.round(-x,4,BigDecimal.ROUND_HALF_EVEN),0.0);assertEquals(1.234,MathUtils.round(1.2345,3,BigDecimal.ROUND_HALF_EVEN),0.0);assertEquals(-1.234,MathUtils.round(-1.2345,3,BigDecimal.ROUND_HALF_EVEN),0.0);assertEquals(1.236,MathUtils.round(1.2355,3,BigDecimal.ROUND_HALF_EVEN),0.0);assertEquals(-1.236,MathUtils.round(-1.2355,3,BigDecimal.ROUND_HALF_EVEN),0.0);assertEquals(1.23,MathUtils.round(x,2,BigDecimal.ROUND_HALF_UP),0.0);assertEquals(1.235,MathUtils.round(x,3,BigDecimal.ROUND_HALF_UP),0.0);assertEquals(1.2346,MathUtils.round(x,4,BigDecimal.ROUND_HALF_UP),0.0);assertEquals(-1.23,MathUtils.round(-x,2,BigDecimal.ROUND_HALF_UP),0.0);assertEquals(-1.235,MathUtils.round(-x,3,BigDecimal.ROUND_HALF_UP),0.0);assertEquals(-1.2346,MathUtils.round(-x,4,BigDecimal.ROUND_HALF_UP),0.0);assertEquals(1.235,MathUtils.round(1.2345,3,BigDecimal.ROUND_HALF_UP),0.0);assertEquals(-1.235,MathUtils.round(-1.2345,3,BigDecimal.ROUND_HALF_UP),0.0);assertEquals(-1.23,MathUtils.round(-1.23,2,BigDecimal.ROUND_UNNECESSARY),0.0);assertEquals(1.23,MathUtils.round(1.23,2,BigDecimal.ROUND_UNNECESSARY),0.0);try {MathUtils.round(1.234,2,BigDecimal.ROUND_UNNECESSARY);fail();}catch(ArithmeticException ex){}assertEquals(1.24,MathUtils.round(x,2,BigDecimal.ROUND_UP),0.0);assertEquals(1.235,MathUtils.round(x,3,BigDecimal.ROUND_UP),0.0);assertEquals(1.2346,MathUtils.round(x,4,BigDecimal.ROUND_UP),0.0);assertEquals(-1.24,MathUtils.round(-x,2,BigDecimal.ROUND_UP),0.0);assertEquals(-1.235,MathUtils.round(-x,3,BigDecimal.ROUND_UP),0.0);assertEquals(-1.2346,MathUtils.round(-x,4,BigDecimal.ROUND_UP),0.0);try {MathUtils.round(1.234,2,1923);fail();}catch(IllegalArgumentException ex){}assertEquals(39.25,MathUtils.round(39.245,2,BigDecimal.ROUND_HALF_UP),0.0);TestUtils.assertEquals(Double.NaN,MathUtils.round(Double.NaN,2),0.0);assertEquals(0.0,MathUtils.round(0.0,2),0.0);assertEquals(Double.POSITIVE_INFINITY,MathUtils.round(Double.POSITIVE_INFINITY,2),0.0);assertEquals(Double.NEGATIVE_INFINITY,MathUtils.round(Double.NEGATIVE_INFINITY,2),0.0);}"
"org.apache.commons.math.util.MathUtilsTest.testRoundFloat",0,"public void testRoundFloat(){float x=1.234567890f;assertEquals(1.23f,MathUtils.round(x,2),0.0);assertEquals(1.235f,MathUtils.round(x,3),0.0);assertEquals(1.2346f,MathUtils.round(x,4),0.0);assertEquals(30.1f,MathUtils.round(30.095f,2),0.0f);assertEquals(30.1f,MathUtils.round(30.095f,1),0.0f);assertEquals(50.09f,MathUtils.round(50.085f,2),0.0f);assertEquals(50.19f,MathUtils.round(50.185f,2),0.0f);assertEquals(50.01f,MathUtils.round(50.005f,2),0.0f);assertEquals(30.01f,MathUtils.round(30.005f,2),0.0f);assertEquals(30.65f,MathUtils.round(30.645f,2),0.0f);assertEquals(1.24f,MathUtils.round(x,2,BigDecimal.ROUND_CEILING),0.0);assertEquals(1.235f,MathUtils.round(x,3,BigDecimal.ROUND_CEILING),0.0);assertEquals(1.2346f,MathUtils.round(x,4,BigDecimal.ROUND_CEILING),0.0);assertEquals(-1.23f,MathUtils.round(-x,2,BigDecimal.ROUND_CEILING),0.0);assertEquals(-1.234f,MathUtils.round(-x,3,BigDecimal.ROUND_CEILING),0.0);assertEquals(-1.2345f,MathUtils.round(-x,4,BigDecimal.ROUND_CEILING),0.0);assertEquals(1.23f,MathUtils.round(x,2,BigDecimal.ROUND_DOWN),0.0);assertEquals(1.234f,MathUtils.round(x,3,BigDecimal.ROUND_DOWN),0.0);assertEquals(1.2345f,MathUtils.round(x,4,BigDecimal.ROUND_DOWN),0.0);assertEquals(-1.23f,MathUtils.round(-x,2,BigDecimal.ROUND_DOWN),0.0);assertEquals(-1.234f,MathUtils.round(-x,3,BigDecimal.ROUND_DOWN),0.0);assertEquals(-1.2345f,MathUtils.round(-x,4,BigDecimal.ROUND_DOWN),0.0);assertEquals(1.23f,MathUtils.round(x,2,BigDecimal.ROUND_FLOOR),0.0);assertEquals(1.234f,MathUtils.round(x,3,BigDecimal.ROUND_FLOOR),0.0);assertEquals(1.2345f,MathUtils.round(x,4,BigDecimal.ROUND_FLOOR),0.0);assertEquals(-1.24f,MathUtils.round(-x,2,BigDecimal.ROUND_FLOOR),0.0);assertEquals(-1.235f,MathUtils.round(-x,3,BigDecimal.ROUND_FLOOR),0.0);assertEquals(-1.2346f,MathUtils.round(-x,4,BigDecimal.ROUND_FLOOR),0.0);assertEquals(1.23f,MathUtils.round(x,2,BigDecimal.ROUND_HALF_DOWN),0.0);assertEquals(1.235f,MathUtils.round(x,3,BigDecimal.ROUND_HALF_DOWN),0.0);assertEquals(1.2346f,MathUtils.round(x,4,BigDecimal.ROUND_HALF_DOWN),0.0);assertEquals(-1.23f,MathUtils.round(-x,2,BigDecimal.ROUND_HALF_DOWN),0.0);assertEquals(-1.235f,MathUtils.round(-x,3,BigDecimal.ROUND_HALF_DOWN),0.0);assertEquals(-1.2346f,MathUtils.round(-x,4,BigDecimal.ROUND_HALF_DOWN),0.0);assertEquals(1.234f,MathUtils.round(1.2345f,3,BigDecimal.ROUND_HALF_DOWN),0.0);assertEquals(-1.234f,MathUtils.round(-1.2345f,3,BigDecimal.ROUND_HALF_DOWN),0.0);assertEquals(1.23f,MathUtils.round(x,2,BigDecimal.ROUND_HALF_EVEN),0.0);assertEquals(1.235f,MathUtils.round(x,3,BigDecimal.ROUND_HALF_EVEN),0.0);assertEquals(1.2346f,MathUtils.round(x,4,BigDecimal.ROUND_HALF_EVEN),0.0);assertEquals(-1.23f,MathUtils.round(-x,2,BigDecimal.ROUND_HALF_EVEN),0.0);assertEquals(-1.235f,MathUtils.round(-x,3,BigDecimal.ROUND_HALF_EVEN),0.0);assertEquals(-1.2346f,MathUtils.round(-x,4,BigDecimal.ROUND_HALF_EVEN),0.0);assertEquals(1.234f,MathUtils.round(1.2345f,3,BigDecimal.ROUND_HALF_EVEN),0.0);assertEquals(-1.234f,MathUtils.round(-1.2345f,3,BigDecimal.ROUND_HALF_EVEN),0.0);assertEquals(1.236f,MathUtils.round(1.2355f,3,BigDecimal.ROUND_HALF_EVEN),0.0);assertEquals(-1.236f,MathUtils.round(-1.2355f,3,BigDecimal.ROUND_HALF_EVEN),0.0);assertEquals(1.23f,MathUtils.round(x,2,BigDecimal.ROUND_HALF_UP),0.0);assertEquals(1.235f,MathUtils.round(x,3,BigDecimal.ROUND_HALF_UP),0.0);assertEquals(1.2346f,MathUtils.round(x,4,BigDecimal.ROUND_HALF_UP),0.0);assertEquals(-1.23f,MathUtils.round(-x,2,BigDecimal.ROUND_HALF_UP),0.0);assertEquals(-1.235f,MathUtils.round(-x,3,BigDecimal.ROUND_HALF_UP),0.0);assertEquals(-1.2346f,MathUtils.round(-x,4,BigDecimal.ROUND_HALF_UP),0.0);assertEquals(1.235f,MathUtils.round(1.2345f,3,BigDecimal.ROUND_HALF_UP),0.0);assertEquals(-1.235f,MathUtils.round(-1.2345f,3,BigDecimal.ROUND_HALF_UP),0.0);assertEquals(-1.23f,MathUtils.round(-1.23f,2,BigDecimal.ROUND_UNNECESSARY),0.0);assertEquals(1.23f,MathUtils.round(1.23f,2,BigDecimal.ROUND_UNNECESSARY),0.0);try {MathUtils.round(1.234f,2,BigDecimal.ROUND_UNNECESSARY);fail();}catch(ArithmeticException ex){}assertEquals(1.24f,MathUtils.round(x,2,BigDecimal.ROUND_UP),0.0);assertEquals(1.235f,MathUtils.round(x,3,BigDecimal.ROUND_UP),0.0);assertEquals(1.2346f,MathUtils.round(x,4,BigDecimal.ROUND_UP),0.0);assertEquals(-1.24f,MathUtils.round(-x,2,BigDecimal.ROUND_UP),0.0);assertEquals(-1.235f,MathUtils.round(-x,3,BigDecimal.ROUND_UP),0.0);assertEquals(-1.2346f,MathUtils.round(-x,4,BigDecimal.ROUND_UP),0.0);try {MathUtils.round(1.234f,2,1923);fail();}catch(IllegalArgumentException ex){}TestUtils.assertEquals(Float.NaN,MathUtils.round(Float.NaN,2),0.0f);assertEquals(0.0f,MathUtils.round(0.0f,2),0.0f);assertEquals(Float.POSITIVE_INFINITY,MathUtils.round(Float.POSITIVE_INFINITY,2),0.0f);assertEquals(Float.NEGATIVE_INFINITY,MathUtils.round(Float.NEGATIVE_INFINITY,2),0.0f);}"
"org.apache.commons.math.util.MathUtilsTest.testSignByte",0,"public void testSignByte(){assertEquals((byte)1,MathUtils.indicator((byte)2));assertEquals((byte)(-1),MathUtils.indicator((byte)(-2)));}"
"org.apache.commons.math.util.MathUtilsTest.testSignDouble",0,"public void testSignDouble(){double delta=0.0;assertEquals(1.0,MathUtils.indicator(2.0),delta);assertEquals(-1.0,MathUtils.indicator(-2.0),delta);}"
"org.apache.commons.math.util.MathUtilsTest.testSignFloat",0,"public void testSignFloat(){float delta=0.0F;assertEquals(1.0F,MathUtils.indicator(2.0F),delta);assertEquals(-1.0F,MathUtils.indicator(-2.0F),delta);}"
"org.apache.commons.math.util.MathUtilsTest.testSignInt",0,"public void testSignInt(){assertEquals((int)1,MathUtils.indicator((int)(2)));assertEquals((int)(-1),MathUtils.indicator((int)(-2)));}"
"org.apache.commons.math.util.MathUtilsTest.testSignLong",0,"public void testSignLong(){assertEquals(1L,MathUtils.indicator(2L));assertEquals(-1L,MathUtils.indicator(-2L));}"
"org.apache.commons.math.util.MathUtilsTest.testSignShort",0,"public void testSignShort(){assertEquals((short)1,MathUtils.indicator((short)2));assertEquals((short)(-1),MathUtils.indicator((short)(-2)));}"
"org.apache.commons.math.util.MathUtilsTest.testSinh",0,"public void testSinh(){double x=3.0;double expected=10.01787;assertEquals(expected,MathUtils.sinh(x),1.0e-5);}"
"org.apache.commons.math.util.MathUtilsTest.testSinhNaN",0,"public void testSinhNaN(){assertTrue(Double.isNaN(MathUtils.sinh(Double.NaN)));}"
"org.apache.commons.math.util.MathUtilsTest.testSubAndCheck",0,"public void testSubAndCheck(){int big=Integer.MAX_VALUE;int bigNeg=Integer.MIN_VALUE;assertEquals(big,MathUtils.subAndCheck(big,0));try {MathUtils.subAndCheck(big,-1);fail(""Expecting ArithmeticException"");}catch(ArithmeticException ex){}try {MathUtils.subAndCheck(bigNeg,1);fail(""Expecting ArithmeticException"");}catch(ArithmeticException ex){}}"
"org.apache.commons.math.util.MathUtilsTest.testSubAndCheckErrorMessage",0,"public void testSubAndCheckErrorMessage(){int big=Integer.MAX_VALUE;try {MathUtils.subAndCheck(big,-1);fail(""Expecting ArithmeticException"");}catch(ArithmeticException ex){assertEquals(""overflow: subtract"",ex.getMessage());}}"
"org.apache.commons.math.util.MathUtilsTest.testSubAndCheckLong",0,"public void testSubAndCheckLong(){long max=Long.MAX_VALUE;long min=Long.MIN_VALUE;assertEquals(max,MathUtils.subAndCheck(max,0));assertEquals(min,MathUtils.subAndCheck(min,0));assertEquals(-max,MathUtils.subAndCheck(0,max));testSubAndCheckLongFailure(0L,min);testSubAndCheckLongFailure(max,-1L);testSubAndCheckLongFailure(min,1L);}"
"org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest.testSetterInjection",0,"public void testSetterInjection()throws Exception {DescriptiveStatistics stats=new DescriptiveStatistics();stats.addValue(1);stats.addValue(3);assertEquals(2,stats.getMean(),1E-10);stats.setMeanImpl(new deepMean());assertEquals(42,stats.getMean(),1E-10);}"
"org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest.testPercentileSetter",0,"public void testPercentileSetter()throws Exception {DescriptiveStatistics stats=new DescriptiveStatistics();stats.addValue(1);stats.addValue(2);stats.addValue(3);assertEquals(2,stats.getPercentile(50.0),1E-10);stats.setPercentileImpl(new goodPercentile());assertEquals(2,stats.getPercentile(50.0),1E-10);stats.setPercentileImpl(new subPercentile());assertEquals(10.0,stats.getPercentile(10.0),1E-10);try {stats.setPercentileImpl(new badPercentile());fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest.testRemoval",0,"public void testRemoval(){final DescriptiveStatistics dstat=new DescriptiveStatistics();checkremoval(dstat,1,6.0,0.0,Double.NaN);checkremoval(dstat,3,5.0,3.0,4.5);checkremoval(dstat,6,3.5,2.5,3.0);checkremoval(dstat,9,3.5,2.5,3.0);checkremoval(dstat,DescriptiveStatistics.INFINITE_WINDOW,3.5,2.5,3.0);}"
"org.apache.commons.math.linear.RealVectorImplTest.testConstructors",0,"public void testConstructors(){RealVectorImpl v0=new RealVectorImpl();assertEquals(""testData len"",0,v0.getDimension());RealVectorImpl v1=new RealVectorImpl(7);assertEquals(""testData len"",7,v1.getDimension());assertEquals(""testData is 0.0 "",0.0,v1.getEntry(6));RealVectorImpl v2=new RealVectorImpl(5,1.23);assertEquals(""testData len"",5,v2.getDimension());assertEquals(""testData is 1.23 "",1.23,v2.getEntry(4));RealVectorImpl v3=new RealVectorImpl(vec1);assertEquals(""testData len"",3,v3.getDimension());assertEquals(""testData is 2.0 "",2.0,v3.getEntry(1));RealVectorImpl v4=new RealVectorImpl(vec4,3,2);assertEquals(""testData len"",2,v4.getDimension());assertEquals(""testData is 4.0 "",4.0,v4.getEntry(0));try {new RealVectorImpl(vec4,8,3);fail(""IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}catch(Exception e){fail(""wrong exception caught"");}RealVector v5_i=new RealVectorImpl(dvec1);assertEquals(""testData len"",9,v5_i.getDimension());assertEquals(""testData is 9.0 "",9.0,v5_i.getEntry(8));RealVectorImpl v5=new RealVectorImpl(dvec1);assertEquals(""testData len"",9,v5.getDimension());assertEquals(""testData is 9.0 "",9.0,v5.getEntry(8));RealVectorImpl v6=new RealVectorImpl(dvec1,3,2);assertEquals(""testData len"",2,v6.getDimension());assertEquals(""testData is 4.0 "",4.0,v6.getEntry(0));try {new RealVectorImpl(dvec1,8,3);fail(""IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}catch(Exception e){fail(""wrong exception caught"");}RealVectorImpl v7=new RealVectorImpl(v1);assertEquals(""testData len"",7,v7.getDimension());assertEquals(""testData is 0.0 "",0.0,v7.getEntry(6));RealVectorTestImpl v7_i=new RealVectorTestImpl(vec1);RealVectorImpl v7_2=new RealVectorImpl(v7_i);assertEquals(""testData len"",3,v7_2.getDimension());assertEquals(""testData is 0.0 "",2.0d,v7_2.getEntry(1));RealVectorImpl v8=new RealVectorImpl(v1,true);assertEquals(""testData len"",7,v8.getDimension());assertEquals(""testData is 0.0 "",0.0,v8.getEntry(6));assertNotSame(""testData not same object "",v1.data,v8.data);RealVectorImpl v8_2=new RealVectorImpl(v1,false);assertEquals(""testData len"",7,v8_2.getDimension());assertEquals(""testData is 0.0 "",0.0,v8_2.getEntry(6));assertEquals(""testData same object "",v1.data,v8_2.data);RealVectorImpl v9=new RealVectorImpl(v1,v3);assertEquals(""testData len"",10,v9.getDimension());assertEquals(""testData is 1.0 "",1.0,v9.getEntry(7));}"
"org.apache.commons.math.linear.RealVectorImplTest.testDataInOut",0,"public void testDataInOut(){RealVectorImpl v1=new RealVectorImpl(vec1);RealVectorImpl v2=new RealVectorImpl(vec2);RealVectorImpl v4=new RealVectorImpl(vec4);RealVectorTestImpl v2_t=new RealVectorTestImpl(vec2);RealVector v_append_1=v1.append(v2);assertEquals(""testData len"",6,v_append_1.getDimension());assertEquals(""testData is 4.0 "",4.0,v_append_1.getEntry(3));RealVector v_append_2=v1.append(2.0);assertEquals(""testData len"",4,v_append_2.getDimension());assertEquals(""testData is 2.0 "",2.0,v_append_2.getEntry(3));RealVector v_append_3=v1.append(vec2);assertEquals(""testData len"",6,v_append_3.getDimension());assertEquals(""testData is  "",4.0,v_append_3.getEntry(3));RealVector v_append_4=v1.append(v2_t);assertEquals(""testData len"",6,v_append_4.getDimension());assertEquals(""testData is 4.0 "",4.0,v_append_4.getEntry(3));RealVector v_copy=v1.copy();assertEquals(""testData len"",3,v_copy.getDimension());assertNotSame(""testData not same object "",v1.data,v_copy.getData());double[]a_double=v1.toArray();assertEquals(""testData len"",3,a_double.length);assertNotSame(""testData not same object "",v1.data,a_double);RealVector vout5=v4.get(3,3);assertEquals(""testData len"",3,vout5.getDimension());assertEquals(""testData is 4.0 "",5.0,vout5.getEntry(1));try {v4.get(3,7);fail(""MatrixIndexException expected"");}catch(MatrixIndexException ex){}catch(Exception e){fail(""wrong exception caught"");}RealVectorImpl v_set1=(RealVectorImpl)v1.copy();v_set1.set(1,11.0);assertEquals(""testData is 11.0 "",11.0,v_set1.getEntry(1));try {v_set1.set(3,11.0);fail(""MatrixIndexException expected"");}catch(MatrixIndexException ex){}catch(Exception e){fail(""wrong exception caught"");}RealVectorImpl v_set2=(RealVectorImpl)v4.copy();v_set2.set(3,v1);assertEquals(""testData is 1.0 "",1.0,v_set2.getEntry(3));assertEquals(""testData is 7.0 "",7.0,v_set2.getEntry(6));try {v_set2.set(7,v1);fail(""MatrixIndexException expected"");}catch(MatrixIndexException ex){}catch(Exception e){fail(""wrong exception caught"");}RealVectorImpl v_set3=(RealVectorImpl)v1.copy();v_set3.set(13.0);assertEquals(""testData is 13.0 "",13.0,v_set3.getEntry(2));try {v_set3.getEntry(23);fail(""ArrayIndexOutOfBoundsException expected"");}catch(ArrayIndexOutOfBoundsException ex){}catch(Exception e){fail(""wrong exception caught"");}RealVectorImpl v_set4=(RealVectorImpl)v4.copy();v_set4.set(3,v2_t);assertEquals(""testData is 1.0 "",4.0,v_set4.getEntry(3));assertEquals(""testData is 7.0 "",7.0,v_set4.getEntry(6));try {v_set4.set(7,v2_t);fail(""MatrixIndexException expected"");}catch(MatrixIndexException ex){}catch(Exception e){fail(""wrong exception caught"");}RealVectorImpl vout10=(RealVectorImpl)v1.copy();RealVectorImpl vout10_2=(RealVectorImpl)v1.copy();assertEquals(vout10,vout10_2);vout10_2.set(0,1.1);assertNotSame(vout10,vout10_2);}"
"org.apache.commons.math.linear.RealVectorImplTest.testMapFunctions",0,"public void testMapFunctions(){RealVectorImpl v1=new RealVectorImpl(vec1);RealVector v_mapAdd=v1.mapAdd(2.0d);double[]result_mapAdd={3d,4d,5d};assertClose(""compare vectors"",result_mapAdd,v_mapAdd.getData(),normTolerance);RealVector v_mapAddToSelf=v1.copy();v_mapAddToSelf.mapAddToSelf(2.0d);double[]result_mapAddToSelf={3d,4d,5d};assertClose(""compare vectors"",result_mapAddToSelf,v_mapAddToSelf.getData(),normTolerance);RealVector v_mapSubtract=v1.mapSubtract(2.0d);double[]result_mapSubtract={-1d,0d,1d};assertClose(""compare vectors"",result_mapSubtract,v_mapSubtract.getData(),normTolerance);RealVector v_mapSubtractToSelf=v1.copy();v_mapSubtractToSelf.mapSubtractToSelf(2.0d);double[]result_mapSubtractToSelf={-1d,0d,1d};assertClose(""compare vectors"",result_mapSubtractToSelf,v_mapSubtractToSelf.getData(),normTolerance);RealVector v_mapMultiply=v1.mapMultiply(2.0d);double[]result_mapMultiply={2d,4d,6d};assertClose(""compare vectors"",result_mapMultiply,v_mapMultiply.getData(),normTolerance);RealVector v_mapMultiplyToSelf=v1.copy();v_mapMultiplyToSelf.mapMultiplyToSelf(2.0d);double[]result_mapMultiplyToSelf={2d,4d,6d};assertClose(""compare vectors"",result_mapMultiplyToSelf,v_mapMultiplyToSelf.getData(),normTolerance);RealVector v_mapDivide=v1.mapDivide(2.0d);double[]result_mapDivide={.5d,1d,1.5d};assertClose(""compare vectors"",result_mapDivide,v_mapDivide.getData(),normTolerance);RealVector v_mapDivideToSelf=v1.copy();v_mapDivideToSelf.mapDivideToSelf(2.0d);double[]result_mapDivideToSelf={.5d,1d,1.5d};assertClose(""compare vectors"",result_mapDivideToSelf,v_mapDivideToSelf.getData(),normTolerance);RealVector v_mapPow=v1.mapPow(2.0d);double[]result_mapPow={1d,4d,9d};assertClose(""compare vectors"",result_mapPow,v_mapPow.getData(),normTolerance);RealVector v_mapPowToSelf=v1.copy();v_mapPowToSelf.mapPowToSelf(2.0d);double[]result_mapPowToSelf={1d,4d,9d};assertClose(""compare vectors"",result_mapPowToSelf,v_mapPowToSelf.getData(),normTolerance);RealVector v_mapExp=v1.mapExp();double[]result_mapExp={2.718281828459045e+00d,7.389056098930650e+00d,2.008553692318767e+01d};assertClose(""compare vectors"",result_mapExp,v_mapExp.getData(),normTolerance);RealVector v_mapExpToSelf=v1.copy();v_mapExpToSelf.mapExpToSelf();double[]result_mapExpToSelf={2.718281828459045e+00d,7.389056098930650e+00d,2.008553692318767e+01d};assertClose(""compare vectors"",result_mapExpToSelf,v_mapExpToSelf.getData(),normTolerance);RealVector v_mapExpm1=v1.mapExpm1();double[]result_mapExpm1={1.718281828459045d,6.38905609893065d,19.085536923187668d};assertClose(""compare vectors"",result_mapExpm1,v_mapExpm1.getData(),normTolerance);RealVector v_mapExpm1ToSelf=v1.copy();v_mapExpm1ToSelf.mapExpm1ToSelf();double[]result_mapExpm1ToSelf={1.718281828459045d,6.38905609893065d,19.085536923187668d};assertClose(""compare vectors"",result_mapExpm1ToSelf,v_mapExpm1ToSelf.getData(),normTolerance);RealVector v_mapLog=v1.mapLog();double[]result_mapLog={0d,6.931471805599453e-01d,1.098612288668110e+00d};assertClose(""compare vectors"",result_mapLog,v_mapLog.getData(),normTolerance);RealVector v_mapLogToSelf=v1.copy();v_mapLogToSelf.mapLogToSelf();double[]result_mapLogToSelf={0d,6.931471805599453e-01d,1.098612288668110e+00d};assertClose(""compare vectors"",result_mapLogToSelf,v_mapLogToSelf.getData(),normTolerance);RealVector v_mapLog10=v1.mapLog10();double[]result_mapLog10={0d,3.010299956639812e-01d,4.771212547196624e-01d};assertClose(""compare vectors"",result_mapLog10,v_mapLog10.getData(),normTolerance);RealVector v_mapLog10ToSelf=v1.copy();v_mapLog10ToSelf.mapLog10ToSelf();double[]result_mapLog10ToSelf={0d,3.010299956639812e-01d,4.771212547196624e-01d};assertClose(""compare vectors"",result_mapLog10ToSelf,v_mapLog10ToSelf.getData(),normTolerance);RealVector v_mapLog1p=v1.mapLog1p();double[]result_mapLog1p={0.6931471805599453d,1.0986122886681096d,1.3862943611198906d};assertClose(""compare vectors"",result_mapLog1p,v_mapLog1p.getData(),normTolerance);RealVector v_mapLog1pToSelf=v1.copy();v_mapLog1pToSelf.mapLog1pToSelf();double[]result_mapLog1pToSelf={0.6931471805599453d,1.0986122886681096d,1.3862943611198906d};assertClose(""compare vectors"",result_mapLog1pToSelf,v_mapLog1pToSelf.getData(),normTolerance);RealVector v_mapCosh=v1.mapCosh();double[]result_mapCosh={1.543080634815244e+00d,3.762195691083631e+00d,1.006766199577777e+01d};assertClose(""compare vectors"",result_mapCosh,v_mapCosh.getData(),normTolerance);RealVector v_mapCoshToSelf=v1.copy();v_mapCoshToSelf.mapCoshToSelf();double[]result_mapCoshToSelf={1.543080634815244e+00d,3.762195691083631e+00d,1.006766199577777e+01d};assertClose(""compare vectors"",result_mapCoshToSelf,v_mapCoshToSelf.getData(),normTolerance);RealVector v_mapSinh=v1.mapSinh();double[]result_mapSinh={1.175201193643801e+00d,3.626860407847019e+00d,1.001787492740990e+01d};assertClose(""compare vectors"",result_mapSinh,v_mapSinh.getData(),normTolerance);RealVector v_mapSinhToSelf=v1.copy();v_mapSinhToSelf.mapSinhToSelf();double[]result_mapSinhToSelf={1.175201193643801e+00d,3.626860407847019e+00d,1.001787492740990e+01d};assertClose(""compare vectors"",result_mapSinhToSelf,v_mapSinhToSelf.getData(),normTolerance);RealVector v_mapTanh=v1.mapTanh();double[]result_mapTanh={7.615941559557649e-01d,9.640275800758169e-01d,9.950547536867305e-01d};assertClose(""compare vectors"",result_mapTanh,v_mapTanh.getData(),normTolerance);RealVector v_mapTanhToSelf=v1.copy();v_mapTanhToSelf.mapTanhToSelf();double[]result_mapTanhToSelf={7.615941559557649e-01d,9.640275800758169e-01d,9.950547536867305e-01d};assertClose(""compare vectors"",result_mapTanhToSelf,v_mapTanhToSelf.getData(),normTolerance);RealVector v_mapCos=v1.mapCos();double[]result_mapCos={5.403023058681398e-01d,-4.161468365471424e-01d,-9.899924966004454e-01d};assertClose(""compare vectors"",result_mapCos,v_mapCos.getData(),normTolerance);RealVector v_mapCosToSelf=v1.copy();v_mapCosToSelf.mapCosToSelf();double[]result_mapCosToSelf={5.403023058681398e-01d,-4.161468365471424e-01d,-9.899924966004454e-01d};assertClose(""compare vectors"",result_mapCosToSelf,v_mapCosToSelf.getData(),normTolerance);RealVector v_mapSin=v1.mapSin();double[]result_mapSin={8.414709848078965e-01d,9.092974268256817e-01d,1.411200080598672e-01d};assertClose(""compare vectors"",result_mapSin,v_mapSin.getData(),normTolerance);RealVector v_mapSinToSelf=v1.copy();v_mapSinToSelf.mapSinToSelf();double[]result_mapSinToSelf={8.414709848078965e-01d,9.092974268256817e-01d,1.411200080598672e-01d};assertClose(""compare vectors"",result_mapSinToSelf,v_mapSinToSelf.getData(),normTolerance);RealVector v_mapTan=v1.mapTan();double[]result_mapTan={1.557407724654902e+00d,-2.185039863261519e+00d,-1.425465430742778e-01d};assertClose(""compare vectors"",result_mapTan,v_mapTan.getData(),normTolerance);RealVector v_mapTanToSelf=v1.copy();v_mapTanToSelf.mapTanToSelf();double[]result_mapTanToSelf={1.557407724654902e+00d,-2.185039863261519e+00d,-1.425465430742778e-01d};assertClose(""compare vectors"",result_mapTanToSelf,v_mapTanToSelf.getData(),normTolerance);double[]vat_a={0d,0.5d,1.0d};RealVectorImpl vat=new RealVectorImpl(vat_a);RealVector v_mapAcos=vat.mapAcos();double[]result_mapAcos={1.570796326794897e+00d,1.047197551196598e+00d,0.0d};assertClose(""compare vectors"",result_mapAcos,v_mapAcos.getData(),normTolerance);RealVector v_mapAcosToSelf=vat.copy();v_mapAcosToSelf.mapAcosToSelf();double[]result_mapAcosToSelf={1.570796326794897e+00d,1.047197551196598e+00d,0.0d};assertClose(""compare vectors"",result_mapAcosToSelf,v_mapAcosToSelf.getData(),normTolerance);RealVector v_mapAsin=vat.mapAsin();double[]result_mapAsin={0.0d,5.235987755982989e-01d,1.570796326794897e+00d};assertClose(""compare vectors"",result_mapAsin,v_mapAsin.getData(),normTolerance);RealVector v_mapAsinToSelf=vat.copy();v_mapAsinToSelf.mapAsinToSelf();double[]result_mapAsinToSelf={0.0d,5.235987755982989e-01d,1.570796326794897e+00d};assertClose(""compare vectors"",result_mapAsinToSelf,v_mapAsinToSelf.getData(),normTolerance);RealVector v_mapAtan=vat.mapAtan();double[]result_mapAtan={0.0d,4.636476090008061e-01d,7.853981633974483e-01d};assertClose(""compare vectors"",result_mapAtan,v_mapAtan.getData(),normTolerance);RealVector v_mapAtanToSelf=vat.copy();v_mapAtanToSelf.mapAtanToSelf();double[]result_mapAtanToSelf={0.0d,4.636476090008061e-01d,7.853981633974483e-01d};assertClose(""compare vectors"",result_mapAtanToSelf,v_mapAtanToSelf.getData(),normTolerance);RealVector v_mapInv=v1.mapInv();double[]result_mapInv={1d,0.5d,3.333333333333333e-01d};assertClose(""compare vectors"",result_mapInv,v_mapInv.getData(),normTolerance);RealVector v_mapInvToSelf=v1.copy();v_mapInvToSelf.mapInvToSelf();double[]result_mapInvToSelf={1d,0.5d,3.333333333333333e-01d};assertClose(""compare vectors"",result_mapInvToSelf,v_mapInvToSelf.getData(),normTolerance);double[]abs_a={-1.0d,0.0d,1.0d};RealVectorImpl abs_v=new RealVectorImpl(abs_a);RealVector v_mapAbs=abs_v.mapAbs();double[]result_mapAbs={1d,0d,1d};assertClose(""compare vectors"",result_mapAbs,v_mapAbs.getData(),normTolerance);RealVector v_mapAbsToSelf=abs_v.copy();v_mapAbsToSelf.mapAbsToSelf();double[]result_mapAbsToSelf={1d,0d,1d};assertClose(""compare vectors"",result_mapAbsToSelf,v_mapAbsToSelf.getData(),normTolerance);RealVector v_mapSqrt=v1.mapSqrt();double[]result_mapSqrt={1d,1.414213562373095e+00d,1.732050807568877e+00d};assertClose(""compare vectors"",result_mapSqrt,v_mapSqrt.getData(),normTolerance);RealVector v_mapSqrtToSelf=v1.copy();v_mapSqrtToSelf.mapSqrtToSelf();double[]result_mapSqrtToSelf={1d,1.414213562373095e+00d,1.732050807568877e+00d};assertClose(""compare vectors"",result_mapSqrtToSelf,v_mapSqrtToSelf.getData(),normTolerance);double[]cbrt_a={-2.0d,0.0d,2.0d};RealVectorImpl cbrt_v=new RealVectorImpl(cbrt_a);RealVector v_mapCbrt=cbrt_v.mapCbrt();double[]result_mapCbrt={-1.2599210498948732d,0d,1.2599210498948732d};assertClose(""compare vectors"",result_mapCbrt,v_mapCbrt.getData(),normTolerance);RealVector v_mapCbrtToSelf=cbrt_v.copy();v_mapCbrtToSelf.mapCbrtToSelf();double[]result_mapCbrtToSelf={-1.2599210498948732d,0d,1.2599210498948732d};assertClose(""compare vectors"",result_mapCbrtToSelf,v_mapCbrtToSelf.getData(),normTolerance);double[]ceil_a={-1.1d,0.9d,1.1d};RealVectorImpl ceil_v=new RealVectorImpl(ceil_a);RealVector v_mapCeil=ceil_v.mapCeil();double[]result_mapCeil={-1d,1d,2d};assertClose(""compare vectors"",result_mapCeil,v_mapCeil.getData(),normTolerance);RealVector v_mapCeilToSelf=ceil_v.copy();v_mapCeilToSelf.mapCeilToSelf();double[]result_mapCeilToSelf={-1d,1d,2d};assertClose(""compare vectors"",result_mapCeilToSelf,v_mapCeilToSelf.getData(),normTolerance);RealVector v_mapFloor=ceil_v.mapFloor();double[]result_mapFloor={-2d,0d,1d};assertClose(""compare vectors"",result_mapFloor,v_mapFloor.getData(),normTolerance);RealVector v_mapFloorToSelf=ceil_v.copy();v_mapFloorToSelf.mapFloorToSelf();double[]result_mapFloorToSelf={-2d,0d,1d};assertClose(""compare vectors"",result_mapFloorToSelf,v_mapFloorToSelf.getData(),normTolerance);RealVector v_mapRint=ceil_v.mapRint();double[]result_mapRint={-1d,1d,1d};assertClose(""compare vectors"",result_mapRint,v_mapRint.getData(),normTolerance);RealVector v_mapRintToSelf=ceil_v.copy();v_mapRintToSelf.mapRintToSelf();double[]result_mapRintToSelf={-1d,1d,1d};assertClose(""compare vectors"",result_mapRintToSelf,v_mapRintToSelf.getData(),normTolerance);RealVector v_mapSignum=ceil_v.mapSignum();double[]result_mapSignum={-1d,1d,1d};assertClose(""compare vectors"",result_mapSignum,v_mapSignum.getData(),normTolerance);RealVector v_mapSignumToSelf=ceil_v.copy();v_mapSignumToSelf.mapSignumToSelf();double[]result_mapSignumToSelf={-1d,1d,1d};assertClose(""compare vectors"",result_mapSignumToSelf,v_mapSignumToSelf.getData(),normTolerance);RealVector v_mapUlp=ceil_v.mapUlp();double[]result_mapUlp={2.220446049250313E-16d,1.1102230246251565E-16d,2.220446049250313E-16d};assertClose(""compare vectors"",result_mapUlp,v_mapUlp.getData(),normTolerance);RealVector v_mapUlpToSelf=ceil_v.copy();v_mapUlpToSelf.mapUlpToSelf();double[]result_mapUlpToSelf={2.220446049250313E-16d,1.1102230246251565E-16d,2.220446049250313E-16d};assertClose(""compare vectors"",result_mapUlpToSelf,v_mapUlpToSelf.getData(),normTolerance);}"
"org.apache.commons.math.linear.RealVectorImplTest.testBasicFunctions",0,"public void testBasicFunctions(){RealVectorImpl v1=new RealVectorImpl(vec1);RealVectorImpl v2=new RealVectorImpl(vec2);RealVectorImpl v_null=new RealVectorImpl(vec_null);RealVectorTestImpl v2_t=new RealVectorTestImpl(vec2);double d_getNorm=v1.getNorm();assertEquals(""compare values  "",3.7416573867739413,d_getNorm);double d_getL1Norm=v1.getL1Norm();assertEquals(""compare values  "",6.0,d_getL1Norm);double d_getLInfNorm=v1.getLInfNorm();assertEquals(""compare values  "",6.0,d_getLInfNorm);double dist=v1.getDistance(v2);assertEquals(""compare values  "",v1.subtract(v2).getNorm(),dist);double dist_2=v1.getDistance(v2_t);assertEquals(""compare values  "",v1.subtract(v2).getNorm(),dist_2);double d_getL1Distance=v1.getL1Distance(v2);assertEquals(""compare values  "",9d,d_getL1Distance);double d_getL1Distance_2=v1.getL1Distance(v2_t);assertEquals(""compare values  "",9d,d_getL1Distance_2);double d_getLInfDistance=v1.getLInfDistance(v2);assertEquals(""compare values  "",3d,d_getLInfDistance);double d_getLInfDistance_2=v1.getLInfDistance(v2_t);assertEquals(""compare values  "",3d,d_getLInfDistance_2);RealVectorImpl v_add=v1.add(v2);double[]result_add={5d,7d,9d};assertClose(""compare vect"",v_add.getData(),result_add,normTolerance);RealVectorTestImpl vt2=new RealVectorTestImpl(vec2);RealVector v_add_i=v1.add(vt2);double[]result_add_i={5d,7d,9d};assertClose(""compare vect"",v_add_i.getData(),result_add_i,normTolerance);RealVectorImpl v_subtract=v1.subtract(v2);double[]result_subtract={-3d,-3d,-3d};assertClose(""compare vect"",v_subtract.getData(),result_subtract,normTolerance);RealVector v_subtract_i=v1.subtract(vt2);double[]result_subtract_i={-3d,-3d,-3d};assertClose(""compare vect"",v_subtract_i.getData(),result_subtract_i,normTolerance);RealVectorImpl v_ebeMultiply=v1.ebeMultiply(v2);double[]result_ebeMultiply={4d,10d,18d};assertClose(""compare vect"",v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);RealVector v_ebeMultiply_2=v1.ebeMultiply(v2_t);double[]result_ebeMultiply_2={4d,10d,18d};assertClose(""compare vect"",v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);RealVectorImpl v_ebeDivide=v1.ebeDivide(v2);double[]result_ebeDivide={0.25d,0.4d,0.5d};assertClose(""compare vect"",v_ebeDivide.getData(),result_ebeDivide,normTolerance);RealVector v_ebeDivide_2=v1.ebeDivide(v2_t);double[]result_ebeDivide_2={0.25d,0.4d,0.5d};assertClose(""compare vect"",v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);double dot=v1.dotProduct(v2);assertEquals(""compare val "",32d,dot);double dot_2=v1.dotProduct(v2_t);assertEquals(""compare val "",32d,dot_2);RealMatrix m_outerProduct=v1.outerProduct(v2);assertEquals(""compare val "",4d,m_outerProduct.getEntry(0,0));RealMatrix m_outerProduct_2=v1.outerProduct(v2_t);assertEquals(""compare val "",4d,m_outerProduct_2.getEntry(0,0));RealVector v_unitVector=v1.unitVector();RealVector v_unitVector_2=v1.mapDivide(v1.getNorm());assertClose(""compare vect"",v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);try {v_null.unitVector();fail(""Expecting ArithmeticException"");}catch(ArithmeticException ex){}catch(Exception e){fail(""wrong exception caught"");}RealVectorImpl v_unitize=(RealVectorImpl)v1.copy();v_unitize.unitize();assertClose(""compare vect"",v_unitVector_2.getData(),v_unitize.getData(),normTolerance);try {v_null.unitize();fail(""Expecting ArithmeticException"");}catch(ArithmeticException ex){}catch(Exception e){fail(""wrong exception caught"");}RealVectorImpl v_projection=v1.projection(v2);double[]result_projection={1.662337662337662,2.0779220779220777,2.493506493506493};assertClose(""compare vect"",v_projection.getData(),result_projection,normTolerance);RealVector v_projection_2=v1.projection(v2_t);double[]result_projection_2={1.662337662337662,2.0779220779220777,2.493506493506493};assertClose(""compare vect"",v_projection_2.getData(),result_projection_2,normTolerance);}"
"org.apache.commons.math.linear.RealVectorImplTest.testMisc",0,"public void testMisc(){RealVectorImpl v1=new RealVectorImpl(vec1);RealVectorImpl v4=new RealVectorImpl(vec4);RealVector v4_2=new RealVectorImpl(vec4);String out1=v1.toString();assertTrue(""some output "",out1.length()!= 0);try {v1.checkVectorDimensions(2);fail(""IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}catch(Exception e){fail(""wrong exception caught"");}try {v1.checkVectorDimensions(v4);fail(""IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}catch(Exception e){fail(""wrong exception caught"");}try {v1.checkVectorDimensions(v4_2);fail(""IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}catch(Exception e){fail(""wrong exception caught"");}}"
"org.apache.commons.math.linear.RealVectorImplTest.testPredicates",0,"public void testPredicates(){RealVectorImpl v=new RealVectorImpl(new double[]{0,1,2});assertFalse(v.isNaN());v.set(1,Double.NaN);assertTrue(v.isNaN());assertFalse(v.isInfinite());v.set(0,Double.POSITIVE_INFINITY);assertFalse(v.isInfinite());v.set(1,1);assertTrue(v.isInfinite());v.set(0,0);assertEquals(v,new RealVectorImpl(new double[]{0,1,2}));assertNotSame(v,new RealVectorImpl(new double[]{0,1,2 + Math.ulp(2)}));assertNotSame(v,new RealVectorImpl(new double[]{0,1,2,3}));assertEquals(new RealVectorImpl(new double[]{Double.NaN,1,2}).hashCode(),new RealVectorImpl(new double[]{0,Double.NaN,2}).hashCode());assertTrue(new RealVectorImpl(new double[]{Double.NaN,1,2}).hashCode()!= new RealVectorImpl(new double[]{0,1,2}).hashCode());}"
"org.apache.commons.math.linear.LUSolverTest.testThreshold",0,"/** * test threshold impact */public void testThreshold(){final RealMatrix matrix=MatrixUtils.createRealMatrix(new double[][]{{1.0,2.0,3.0},{2.0,5.0,3.0},{4.000001,9.0,9.0}});assertFalse(new LUDecompositionImpl(matrix,1.0e-5).getSolver().isNonSingular());assertTrue(new LUDecompositionImpl(matrix,1.0e-10).getSolver().isNonSingular());}"
"org.apache.commons.math.linear.LUSolverTest.testSingular",0,"/** * test singular */public void testSingular(){DecompositionSolver solver=new LUDecompositionImpl(MatrixUtils.createRealMatrix(testData)).getSolver();assertTrue(solver.isNonSingular());solver=new LUDecompositionImpl(MatrixUtils.createRealMatrix(singular)).getSolver();assertFalse(solver.isNonSingular());solver=new LUDecompositionImpl(MatrixUtils.createRealMatrix(bigSingular)).getSolver();assertFalse(solver.isNonSingular());}"
"org.apache.commons.math.linear.LUSolverTest.testSolveDimensionErrors",0,"/** * test solve dimension errors */public void testSolveDimensionErrors(){DecompositionSolver solver=new LUDecompositionImpl(MatrixUtils.createRealMatrix(testData)).getSolver();RealMatrix b=MatrixUtils.createRealMatrix(new double[2][2]);try {solver.solve(b);fail(""an exception should have been thrown"");}catch(IllegalArgumentException iae){}catch(Exception e){fail(""wrong exception caught"");}try {solver.solve(b.getColumn(0));fail(""an exception should have been thrown"");}catch(IllegalArgumentException iae){}catch(Exception e){fail(""wrong exception caught"");}try {solver.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)));fail(""an exception should have been thrown"");}catch(IllegalArgumentException iae){}catch(Exception e){fail(""wrong exception caught"");}}"
"org.apache.commons.math.linear.LUSolverTest.testSolveSingularityErrors",0,"/** * test solve singularity errors */public void testSolveSingularityErrors(){DecompositionSolver solver=new LUDecompositionImpl(MatrixUtils.createRealMatrix(singular)).getSolver();RealMatrix b=MatrixUtils.createRealMatrix(new double[2][2]);try {solver.solve(b);fail(""an exception should have been thrown"");}catch(InvalidMatrixException ime){}catch(Exception e){fail(""wrong exception caught"");}try {solver.solve(b.getColumn(0));fail(""an exception should have been thrown"");}catch(InvalidMatrixException ime){}catch(Exception e){fail(""wrong exception caught"");}try {solver.solve(b.getColumnVector(0));fail(""an exception should have been thrown"");}catch(InvalidMatrixException ime){}catch(Exception e){fail(""wrong exception caught"");}try {solver.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)));fail(""an exception should have been thrown"");}catch(InvalidMatrixException ime){}catch(Exception e){fail(""wrong exception caught"");}}"
"org.apache.commons.math.linear.LUSolverTest.testSolve",0,"/** * test solve */public void testSolve(){DecompositionSolver solver=new LUDecompositionImpl(MatrixUtils.createRealMatrix(testData)).getSolver();RealMatrix b=MatrixUtils.createRealMatrix(new double[][]{{1,0},{2,-5},{3,1}});RealMatrix xRef=MatrixUtils.createRealMatrix(new double[][]{{19,-71},{-6,22},{-2,9}});assertEquals(0,solver.solve(b).subtract(xRef).getNorm(),1.0e-13);for (int i=0;i < b.getColumnDimension();++i){assertEquals(0,new RealVectorImpl(solver.solve(b.getColumn(i))).subtract(xRef.getColumnVector(i)).getNorm(),1.0e-13);}for (int i=0;i < b.getColumnDimension();++i){assertEquals(0,solver.solve(b.getColumnVector(i)).subtract(xRef.getColumnVector(i)).getNorm(),1.0e-13);}for (int i=0;i < b.getColumnDimension();++i){RealVectorImplTest.RealVectorTestImpl v=new RealVectorImplTest.RealVectorTestImpl(b.getColumn(i));assertEquals(0,solver.solve(v).subtract(xRef.getColumnVector(i)).getNorm(),1.0e-13);}}"
"org.apache.commons.math.linear.LUSolverTest.testDeterminant",0,"/** * test determinant */public void testDeterminant(){assertEquals(-1,getDeterminant(MatrixUtils.createRealMatrix(testData)),1.0e-15);assertEquals(-10,getDeterminant(MatrixUtils.createRealMatrix(luData)),1.0e-14);assertEquals(0,getDeterminant(MatrixUtils.createRealMatrix(singular)),1.0e-17);assertEquals(0,getDeterminant(MatrixUtils.createRealMatrix(bigSingular)),1.0e-10);}"
"org.apache.commons.math.geometry.RotationTest.testIdentity",0,"public void testIdentity(){Rotation r=Rotation.IDENTITY;checkVector(r.applyTo(Vector3D.PLUS_I),Vector3D.PLUS_I);checkVector(r.applyTo(Vector3D.PLUS_J),Vector3D.PLUS_J);checkVector(r.applyTo(Vector3D.PLUS_K),Vector3D.PLUS_K);checkAngle(r.getAngle(),0);r=new Rotation(-1,0,0,0,false);checkVector(r.applyTo(Vector3D.PLUS_I),Vector3D.PLUS_I);checkVector(r.applyTo(Vector3D.PLUS_J),Vector3D.PLUS_J);checkVector(r.applyTo(Vector3D.PLUS_K),Vector3D.PLUS_K);checkAngle(r.getAngle(),0);r=new Rotation(42,0,0,0,true);checkVector(r.applyTo(Vector3D.PLUS_I),Vector3D.PLUS_I);checkVector(r.applyTo(Vector3D.PLUS_J),Vector3D.PLUS_J);checkVector(r.applyTo(Vector3D.PLUS_K),Vector3D.PLUS_K);checkAngle(r.getAngle(),0);}"
"org.apache.commons.math.geometry.RotationTest.testAxisAngle",0,"public void testAxisAngle(){Rotation r=new Rotation(new Vector3D(10,10,10),2 * Math.PI / 3);checkVector(r.applyTo(Vector3D.PLUS_I),Vector3D.PLUS_J);checkVector(r.applyTo(Vector3D.PLUS_J),Vector3D.PLUS_K);checkVector(r.applyTo(Vector3D.PLUS_K),Vector3D.PLUS_I);double s=1 / Math.sqrt(3);checkVector(r.getAxis(),new Vector3D(s,s,s));checkAngle(r.getAngle(),2 * Math.PI / 3);try {new Rotation(new Vector3D(0,0,0),2 * Math.PI / 3);fail(""an exception should have been thrown"");}catch(ArithmeticException e){}catch(Exception e){fail(""unexpected exception"");}r=new Rotation(Vector3D.PLUS_K,1.5 * Math.PI);checkVector(r.getAxis(),new Vector3D(0,0,-1));checkAngle(r.getAngle(),0.5 * Math.PI);r=new Rotation(Vector3D.PLUS_J,Math.PI);checkVector(r.getAxis(),Vector3D.PLUS_J);checkAngle(r.getAngle(),Math.PI);checkVector(Rotation.IDENTITY.getAxis(),Vector3D.PLUS_I);}"
"org.apache.commons.math.geometry.RotationTest.testRevert",0,"public void testRevert(){Rotation r=new Rotation(0.001,0.36,0.48,0.8,true);Rotation reverted=r.revert();checkRotation(r.applyTo(reverted),1,0,0,0);checkRotation(reverted.applyTo(r),1,0,0,0);assertEquals(r.getAngle(),reverted.getAngle(),1.0e-12);assertEquals(-1,Vector3D.dotProduct(r.getAxis(),reverted.getAxis()),1.0e-12);}"
"org.apache.commons.math.geometry.RotationTest.testVectorOnePair",0,"public void testVectorOnePair(){Vector3D u=new Vector3D(3,2,1);Vector3D v=new Vector3D(-4,2,2);Rotation r=new Rotation(u,v);checkVector(r.applyTo(u.scalarMultiply(v.getNorm())),v.scalarMultiply(u.getNorm()));checkAngle(new Rotation(u,u.negate()).getAngle(),Math.PI);try {new Rotation(u,Vector3D.ZERO);fail(""an exception should have been thrown"");}catch(IllegalArgumentException e){}catch(Exception e){fail(""unexpected exception"");}}"
"org.apache.commons.math.geometry.RotationTest.testVectorTwoPairs",0,"public void testVectorTwoPairs(){Vector3D u1=new Vector3D(3,0,0);Vector3D u2=new Vector3D(0,5,0);Vector3D v1=new Vector3D(0,0,2);Vector3D v2=new Vector3D(-2,0,2);Rotation r=new Rotation(u1,u2,v1,v2);checkVector(r.applyTo(Vector3D.PLUS_I),Vector3D.PLUS_K);checkVector(r.applyTo(Vector3D.PLUS_J),Vector3D.MINUS_I);r=new Rotation(u1,u2,u1.negate(),u2.negate());Vector3D axis=r.getAxis();if (Vector3D.dotProduct(axis,Vector3D.PLUS_K)> 0){checkVector(axis,Vector3D.PLUS_K);}else {checkVector(axis,Vector3D.MINUS_K);}checkAngle(r.getAngle(),Math.PI);double sqrt=Math.sqrt(2)/ 2;r=new Rotation(Vector3D.PLUS_I,Vector3D.PLUS_J,new Vector3D(0.5,0.5,sqrt),new Vector3D(0.5,0.5,-sqrt));checkRotation(r,sqrt,0.5,0.5,0);r=new Rotation(u1,u2,u1,Vector3D.crossProduct(u1,u2));checkRotation(r,sqrt,-sqrt,0,0);checkRotation(new Rotation(u1,u2,u1,u2),1,0,0,0);try {new Rotation(u1,u2,Vector3D.ZERO,v2);fail(""an exception should have been thrown"");}catch(IllegalArgumentException e){}catch(Exception e){fail(""unexpected exception"");}}"
"org.apache.commons.math.geometry.RotationTest.testMatrix",0,"public void testMatrix()throws NotARotationMatrixException {try {new Rotation(new double[][]{{0.0,1.0,0.0},{1.0,0.0,0.0}},1.0e-7);}catch(NotARotationMatrixException nrme){}catch(Exception e){fail(""wrong exception caught: "" + e.getMessage());}try {new Rotation(new double[][]{{0.445888,0.797184,-0.407040},{0.821760,-0.184320,0.539200},{-0.354816,0.574912,0.737280}},1.0e-7);}catch(NotARotationMatrixException nrme){}catch(Exception e){fail(""wrong exception caught: "" + e.getMessage());}try {new Rotation(new double[][]{{0.4,0.8,-0.4},{-0.4,0.6,0.7},{0.8,-0.2,0.5}},1.0e-15);}catch(NotARotationMatrixException nrme){}catch(Exception e){fail(""wrong exception caught: "" + e.getMessage());}checkRotation(new Rotation(new double[][]{{0.445888,0.797184,-0.407040},{-0.354816,0.574912,0.737280},{0.821760,-0.184320,0.539200}},1.0e-10),0.8,0.288,0.384,0.36);checkRotation(new Rotation(new double[][]{{0.539200,0.737280,0.407040},{0.184320,-0.574912,0.797184},{0.821760,-0.354816,-0.445888}},1.0e-10),0.36,0.8,0.288,0.384);checkRotation(new Rotation(new double[][]{{-0.445888,0.797184,-0.407040},{0.354816,0.574912,0.737280},{0.821760,0.184320,-0.539200}},1.0e-10),0.384,0.36,0.8,0.288);checkRotation(new Rotation(new double[][]{{-0.539200,0.737280,0.407040},{-0.184320,-0.574912,0.797184},{0.821760,0.354816,0.445888}},1.0e-10),0.288,0.384,0.36,0.8);double[][]m1={{0.0,1.0,0.0},{0.0,0.0,1.0},{1.0,0.0,0.0}};Rotation r=new Rotation(m1,1.0e-7);checkVector(r.applyTo(Vector3D.PLUS_I),Vector3D.PLUS_K);checkVector(r.applyTo(Vector3D.PLUS_J),Vector3D.PLUS_I);checkVector(r.applyTo(Vector3D.PLUS_K),Vector3D.PLUS_J);double[][]m2={{0.83203,-0.55012,-0.07139},{0.48293,0.78164,-0.39474},{0.27296,0.29396,0.91602}};r=new Rotation(m2,1.0e-12);double[][]m3=r.getMatrix();double d00=m2[0][0]- m3[0][0];double d01=m2[0][1]- m3[0][1];double d02=m2[0][2]- m3[0][2];double d10=m2[1][0]- m3[1][0];double d11=m2[1][1]- m3[1][1];double d12=m2[1][2]- m3[1][2];double d20=m2[2][0]- m3[2][0];double d21=m2[2][1]- m3[2][1];double d22=m2[2][2]- m3[2][2];assertTrue(Math.abs(d00)< 6.0e-6);assertTrue(Math.abs(d01)< 6.0e-6);assertTrue(Math.abs(d02)< 6.0e-6);assertTrue(Math.abs(d10)< 6.0e-6);assertTrue(Math.abs(d11)< 6.0e-6);assertTrue(Math.abs(d12)< 6.0e-6);assertTrue(Math.abs(d20)< 6.0e-6);assertTrue(Math.abs(d21)< 6.0e-6);assertTrue(Math.abs(d22)< 6.0e-6);assertTrue(Math.abs(d00)> 4.0e-7);assertTrue(Math.abs(d01)> 4.0e-7);assertTrue(Math.abs(d02)> 4.0e-7);assertTrue(Math.abs(d10)> 4.0e-7);assertTrue(Math.abs(d11)> 4.0e-7);assertTrue(Math.abs(d12)> 4.0e-7);assertTrue(Math.abs(d20)> 4.0e-7);assertTrue(Math.abs(d21)> 4.0e-7);assertTrue(Math.abs(d22)> 4.0e-7);for (int i=0;i < 3;++i){for (int j=0;j < 3;++j){double m3tm3=m3[i][0]* m3[j][0]+ m3[i][1]* m3[j][1]+ m3[i][2]* m3[j][2];if (i == j){assertTrue(Math.abs(m3tm3 - 1.0)< 1.0e-10);}else {assertTrue(Math.abs(m3tm3)< 1.0e-10);}}}checkVector(r.applyTo(Vector3D.PLUS_I),new Vector3D(m3[0][0],m3[1][0],m3[2][0]));checkVector(r.applyTo(Vector3D.PLUS_J),new Vector3D(m3[0][1],m3[1][1],m3[2][1]));checkVector(r.applyTo(Vector3D.PLUS_K),new Vector3D(m3[0][2],m3[1][2],m3[2][2]));double[][]m4={{1.0,0.0,0.0},{0.0,-1.0,0.0},{0.0,0.0,-1.0}};r=new Rotation(m4,1.0e-7);checkAngle(r.getAngle(),Math.PI);try {double[][]m5={{0.0,0.0,1.0},{0.0,1.0,0.0},{1.0,0.0,0.0}};r=new Rotation(m5,1.0e-7);fail(""got "" + r + "",should have caught an exception"");}catch(NotARotationMatrixException e){}catch(Exception e){fail(""wrong exception caught"");}}"
"org.apache.commons.math.geometry.RotationTest.testAngles",0,"public void testAngles()throws CardanEulerSingularityException {RotationOrder[]CardanOrders={RotationOrder.XYZ,RotationOrder.XZY,RotationOrder.YXZ,RotationOrder.YZX,RotationOrder.ZXY,RotationOrder.ZYX};for (int i=0;i < CardanOrders.length;++i){for (double alpha1=0.1;alpha1 < 6.2;alpha1+=0.3){for (double alpha2=-1.55;alpha2 < 1.55;alpha2+=0.3){for (double alpha3=0.1;alpha3 < 6.2;alpha3+=0.3){Rotation r=new Rotation(CardanOrders[i],alpha1,alpha2,alpha3);double[]angles=r.getAngles(CardanOrders[i]);checkAngle(angles[0],alpha1);checkAngle(angles[1],alpha2);checkAngle(angles[2],alpha3);}}}}RotationOrder[]EulerOrders={RotationOrder.XYX,RotationOrder.XZX,RotationOrder.YXY,RotationOrder.YZY,RotationOrder.ZXZ,RotationOrder.ZYZ};for (int i=0;i < EulerOrders.length;++i){for (double alpha1=0.1;alpha1 < 6.2;alpha1+=0.3){for (double alpha2=0.05;alpha2 < 3.1;alpha2+=0.3){for (double alpha3=0.1;alpha3 < 6.2;alpha3+=0.3){Rotation r=new Rotation(EulerOrders[i],alpha1,alpha2,alpha3);double[]angles=r.getAngles(EulerOrders[i]);checkAngle(angles[0],alpha1);checkAngle(angles[1],alpha2);checkAngle(angles[2],alpha3);}}}}}"
"org.apache.commons.math.geometry.RotationTest.testSingularities",0,"public void testSingularities()throws CardanEulerSingularityException {RotationOrder[]CardanOrders={RotationOrder.XYZ,RotationOrder.XZY,RotationOrder.YXZ,RotationOrder.YZX,RotationOrder.ZXY,RotationOrder.ZYX};double[]singularCardanAngle={Math.PI / 2,-Math.PI / 2};for (int i=0;i < CardanOrders.length;++i){for (int j=0;j < singularCardanAngle.length;++j){Rotation r=new Rotation(CardanOrders[i],0.1,singularCardanAngle[j],0.3);try {r.getAngles(CardanOrders[i]);fail(""an exception should have been caught"");}catch(CardanEulerSingularityException cese){}catch(Exception e){fail(""wrong exception caught: "" + e.getMessage());}}}RotationOrder[]EulerOrders={RotationOrder.XYX,RotationOrder.XZX,RotationOrder.YXY,RotationOrder.YZY,RotationOrder.ZXZ,RotationOrder.ZYZ};double[]singularEulerAngle={0,Math.PI};for (int i=0;i < EulerOrders.length;++i){for (int j=0;j < singularEulerAngle.length;++j){Rotation r=new Rotation(EulerOrders[i],0.1,singularEulerAngle[j],0.3);try {r.getAngles(EulerOrders[i]);fail(""an exception should have been caught"");}catch(CardanEulerSingularityException cese){}catch(Exception e){fail(""wrong exception caught: "" + e.getMessage());}}}}"
"org.apache.commons.math.geometry.RotationTest.testQuaternion",0,"public void testQuaternion(){Rotation r1=new Rotation(new Vector3D(2,-3,5),1.7);double n=23.5;Rotation r2=new Rotation(n * r1.getQ0(),n * r1.getQ1(),n * r1.getQ2(),n * r1.getQ3(),true);for (double x=-0.9;x < 0.9;x+=0.2){for (double y=-0.9;y < 0.9;y+=0.2){for (double z=-0.9;z < 0.9;z+=0.2){Vector3D u=new Vector3D(x,y,z);checkVector(r2.applyTo(u),r1.applyTo(u));}}}r1=new Rotation(0.288,0.384,0.36,0.8,false);checkRotation(r1,-r1.getQ0(),-r1.getQ1(),-r1.getQ2(),-r1.getQ3());}"
"org.apache.commons.math.geometry.RotationTest.testCompose",0,"public void testCompose(){Rotation r1=new Rotation(new Vector3D(2,-3,5),1.7);Rotation r2=new Rotation(new Vector3D(-1,3,2),0.3);Rotation r3=r2.applyTo(r1);for (double x=-0.9;x < 0.9;x+=0.2){for (double y=-0.9;y < 0.9;y+=0.2){for (double z=-0.9;z < 0.9;z+=0.2){Vector3D u=new Vector3D(x,y,z);checkVector(r2.applyTo(r1.applyTo(u)),r3.applyTo(u));}}}}"
"org.apache.commons.math.geometry.RotationTest.testComposeInverse",0,"public void testComposeInverse(){Rotation r1=new Rotation(new Vector3D(2,-3,5),1.7);Rotation r2=new Rotation(new Vector3D(-1,3,2),0.3);Rotation r3=r2.applyInverseTo(r1);for (double x=-0.9;x < 0.9;x+=0.2){for (double y=-0.9;y < 0.9;y+=0.2){for (double z=-0.9;z < 0.9;z+=0.2){Vector3D u=new Vector3D(x,y,z);checkVector(r2.applyInverseTo(r1.applyTo(u)),r3.applyTo(u));}}}}"
"org.apache.commons.math.geometry.RotationTest.testApplyInverseTo",0,"public void testApplyInverseTo(){Rotation r=new Rotation(new Vector3D(2,-3,5),1.7);for (double lambda=0;lambda < 6.2;lambda+=0.2){for (double phi=-1.55;phi < 1.55;phi+=0.2){Vector3D u=new Vector3D(Math.cos(lambda)* Math.cos(phi),Math.sin(lambda)* Math.cos(phi),Math.sin(phi));r.applyInverseTo(r.applyTo(u));checkVector(u,r.applyInverseTo(r.applyTo(u)));checkVector(u,r.applyTo(r.applyInverseTo(u)));}}r=Rotation.IDENTITY;for (double lambda=0;lambda < 6.2;lambda+=0.2){for (double phi=-1.55;phi < 1.55;phi+=0.2){Vector3D u=new Vector3D(Math.cos(lambda)* Math.cos(phi),Math.sin(lambda)* Math.cos(phi),Math.sin(phi));checkVector(u,r.applyInverseTo(r.applyTo(u)));checkVector(u,r.applyTo(r.applyInverseTo(u)));}}r=new Rotation(Vector3D.PLUS_K,Math.PI);for (double lambda=0;lambda < 6.2;lambda+=0.2){for (double phi=-1.55;phi < 1.55;phi+=0.2){Vector3D u=new Vector3D(Math.cos(lambda)* Math.cos(phi),Math.sin(lambda)* Math.cos(phi),Math.sin(phi));checkVector(u,r.applyInverseTo(r.applyTo(u)));checkVector(u,r.applyTo(r.applyInverseTo(u)));}}}"
"org.apache.commons.math.estimation.EstimatedParameterTest.testConstruction",0,"public void testConstruction(){EstimatedParameter p1=new EstimatedParameter(""p1"",1.0);assertTrue(p1.getName().equals(""p1""));checkValue(p1.getEstimate(),1.0);assertTrue(!p1.isBound());EstimatedParameter p2=new EstimatedParameter(""p2"",2.0,true);assertTrue(p2.getName().equals(""p2""));checkValue(p2.getEstimate(),2.0);assertTrue(p2.isBound());}"
"org.apache.commons.math.estimation.EstimatedParameterTest.testBound",0,"public void testBound(){EstimatedParameter p=new EstimatedParameter(""p"",0.0);assertTrue(!p.isBound());p.setBound(true);assertTrue(p.isBound());p.setBound(false);assertTrue(!p.isBound());}"
"org.apache.commons.math.estimation.EstimatedParameterTest.testEstimate",0,"public void testEstimate(){EstimatedParameter p=new EstimatedParameter(""p"",0.0);checkValue(p.getEstimate(),0.0);for (double e=0.0;e < 10.0;e+=0.5){p.setEstimate(e);checkValue(p.getEstimate(),e);}}"
"org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest.cannotAddXSampleData",0,"@Test(expected=IllegalArgumentException.class)public void cannotAddXSampleData(){createRegression().newSampleData(new double[]{},null);}"
"org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest.cannotAddNullYSampleData",0,"@Test(expected=IllegalArgumentException.class)public void cannotAddNullYSampleData(){createRegression().newSampleData(null,new double[][]{});}"
"org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest.cannotAddSampleDataWithSizeMismatch",0,"@Test(expected=IllegalArgumentException.class)public void cannotAddSampleDataWithSizeMismatch(){double[]y=new double[]{1.0,2.0};double[][]x=new double[1][];x[0]=new double[]{1.0,0};createRegression().newSampleData(y,x);}"
"org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest.testPerfectFit",0,"@Test public void testPerfectFit(){double[]betaHat=regression.estimateRegressionParameters();TestUtils.assertEquals(betaHat,new double[]{11.0,0.5,0.666666666666667,0.75,0.8,0.8333333333333333},1e-12);double[]residuals=regression.estimateResiduals();TestUtils.assertEquals(residuals,new double[]{0d,0d,0d,0d,0d,0d},1e-12);double[][]errors=regression.estimateRegressionParametersVariance();}"
"org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest.testLongly",0,"/** * Test Longley dataset against certified values provided by NIST. Data Source: J. Longley (1967)""An Appraisal of Least Squares Programs for the Electronic Computer from the Point of View of the User"" Journal of the American Statistical Association,vol. 62. September,pp. 819-841. Certified values (and data)are from NIST: http://www.itl.nist.gov/div898/strd/lls/data/LINKS/DATA/Longley.dat*/@Test public void testLongly(){double[]design=new double[]{60323,83.0,234289,2356,1590,107608,1947,61122,88.5,259426,2325,1456,108632,1948,60171,88.2,258054,3682,1616,109773,1949,61187,89.5,284599,3351,1650,110929,1950,63221,96.2,328975,2099,3099,112075,1951,63639,98.1,346999,1932,3594,113270,1952,64989,99.0,365385,1870,3547,115094,1953,63761,100.0,363112,3578,3350,116219,1954,66019,101.2,397469,2904,3048,117388,1955,67857,104.6,419180,2822,2857,118734,1956,68169,108.4,442769,2936,2798,120445,1957,66513,110.8,444546,4681,2637,121950,1958,68655,112.6,482704,3813,2552,123366,1959,69564,114.2,502601,3931,2514,125368,1960,69331,115.7,518173,4806,2572,127852,1961,70551,116.9,554894,4007,2827,130081,1962};int nobs=16;int nvars=6;OLSMultipleLinearRegression model=new OLSMultipleLinearRegression();model.newSampleData(design,nobs,nvars);double[]betaHat=model.estimateRegressionParameters();TestUtils.assertEquals(betaHat,new double[]{-3482258.63459582,15.0618722713733,-0.358191792925910E-01,-2.02022980381683,-1.03322686717359,-0.511041056535807E-01,1829.15146461355},1E-8);double[]residuals=model.estimateResiduals();TestUtils.assertEquals(residuals,new double[]{267.340029759711,-94.0139423988359,46.28716775752924,-410.114621930906,309.7145907602313,-249.3112153297231,-164.0489563956039,-13.18035686637081,14.30477260005235,455.394094551857,-17.26892711483297,-39.0550425226967,-155.5499735953195,-85.6713080421283,341.9315139607727,-206.7578251937366},1E-8);double[]errors=model.estimateRegressionParametersStandardErrors();TestUtils.assertEquals(new double[]{890420.383607373,84.9149257747669,0.334910077722432E-01,0.488399681651699,0.214274163161675,0.226073200069370,455.478499142212},errors,1E-6);}"
"org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest.testSwissFertility",0,"/** * Test R Swiss fertility dataset against R. Data Source: R datasets package*/@Test public void testSwissFertility(){double[]design=new double[]{80.2,17.0,15,12,9.96,83.1,45.1,6,9,84.84,92.5,39.7,5,5,93.40,85.8,36.5,12,7,33.77,76.9,43.5,17,15,5.16,76.1,35.3,9,7,90.57,83.8,70.2,16,7,92.85,92.4,67.8,14,8,97.16,82.4,53.3,12,7,97.67,82.9,45.2,16,13,91.38,87.1,64.5,14,6,98.61,64.1,62.0,21,12,8.52,66.9,67.5,14,7,2.27,68.9,60.7,19,12,4.43,61.7,69.3,22,5,2.82,68.3,72.6,18,2,24.20,71.7,34.0,17,8,3.30,55.7,19.4,26,28,12.11,54.3,15.2,31,20,2.15,65.1,73.0,19,9,2.84,65.5,59.8,22,10,5.23,65.0,55.1,14,3,4.52,56.6,50.9,22,12,15.14,57.4,54.1,20,6,4.20,72.5,71.2,12,1,2.40,74.2,58.1,14,8,5.23,72.0,63.5,6,3,2.56,60.5,60.8,16,10,7.72,58.3,26.8,25,19,18.46,65.4,49.5,15,8,6.10,75.5,85.9,3,2,99.71,69.3,84.9,7,6,99.68,77.3,89.7,5,2,100.00,70.5,78.2,12,6,98.96,79.4,64.9,7,3,98.22,65.0,75.9,9,9,99.06,92.2,84.6,3,3,99.46,79.3,63.1,13,13,96.83,70.4,38.4,26,12,5.62,65.7,7.7,29,11,13.79,72.7,16.7,22,13,11.22,64.4,17.6,35,32,16.92,77.6,37.6,15,7,4.97,67.6,18.7,25,7,8.65,35.0,1.2,37,53,42.34,44.7,46.6,16,29,50.43,42.8,27.7,22,29,58.33};int nobs=47;int nvars=4;OLSMultipleLinearRegression model=new OLSMultipleLinearRegression();model.newSampleData(design,nobs,nvars);double[]betaHat=model.estimateRegressionParameters();TestUtils.assertEquals(betaHat,new double[]{91.05542390271397,-0.22064551045715,-0.26058239824328,-0.96161238456030,0.12441843147162},1E-12);double[]residuals=model.estimateResiduals();TestUtils.assertEquals(residuals,new double[]{7.1044267859730512,1.6580347433531366,4.6944952770029644,8.4548022690166160,13.6547432343186212,-9.3586864458500774,7.5822446330520386,15.5568995563859289,0.8113090736598980,7.1186762732484308,7.4251378771228724,2.6761316873234109,0.8351584810309354,7.1769991119615177,-3.8746753206299553,-3.1337779476387251,-0.1412575244091504,1.1186809170469780,-6.3588097346816594,3.4039270429434074,2.3374058329820175,-7.9272368576900503,-7.8361010968497959,-11.2597369269357070,0.9445333697827101,6.6544245101380328,-0.9146136301118665,-4.3152449403848570,-4.3536932047009183,-3.8907885169304661,-6.3027643926302188,-7.8308982189289091,-3.1792280015332750,-6.7167298771158226,-4.8469946718041754,-10.6335664353633685,11.1031134362036958,6.0084032641811733,5.4326230830188482,-7.2375578629692230,2.1671550814448222,15.0147574652763112,4.8625103516321015,-7.1597256413907706,-0.4515205619767598,-10.2916870903837587,-15.7812984571900063},1E-12);double[]errors=model.estimateRegressionParametersStandardErrors();TestUtils.assertEquals(new double[]{6.94881329475087,0.07360008972340,0.27410957467466,0.19454551679325,0.03726654773803},errors,1E-10);}"
"org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest.testHat",0,"/** * Test hat matrix computation* @throws Exception*/@Test public void testHat()throws Exception {double[]design=new double[]{11.14,.499,11.1,12.74,.558,8.9,13.13,.604,8.8,11.51,.441,8.9,12.38,.550,8.8,12.60,.528,9.9,11.13,.418,10.7,11.7,.480,10.5,11.02,.406,10.5,11.41,.467,10.7};int nobs=10;int nvars=2;OLSMultipleLinearRegression model=new OLSMultipleLinearRegression();model.newSampleData(design,nobs,nvars);RealMatrix hat=model.calculateHat();double[]referenceData=new double[]{.418,-.002,.079,-.274,-.046,.181,.128,.222,.050,.242,.242,.292,.136,.243,.128,-.041,.033,-.035,.004,.417,-.019,.273,.187,-.126,.044,-.153,.004,.604,.197,-.038,.168,-.022,.275,-.028,.252,.111,-.030,.019,-.010,-.010,.148,.042,.117,.012,.111,.262,.145,.277,.174,.154,.120,.168,.315,.148,.187};int k=0;for (int i=0;i < 10;i++){for (int j=i;j < 10;j++){assertEquals(referenceData[k],hat.getEntry(i,j),10e-3);assertEquals(hat.getEntry(i,j),hat.getEntry(j,i),10e-12);k++;}}double[]residuals=model.estimateResiduals();RealMatrix I=MatrixUtils.createRealIdentityMatrix(10);double[]hatResiduals=I.subtract(hat).multiply(model.Y).getColumn(0);TestUtils.assertEquals(residuals,hatResiduals,10e-12);}"
"org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testStats",0,"/** * test stats */public void testStats(){SummaryStatistics u=createSummaryStatistics();assertEquals(""total count"",0,u.getN(),tolerance);u.addValue(one);u.addValue(twoF);u.addValue(twoL);u.addValue(three);assertEquals(""N"",n,u.getN(),tolerance);assertEquals(""sum"",sum,u.getSum(),tolerance);assertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);assertEquals(""var"",var,u.getVariance(),tolerance);assertEquals(""std"",std,u.getStandardDeviation(),tolerance);assertEquals(""mean"",mean,u.getMean(),tolerance);assertEquals(""min"",min,u.getMin(),tolerance);assertEquals(""max"",max,u.getMax(),tolerance);u.clear();assertEquals(""total count"",0,u.getN(),tolerance);}"
"org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testN0andN1Conditions",0,"public void testN0andN1Conditions()throws Exception {SummaryStatistics u=createSummaryStatistics();assertTrue(""Mean of n = 0 set should be NaN"",Double.isNaN(u.getMean()));assertTrue(""Standard Deviation of n = 0 set should be NaN"",Double.isNaN(u.getStandardDeviation()));assertTrue(""Variance of n = 0 set should be NaN"",Double.isNaN(u.getVariance()));u.addValue(one);assertTrue(""mean should be one (n = 1)"",u.getMean()== one);assertTrue(""geometric should be one (n = 1)instead it is "" + u.getGeometricMean(),u.getGeometricMean()== one);assertTrue(""Std should be zero (n = 1)"",u.getStandardDeviation()== 0.0);assertTrue(""variance should be zero (n = 1)"",u.getVariance()== 0.0);u.addValue(twoF);assertTrue(""Std should not be zero (n = 2)"",u.getStandardDeviation()!= 0.0);assertTrue(""variance should not be zero (n = 2)"",u.getVariance()!= 0.0);}"
"org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testProductAndGeometricMean",0,"public void testProductAndGeometricMean()throws Exception {SummaryStatistics u=createSummaryStatistics();u.addValue(1.0);u.addValue(2.0);u.addValue(3.0);u.addValue(4.0);assertEquals(""Geometric mean not expected"",2.213364,u.getGeometricMean(),0.00001);}"
"org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testNaNContracts",0,"public void testNaNContracts(){SummaryStatistics u=createSummaryStatistics();assertTrue(""mean not NaN"",Double.isNaN(u.getMean()));assertTrue(""min not NaN"",Double.isNaN(u.getMin()));assertTrue(""std dev not NaN"",Double.isNaN(u.getStandardDeviation()));assertTrue(""var not NaN"",Double.isNaN(u.getVariance()));assertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));u.addValue(1.0);assertEquals(""mean not expected"",1.0,u.getMean(),Double.MIN_VALUE);assertEquals(""variance not expected"",0.0,u.getVariance(),Double.MIN_VALUE);assertEquals(""geometric mean not expected"",1.0,u.getGeometricMean(),Double.MIN_VALUE);u.addValue(-1.0);assertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));u.addValue(0.0);assertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));}"
"org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testGetSummary",0,"public void testGetSummary(){SummaryStatistics u=createSummaryStatistics();StatisticalSummary summary=u.getSummary();verifySummary(u,summary);u.addValue(1d);summary=u.getSummary();verifySummary(u,summary);u.addValue(2d);summary=u.getSummary();verifySummary(u,summary);u.addValue(2d);summary=u.getSummary();verifySummary(u,summary);}"
"org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testSerialization",0,"public void testSerialization(){SummaryStatistics u=createSummaryStatistics();TestUtils.checkSerializedEquality(u);SummaryStatistics s=(SummaryStatistics)TestUtils.serializeAndRecover(u);StatisticalSummary summary=s.getSummary();verifySummary(u,summary);u.addValue(2d);u.addValue(1d);u.addValue(3d);u.addValue(4d);u.addValue(5d);TestUtils.checkSerializedEquality(u);s=(SummaryStatistics)TestUtils.serializeAndRecover(u);summary=s.getSummary();verifySummary(u,summary);}"
"org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testEqualsAndHashCode",0,"public void testEqualsAndHashCode(){SummaryStatistics u=createSummaryStatistics();SummaryStatistics t=null;int emptyHash=u.hashCode();assertTrue(""reflexive"",u.equals(u));assertFalse(""non-null compared to null"",u.equals(t));assertFalse(""wrong type"",u.equals(Double.valueOf(0)));t=createSummaryStatistics();assertTrue(""empty instances should be equal"",t.equals(u));assertTrue(""empty instances should be equal"",u.equals(t));assertEquals(""empty hash code"",emptyHash,t.hashCode());u.addValue(2d);u.addValue(1d);u.addValue(3d);u.addValue(4d);assertFalse(""different n's should make instances not equal"",t.equals(u));assertFalse(""different n's should make instances not equal"",u.equals(t));assertTrue(""different n's should make hashcodes different"",u.hashCode()!= t.hashCode());t.addValue(2d);t.addValue(1d);t.addValue(3d);t.addValue(4d);assertTrue(""summaries based on same data should be equal"",t.equals(u));assertTrue(""summaries based on same data should be equal"",u.equals(t));assertEquals(""summaries based on same data should have same hashcodes"",u.hashCode(),t.hashCode());u.clear();t.clear();assertTrue(""empty instances should be equal"",t.equals(u));assertTrue(""empty instances should be equal"",u.equals(t));assertEquals(""empty hash code"",emptyHash,t.hashCode());assertEquals(""empty hash code"",emptyHash,u.hashCode());}"
"org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testCopy",0,"public void testCopy()throws Exception {SummaryStatistics u=createSummaryStatistics();u.addValue(2d);u.addValue(1d);u.addValue(3d);u.addValue(4d);SummaryStatistics v=new SummaryStatistics(u);assertEquals(u,v);assertEquals(v,u);assertTrue(v.geoMean == v.getGeoMeanImpl());assertTrue(v.mean == v.getMeanImpl());assertTrue(v.min == v.getMinImpl());assertTrue(v.max == v.getMaxImpl());assertTrue(v.sum == v.getSumImpl());assertTrue(v.sumsq == v.getSumsqImpl());assertTrue(v.sumLog == v.getSumLogImpl());assertTrue(v.variance == v.getVarianceImpl());u.addValue(7d);u.addValue(9d);u.addValue(11d);u.addValue(23d);v.addValue(7d);v.addValue(9d);v.addValue(11d);v.addValue(23d);assertEquals(u,v);assertEquals(v,u);u.clear();u.setSumImpl(new Sum());SummaryStatistics.copy(u,v);assertEquals(u.sum,v.sum);assertEquals(u.getSumImpl(),v.getSumImpl());}"
"org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testSetterInjection",0,"public void testSetterInjection()throws Exception {SummaryStatistics u=createSummaryStatistics();u.setMeanImpl(new Sum());u.setSumLogImpl(new Sum());u.addValue(1);u.addValue(3);assertEquals(4,u.getMean(),1E-14);assertEquals(4,u.getSumOfLogs(),1E-14);assertEquals(Math.exp(2),u.getGeometricMean(),1E-14);u.clear();u.addValue(1);u.addValue(2);assertEquals(3,u.getMean(),1E-14);u.clear();u.setMeanImpl(new Mean());}"
"org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testSetterIllegalState",0,"public void testSetterIllegalState()throws Exception {SummaryStatistics u=createSummaryStatistics();u.addValue(1);u.addValue(3);try {u.setMeanImpl(new Sum());fail(""Expecting IllegalStateException"");}catch(IllegalStateException ex){}}"
"org.apache.commons.math.MaxIterationsExceededExceptionTest.testSimpleConstructor",0,"public void testSimpleConstructor(){MaxIterationsExceededException ex=new MaxIterationsExceededException(1000000);assertNull(ex.getCause());assertNotNull(ex.getMessage());assertTrue(ex.getMessage().indexOf(""1,000,000"")> 0);assertEquals(1000000,ex.getMaxIterations());assertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));}"
"org.apache.commons.math.MaxIterationsExceededExceptionTest.testComplexConstructor",0,"public void testComplexConstructor(){MaxIterationsExceededException ex=new MaxIterationsExceededException(1000000,""Continued fraction convergents failed to converge for value {0}"",new Object[]{Double.valueOf(1234567)});assertNull(ex.getCause());assertNotNull(ex.getMessage());assertTrue(ex.getMessage().indexOf(""1,000,000"")< 0);assertTrue(ex.getMessage().indexOf(""1,234,567"")> 0);assertEquals(1000000,ex.getMaxIterations());assertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));}"
"org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testDimensionCheck",0,"public void testDimensionCheck(){try {TestProblem1 pb=new TestProblem1();DormandPrince853Integrator integrator=new DormandPrince853Integrator(0.0,1.0,1.0e-10,1.0e-10);integrator.integrate(pb,0.0,new double[pb.getDimension()+ 10],1.0,new double[pb.getDimension()+ 10]);fail(""an exception should have been thrown"");}catch(DerivativeException de){fail(""wrong exception caught"");}catch(IntegratorException ie){}}"
"org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testNullIntervalCheck",0,"public void testNullIntervalCheck(){try {TestProblem1 pb=new TestProblem1();DormandPrince853Integrator integrator=new DormandPrince853Integrator(0.0,1.0,1.0e-10,1.0e-10);integrator.integrate(pb,0.0,new double[pb.getDimension()],0.0,new double[pb.getDimension()]);fail(""an exception should have been thrown"");}catch(DerivativeException de){fail(""wrong exception caught"");}catch(IntegratorException ie){}}"
"org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testMinStep",0,"public void testMinStep()throws DerivativeException,IntegratorException {try {TestProblem1 pb=new TestProblem1();double minStep=0.1 * (pb.getFinalTime()- pb.getInitialTime());double maxStep=pb.getFinalTime()- pb.getInitialTime();double[]vecAbsoluteTolerance={1.0e-15,1.0e-16};double[]vecRelativeTolerance={1.0e-15,1.0e-16};FirstOrderIntegrator integ=new DormandPrince853Integrator(minStep,maxStep,vecAbsoluteTolerance,vecRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);fail(""an exception should have been thrown"");}catch(DerivativeException de){fail(""wrong exception caught"");}catch(IntegratorException ie){}}"
"org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testIncreasingTolerance",0,"public void testIncreasingTolerance()throws DerivativeException,IntegratorException {int previousCalls=Integer.MAX_VALUE;for (int i=-12;i < -2;++i){TestProblem1 pb=new TestProblem1();double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=Math.pow(10.0,i);double scalRelativeTolerance=0.01 * scalAbsoluteTolerance;FirstOrderIntegrator integ=new DormandPrince853Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.getMaximalValueError()< (1.3 * scalAbsoluteTolerance));assertEquals(0,handler.getMaximalTimeError(),1.0e-12);int calls=pb.getCalls();assertTrue(calls <= previousCalls);previousCalls=calls;}}"
"org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testBackward",0,"public void testBackward()throws DerivativeException,IntegratorException {TestProblem5 pb=new TestProblem5();double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=0.01 * scalAbsoluteTolerance;FirstOrderIntegrator integ=new DormandPrince853Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.getLastError()< 8.0e-8);assertTrue(handler.getMaximalValueError()< 2.0e-7);assertEquals(0,handler.getMaximalTimeError(),1.0e-12);assertEquals(""Dormand-Prince 8 (5,3)"",integ.getName());}"
"org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testEvents",0,"public void testEvents()throws DerivativeException,IntegratorException {TestProblem4 pb=new TestProblem4();double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-9;double scalRelativeTolerance=0.01 * scalAbsoluteTolerance;FirstOrderIntegrator integ=new DormandPrince853Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);EventHandler[]functions=pb.getEventsHandlers();for (int l=0;l < functions.length;++l){integ.addEventHandler(functions[l],Double.POSITIVE_INFINITY,1.0e-8 * maxStep,1000);}assertEquals(functions.length,integ.getEventHandlers().size());integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.getMaximalValueError()< 5.0e-8);assertEquals(0,handler.getMaximalTimeError(),1.0e-12);assertEquals(12.0,handler.getLastTime(),1.0e-8 * maxStep);integ.clearEventHandlers();assertEquals(0,integ.getEventHandlers().size());}"
"org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testKepler",0,"public void testKepler()throws DerivativeException,IntegratorException {final TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=scalAbsoluteTolerance;FirstOrderIntegrator integ=new DormandPrince853Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);integ.addStepHandler(new KeplerHandler(pb));integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(pb.getCalls()< 3300);}"
"org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testVariableSteps",0,"public void testVariableSteps()throws DerivativeException,IntegratorException {final TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=scalAbsoluteTolerance;FirstOrderIntegrator integ=new DormandPrince853Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);integ.addStepHandler(new VariableHandler());double stopTime=integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertEquals(pb.getFinalTime(),stopTime,1.0e-10);assertEquals(""Dormand-Prince 8 (5,3)"",integ.getName());}"
"org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testNoDenseOutput",0,"public void testNoDenseOutput()throws DerivativeException,IntegratorException {TestProblem1 pb1=new TestProblem1();TestProblem1 pb2=(TestProblem1)pb1.clone();double minStep=0.1 * (pb1.getFinalTime()- pb1.getInitialTime());double maxStep=pb1.getFinalTime()- pb1.getInitialTime();double scalAbsoluteTolerance=1.0e-4;double scalRelativeTolerance=1.0e-4;FirstOrderIntegrator integ=new DormandPrince853Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);integ.addStepHandler(DummyStepHandler.getInstance());integ.integrate(pb1,pb1.getInitialTime(),pb1.getInitialState(),pb1.getFinalTime(),new double[pb1.getDimension()]);int callsWithoutDenseOutput=pb1.getCalls();integ.addStepHandler(new InterpolatingStepHandler());integ.integrate(pb2,pb2.getInitialTime(),pb2.getInitialState(),pb2.getFinalTime(),new double[pb2.getDimension()]);int callsWithDenseOutput=pb2.getCalls();assertTrue(callsWithDenseOutput > callsWithoutDenseOutput);}"
"org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testUnstableDerivative",0,"public void testUnstableDerivative()throws DerivativeException,IntegratorException {final StepProblem stepProblem=new StepProblem(0.0,1.0,2.0);FirstOrderIntegrator integ=new DormandPrince853Integrator(0.1,10,1.0e-12,0.0);integ.addEventHandler(stepProblem,1.0,1.0e-12,1000);double[]y={Double.NaN};integ.integrate(stepProblem,0.0,new double[]{0.0},10.0,y);assertEquals(8.0,y[0],1.0e-12);}"
"org.apache.commons.math.MathExceptionTest.testConstructor",0,"public void testConstructor(){MathException ex=new MathException();assertNull(ex.getCause());assertNull(ex.getMessage());assertEquals(0,ex.getMessage(Locale.FRENCH).length());}"
"org.apache.commons.math.MathExceptionTest.testConstructorPatternArguments",0,"public void testConstructorPatternArguments(){String pattern=""a {0}x{1}matrix cannot be a rotation matrix"";Object[]arguments={Integer.valueOf(6),Integer.valueOf(4)};MathException ex=new MathException(pattern,arguments);assertNull(ex.getCause());assertEquals(pattern,ex.getPattern());assertEquals(arguments.length,ex.getArguments().length);for (int i=0;i < arguments.length;++i){assertEquals(arguments[i],ex.getArguments()[i]);}assertFalse(pattern.equals(ex.getMessage()));assertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));}"
"org.apache.commons.math.MathExceptionTest.testConstructorCause",0,"public void testConstructorCause(){String inMsg=""inner message"";Exception cause=new Exception(inMsg);MathException ex=new MathException(cause);assertEquals(cause,ex.getCause());}"
"org.apache.commons.math.MathExceptionTest.testConstructorPatternArgumentsCause",0,"public void testConstructorPatternArgumentsCause(){String pattern=""a {0}x{1}matrix cannot be a rotation matrix"";Object[]arguments={Integer.valueOf(6),Integer.valueOf(4)};String inMsg=""inner message"";Exception cause=new Exception(inMsg);MathException ex=new MathException(pattern,arguments,cause);assertEquals(cause,ex.getCause());assertEquals(pattern,ex.getPattern());assertEquals(arguments.length,ex.getArguments().length);for (int i=0;i < arguments.length;++i){assertEquals(arguments[i],ex.getArguments()[i]);}assertFalse(pattern.equals(ex.getMessage()));assertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));}"
"org.apache.commons.math.MathExceptionTest.testPrintStackTrace",0,"/** * Tests the printStackTrace()operation.*/public void testPrintStackTrace(){String outMsg=""outer message"";String inMsg=""inner message"";MathException cause=new MathConfigurationException(inMsg,null);MathException ex=new MathException(outMsg,null,cause);ByteArrayOutputStream baos=new ByteArrayOutputStream();PrintStream ps=new PrintStream(baos);ex.printStackTrace(ps);String stack=baos.toString();String outerMsg=""org.apache.commons.math.MathException: outer message"";String innerMsg=""Caused by: "" + ""org.apache.commons.math.MathConfigurationException: inner message"";assertTrue(stack.startsWith(outerMsg));assertTrue(stack.indexOf(innerMsg)> 0);PrintWriter pw=new PrintWriter(ps,true);ex.printStackTrace(pw);stack=baos.toString();assertTrue(stack.startsWith(outerMsg));assertTrue(stack.indexOf(innerMsg)> 0);}"
"org.apache.commons.math.MathExceptionTest.testSerialization",0,"/** * Test serialization*/public void testSerialization(){String outMsg=""outer message"";String inMsg=""inner message"";MathException cause=new MathConfigurationException(inMsg,null);MathException ex=new MathException(outMsg,null,cause);MathException image=(MathException)TestUtils.serializeAndRecover(ex);ByteArrayOutputStream baos=new ByteArrayOutputStream();PrintStream ps=new PrintStream(baos);ex.printStackTrace(ps);String stack=baos.toString();ByteArrayOutputStream baos2=new ByteArrayOutputStream();PrintStream ps2=new PrintStream(baos2);image.printStackTrace(ps2);String stack2=baos2.toString();boolean jdkSupportsNesting=false;try {Throwable.class.getDeclaredMethod(""getCause"",new Class[0]);jdkSupportsNesting=true;}catch(NoSuchMethodException e){jdkSupportsNesting=false;}if (jdkSupportsNesting){assertEquals(stack,stack2);}else {assertTrue(stack2.indexOf(inMsg)!= -1);assertTrue(stack2.indexOf(""MathConfigurationException"")!= -1);}}"
"org.apache.commons.math.complex.ComplexFormatTest.testSimpleNoDecimals",0,"public void testSimpleNoDecimals(){Complex c=new Complex(1,1);String expected=""1 + 1i"";String actual=complexFormat.format(c);assertEquals(expected,actual);}"
"org.apache.commons.math.complex.ComplexFormatTest.testSimpleWithDecimals",0,"public void testSimpleWithDecimals(){Complex c=new Complex(1.23,1.43);String expected=""1"" + getDecimalCharacter()+ ""23 + 1""+ getDecimalCharacter()+ ""43i"";String actual=complexFormat.format(c);assertEquals(expected,actual);}"
"org.apache.commons.math.complex.ComplexFormatTest.testSimpleWithDecimalsTrunc",0,"public void testSimpleWithDecimalsTrunc(){Complex c=new Complex(1.2323,1.4343);String expected=""1"" + getDecimalCharacter()+ ""23 + 1""+ getDecimalCharacter()+ ""43i"";String actual=complexFormat.format(c);assertEquals(expected,actual);}"
"org.apache.commons.math.complex.ComplexFormatTest.testNegativeReal",0,"public void testNegativeReal(){Complex c=new Complex(-1.2323,1.4343);String expected=""-1"" + getDecimalCharacter()+ ""23 + 1""+ getDecimalCharacter()+ ""43i"";String actual=complexFormat.format(c);assertEquals(expected,actual);}"
"org.apache.commons.math.complex.ComplexFormatTest.testNegativeImaginary",0,"public void testNegativeImaginary(){Complex c=new Complex(1.2323,-1.4343);String expected=""1"" + getDecimalCharacter()+ ""23 - 1""+ getDecimalCharacter()+ ""43i"";String actual=complexFormat.format(c);assertEquals(expected,actual);}"
"org.apache.commons.math.complex.ComplexFormatTest.testNegativeBoth",0,"public void testNegativeBoth(){Complex c=new Complex(-1.2323,-1.4343);String expected=""-1"" + getDecimalCharacter()+ ""23 - 1""+ getDecimalCharacter()+ ""43i"";String actual=complexFormat.format(c);assertEquals(expected,actual);}"
"org.apache.commons.math.complex.ComplexFormatTest.testZeroReal",0,"public void testZeroReal(){Complex c=new Complex(0.0,-1.4343);String expected=""0 - 1"" + getDecimalCharacter()+ ""43i"";String actual=complexFormat.format(c);assertEquals(expected,actual);}"
"org.apache.commons.math.complex.ComplexFormatTest.testZeroImaginary",0,"public void testZeroImaginary(){Complex c=new Complex(30.233,0);String expected=""30"" + getDecimalCharacter()+ ""23"";String actual=complexFormat.format(c);assertEquals(expected,actual);}"
"org.apache.commons.math.complex.ComplexFormatTest.testDifferentImaginaryChar",0,"public void testDifferentImaginaryChar(){Complex c=new Complex(1,1);String expected=""1 + 1j"";String actual=complexFormatJ.format(c);assertEquals(expected,actual);}"
"org.apache.commons.math.complex.ComplexFormatTest.testStaticFormatComplex",0,"public void testStaticFormatComplex(){Locale defaultLocal=Locale.getDefault();Locale.setDefault(getLocale());Complex c=new Complex(232.222,-342.33);String expected=""232"" + getDecimalCharacter()+ ""22 - 342""+ getDecimalCharacter()+ ""33i"";String actual=ComplexFormat.formatComplex(c);assertEquals(expected,actual);Locale.setDefault(defaultLocal);}"
"org.apache.commons.math.complex.ComplexFormatTest.testNan",0,"public void testNan(){Complex c=new Complex(Double.NaN,Double.NaN);String expected=""(NaN)+ (NaN)i"";String actual=complexFormat.format(c);assertEquals(expected,actual);}"
"org.apache.commons.math.complex.ComplexFormatTest.testPositiveInfinity",0,"public void testPositiveInfinity(){Complex c=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);String expected=""(Infinity)+ (Infinity)i"";String actual=complexFormat.format(c);assertEquals(expected,actual);}"
"org.apache.commons.math.complex.ComplexFormatTest.testNegativeInfinity",0,"public void testNegativeInfinity(){Complex c=new Complex(Double.NEGATIVE_INFINITY,Double.NEGATIVE_INFINITY);String expected=""(-Infinity)- (Infinity)i"";String actual=complexFormat.format(c);assertEquals(expected,actual);}"
"org.apache.commons.math.complex.ComplexFormatTest.testParseSimpleNoDecimals",0,"public void testParseSimpleNoDecimals(){String source=""1 + 1i"";Complex expected=new Complex(1,1);try {Complex actual=(Complex)complexFormat.parseObject(source);assertEquals(expected,actual);}catch(ParseException ex){fail(ex.getMessage());}}"
"org.apache.commons.math.complex.ComplexFormatTest.testParseSimpleWithDecimals",0,"public void testParseSimpleWithDecimals(){String source=""1"" + getDecimalCharacter()+ ""23 + 1""+ getDecimalCharacter()+ ""43i"";Complex expected=new Complex(1.23,1.43);try {Complex actual=(Complex)complexFormat.parseObject(source);assertEquals(expected,actual);}catch(ParseException ex){fail(ex.getMessage());}}"
"org.apache.commons.math.complex.ComplexFormatTest.testParseSimpleWithDecimalsTrunc",0,"public void testParseSimpleWithDecimalsTrunc(){String source=""1"" + getDecimalCharacter()+ ""2323 + 1""+ getDecimalCharacter()+ ""4343i"";Complex expected=new Complex(1.2323,1.4343);try {Complex actual=(Complex)complexFormat.parseObject(source);assertEquals(expected,actual);}catch(ParseException ex){fail(ex.getMessage());}}"
"org.apache.commons.math.complex.ComplexFormatTest.testParseNegativeReal",0,"public void testParseNegativeReal(){String source=""-1"" + getDecimalCharacter()+ ""2323 + 1""+ getDecimalCharacter()+ ""4343i"";Complex expected=new Complex(-1.2323,1.4343);try {Complex actual=(Complex)complexFormat.parseObject(source);assertEquals(expected,actual);}catch(ParseException ex){fail(ex.getMessage());}}"
"org.apache.commons.math.complex.ComplexFormatTest.testParseNegativeImaginary",0,"public void testParseNegativeImaginary(){String source=""1"" + getDecimalCharacter()+ ""2323 - 1""+ getDecimalCharacter()+ ""4343i"";Complex expected=new Complex(1.2323,-1.4343);try {Complex actual=(Complex)complexFormat.parseObject(source);assertEquals(expected,actual);}catch(ParseException ex){fail(ex.getMessage());}}"
"org.apache.commons.math.complex.ComplexFormatTest.testParseNegativeBoth",0,"public void testParseNegativeBoth(){String source=""-1"" + getDecimalCharacter()+ ""2323 - 1""+ getDecimalCharacter()+ ""4343i"";Complex expected=new Complex(-1.2323,-1.4343);try {Complex actual=(Complex)complexFormat.parseObject(source);assertEquals(expected,actual);}catch(ParseException ex){fail(ex.getMessage());}}"
"org.apache.commons.math.complex.ComplexFormatTest.testParseZeroReal",0,"public void testParseZeroReal(){String source=""0"" + getDecimalCharacter()+ ""0 - 1""+ getDecimalCharacter()+ ""4343i"";Complex expected=new Complex(0.0,-1.4343);try {Complex actual=(Complex)complexFormat.parseObject(source);assertEquals(expected,actual);}catch(ParseException ex){fail(ex.getMessage());}}"
"org.apache.commons.math.complex.ComplexFormatTest.testParseZeroImaginary",0,"public void testParseZeroImaginary(){String source=""-1"" + getDecimalCharacter()+ ""2323"";Complex expected=new Complex(-1.2323,0);try {Complex actual=(Complex)complexFormat.parseObject(source);assertEquals(expected,actual);}catch(ParseException ex){fail(ex.getMessage());}}"
"org.apache.commons.math.complex.ComplexFormatTest.testParseDifferentImaginaryChar",0,"public void testParseDifferentImaginaryChar(){String source=""-1"" + getDecimalCharacter()+ ""2323 - 1""+ getDecimalCharacter()+ ""4343j"";Complex expected=new Complex(-1.2323,-1.4343);try {Complex actual=(Complex)complexFormatJ.parseObject(source);assertEquals(expected,actual);}catch(ParseException ex){fail(ex.getMessage());}}"
"org.apache.commons.math.complex.ComplexFormatTest.testParseNan",0,"public void testParseNan(){String source=""(NaN)+ (NaN)i"";Complex expected=new Complex(Double.NaN,Double.NaN);try {Complex actual=(Complex)complexFormat.parseObject(source);assertEquals(expected,actual);}catch(ParseException ex){fail(ex.getMessage());}}"
"org.apache.commons.math.complex.ComplexFormatTest.testParsePositiveInfinity",0,"public void testParsePositiveInfinity(){String source=""(Infinity)+ (Infinity)i"";Complex expected=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);try {Complex actual=(Complex)complexFormat.parseObject(source);assertEquals(expected,actual);}catch(ParseException ex){fail(ex.getMessage());}}"
"org.apache.commons.math.complex.ComplexFormatTest.testPaseNegativeInfinity",0,"public void testPaseNegativeInfinity(){String source=""(-Infinity)- (Infinity)i"";Complex expected=new Complex(Double.NEGATIVE_INFINITY,Double.NEGATIVE_INFINITY);try {Complex actual=(Complex)complexFormat.parseObject(source);assertEquals(expected,actual);}catch(ParseException ex){fail(ex.getMessage());}}"
"org.apache.commons.math.complex.ComplexFormatTest.testConstructorSingleFormat",0,"public void testConstructorSingleFormat(){NumberFormat nf=NumberFormat.getInstance();ComplexFormat cf=new ComplexFormat(nf);assertNotNull(cf);assertEquals(nf,cf.getRealFormat());}"
"org.apache.commons.math.complex.ComplexFormatTest.testGetImaginaryFormat",0,"public void testGetImaginaryFormat(){NumberFormat nf=NumberFormat.getInstance();ComplexFormat cf=new ComplexFormat();assertNotSame(nf,cf.getImaginaryFormat());cf.setImaginaryFormat(nf);assertSame(nf,cf.getImaginaryFormat());}"
"org.apache.commons.math.complex.ComplexFormatTest.testSetImaginaryFormatNull",0,"public void testSetImaginaryFormatNull(){try {ComplexFormat cf=new ComplexFormat();cf.setImaginaryFormat(null);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.complex.ComplexFormatTest.testSetRealFormatNull",0,"public void testSetRealFormatNull(){try {ComplexFormat cf=new ComplexFormat();cf.setRealFormat(null);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.complex.ComplexFormatTest.testGetRealFormat",0,"public void testGetRealFormat(){NumberFormat nf=NumberFormat.getInstance();ComplexFormat cf=new ComplexFormat();assertNotSame(nf,cf.getRealFormat());cf.setRealFormat(nf);assertSame(nf,cf.getRealFormat());}"
"org.apache.commons.math.complex.ComplexFormatTest.testSetImaginaryCharacterNull",0,"public void testSetImaginaryCharacterNull(){try {ComplexFormat cf=new ComplexFormat();cf.setImaginaryCharacter(null);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.complex.ComplexFormatTest.testSetImaginaryCharacterEmpty",0,"public void testSetImaginaryCharacterEmpty(){try {ComplexFormat cf=new ComplexFormat();cf.setImaginaryCharacter("""");fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.complex.ComplexFormatTest.testFormatNumber",0,"public void testFormatNumber(){CompositeFormat cf=ComplexFormat.getInstance(getLocale());Double pi=Double.valueOf(Math.PI);String text=cf.format(pi);assertEquals(""3"" + getDecimalCharacter()+ ""14"",text);}"
"org.apache.commons.math.complex.ComplexFormatTest.testFormatObject",0,"public void testFormatObject(){try {CompositeFormat cf=new ComplexFormat();Object object=new Object();cf.format(object);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.complex.ComplexFormatTest.testForgottenImaginaryCharacter",0,"public void testForgottenImaginaryCharacter(){ParsePosition pos=new ParsePosition(0);assertNull(new ComplexFormat().parse(""1 + 1"",pos));assertEquals(5,pos.getErrorIndex());}"
"org.apache.commons.math.distribution.TDistributionTest.testCumulativeProbabilityAgaintStackOverflow",0,"/** * @see <a href=""http://issues.apache.org/bugzilla/show_bug.cgi?id=27243"">*      Bug report that prompted this unit test.</a>*/public void testCumulativeProbabilityAgaintStackOverflow()throws Exception {TDistributionImpl td=new TDistributionImpl(5.);td.cumulativeProbability(.1);td.cumulativeProbability(.01);}"
"org.apache.commons.math.distribution.TDistributionTest.testSmallDf",0,"public void testSmallDf()throws Exception {setDistribution(new TDistributionImpl(1d));setTolerance(1E-4);setCumulativeTestPoints(new double[]{-318.3088,-31.82052,-12.70620,-6.313752,-3.077684,0.0,318.3088,31.82052,12.70620,6.313752,3.077684});setInverseCumulativeTestValues(getCumulativeTestPoints());verifyCumulativeProbabilities();verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math.distribution.TDistributionTest.testInverseCumulativeProbabilityExtremes",0,"public void testInverseCumulativeProbabilityExtremes()throws Exception {setInverseCumulativeTestPoints(new double[]{0,1});setInverseCumulativeTestValues(new double[]{Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY});verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math.distribution.TDistributionTest.testDfAccessors",0,"public void testDfAccessors(){TDistribution distribution=(TDistribution)getDistribution();assertEquals(5d,distribution.getDegreesOfFreedom(),Double.MIN_VALUE);distribution.setDegreesOfFreedom(4d);assertEquals(4d,distribution.getDegreesOfFreedom(),Double.MIN_VALUE);try {distribution.setDegreesOfFreedom(0d);fail(""Expecting IllegalArgumentException for df = 0"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.distribution.TDistributionTest.testCumulativeProbabilities",0,"/** * Verifies that cumulative probability density calculations match expected values using default test instance data*/public void testCumulativeProbabilities()throws Exception {verifyCumulativeProbabilities();}"
"org.apache.commons.math.distribution.TDistributionTest.testInverseCumulativeProbabilities",0,"/** * Verifies that inverse cumulative probability density calculations match expected values using default test instance data*/public void testInverseCumulativeProbabilities()throws Exception {verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math.distribution.TDistributionTest.testConsistency",0,"/** * Verifies that probability computations are consistent*/public void testConsistency()throws Exception {for (int i=1;i < cumulativeTestPoints.length;i++){TestUtils.assertEquals(0d,distribution.cumulativeProbability(cumulativeTestPoints[i],cumulativeTestPoints[i]),tolerance);double upper=Math.max(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double lower=Math.min(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double diff=distribution.cumulativeProbability(upper)- distribution.cumulativeProbability(lower);double direct=distribution.cumulativeProbability(lower,upper);TestUtils.assertEquals(""Inconsistent cumulative probabilities for ("" + lower + "",""+ upper+ "")"",diff,direct,tolerance);}}"
"org.apache.commons.math.distribution.TDistributionTest.testIllegalArguments",0,"/** * Verifies that illegal arguments are correctly handled*/public void testIllegalArguments()throws Exception {try {distribution.cumulativeProbability(1,0);fail(""Expecting IllegalArgumentException for bad cumulativeProbability interval"");}catch(IllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(-1);fail(""Expecting IllegalArgumentException for p = -1"");}catch(IllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(2);fail(""Expecting IllegalArgumentException for p = 2"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.complex.ComplexTest.testConstructor",0,"public void testConstructor(){Complex z=new Complex(3.0,4.0);assertEquals(3.0,z.getReal(),1.0e-5);assertEquals(4.0,z.getImaginary(),1.0e-5);}"
"org.apache.commons.math.complex.ComplexTest.testConstructorNaN",0,"public void testConstructorNaN(){Complex z=new Complex(3.0,Double.NaN);assertTrue(z.isNaN());z=new Complex(nan,4.0);assertTrue(z.isNaN());z=new Complex(3.0,4.0);assertFalse(z.isNaN());}"
"org.apache.commons.math.complex.ComplexTest.testAbs",0,"public void testAbs(){Complex z=new Complex(3.0,4.0);assertEquals(5.0,z.abs(),1.0e-5);}"
"org.apache.commons.math.complex.ComplexTest.testAbsNaN",0,"public void testAbsNaN(){assertTrue(Double.isNaN(Complex.NaN.abs()));Complex z=new Complex(inf,nan);assertTrue(Double.isNaN(z.abs()));}"
"org.apache.commons.math.complex.ComplexTest.testAbsInfinite",0,"public void testAbsInfinite(){Complex z=new Complex(inf,0);assertEquals(inf,z.abs(),0);z=new Complex(0,neginf);assertEquals(inf,z.abs(),0);z=new Complex(inf,neginf);assertEquals(inf,z.abs(),0);}"
"org.apache.commons.math.complex.ComplexTest.testAdd",0,"public void testAdd(){Complex x=new Complex(3.0,4.0);Complex y=new Complex(5.0,6.0);Complex z=x.add(y);assertEquals(8.0,z.getReal(),1.0e-5);assertEquals(10.0,z.getImaginary(),1.0e-5);}"
"org.apache.commons.math.complex.ComplexTest.testAddNaN",0,"public void testAddNaN(){Complex x=new Complex(3.0,4.0);Complex z=x.add(Complex.NaN);assertTrue(z.isNaN());z=new Complex(1,nan);Complex w=x.add(z);assertEquals(w.getReal(),4.0,0);assertTrue(Double.isNaN(w.getImaginary()));}"
"org.apache.commons.math.complex.ComplexTest.testAddInfinite",0,"public void testAddInfinite(){Complex x=new Complex(1,1);Complex z=new Complex(inf,0);Complex w=x.add(z);assertEquals(w.getImaginary(),1,0);assertEquals(inf,w.getReal(),0);x=new Complex(neginf,0);assertTrue(Double.isNaN(x.add(z).getReal()));}"
"org.apache.commons.math.complex.ComplexTest.testConjugate",0,"public void testConjugate(){Complex x=new Complex(3.0,4.0);Complex z=x.conjugate();assertEquals(3.0,z.getReal(),1.0e-5);assertEquals(-4.0,z.getImaginary(),1.0e-5);}"
"org.apache.commons.math.complex.ComplexTest.testConjugateNaN",0,"public void testConjugateNaN(){Complex z=Complex.NaN.conjugate();assertTrue(z.isNaN());}"
"org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite",0,"public void testConjugateInfiinite(){Complex z=new Complex(0,inf);assertEquals(neginf,z.conjugate().getImaginary(),0);z=new Complex(0,neginf);assertEquals(inf,z.conjugate().getImaginary(),0);}"
"org.apache.commons.math.complex.ComplexTest.testDivide",0,"public void testDivide(){Complex x=new Complex(3.0,4.0);Complex y=new Complex(5.0,6.0);Complex z=x.divide(y);assertEquals(39.0 / 61.0,z.getReal(),1.0e-5);assertEquals(2.0 / 61.0,z.getImaginary(),1.0e-5);}"
"org.apache.commons.math.complex.ComplexTest.testDivideInfinite",0,"public void testDivideInfinite(){Complex x=new Complex(3,4);Complex w=new Complex(neginf,inf);assertTrue(x.divide(w).equals(Complex.ZERO));Complex z=w.divide(x);assertTrue(Double.isNaN(z.getReal()));assertEquals(inf,z.getImaginary(),0);w=new Complex(inf,inf);z=w.divide(x);assertTrue(Double.isNaN(z.getImaginary()));assertEquals(inf,z.getReal(),0);w=new Complex(1,inf);z=w.divide(w);assertTrue(Double.isNaN(z.getReal()));assertTrue(Double.isNaN(z.getImaginary()));}"
"org.apache.commons.math.complex.ComplexTest.testDivideNaN",0,"public void testDivideNaN(){Complex x=new Complex(3.0,4.0);Complex z=x.divide(Complex.NaN);assertTrue(z.isNaN());}"
"org.apache.commons.math.complex.ComplexTest.testDivideNaNInf",0,"public void testDivideNaNInf(){Complex z=oneInf.divide(Complex.ONE);assertTrue(Double.isNaN(z.getReal()));assertEquals(inf,z.getImaginary(),0);z=negInfNegInf.divide(oneNaN);assertTrue(Double.isNaN(z.getReal()));assertTrue(Double.isNaN(z.getImaginary()));z=negInfInf.divide(Complex.ONE);assertTrue(Double.isNaN(z.getReal()));assertTrue(Double.isNaN(z.getImaginary()));}"
"org.apache.commons.math.complex.ComplexTest.testMultiply",0,"public void testMultiply(){Complex x=new Complex(3.0,4.0);Complex y=new Complex(5.0,6.0);Complex z=x.multiply(y);assertEquals(-9.0,z.getReal(),1.0e-5);assertEquals(38.0,z.getImaginary(),1.0e-5);}"
"org.apache.commons.math.complex.ComplexTest.testMultiplyNaN",0,"public void testMultiplyNaN(){Complex x=new Complex(3.0,4.0);Complex z=x.multiply(Complex.NaN);assertTrue(z.isNaN());}"
"org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf",0,"public void testMultiplyNaNInf(){Complex z=new Complex(1,1);Complex w=z.multiply(infOne);assertEquals(w.getReal(),inf,0);assertEquals(w.getImaginary(),inf,0);assertTrue(new Complex(1,0).multiply(infInf).equals(Complex.INF));assertTrue(new Complex(-1,0).multiply(infInf).equals(Complex.INF));assertTrue(new Complex(1,0).multiply(negInfZero).equals(Complex.INF));w=oneInf.multiply(oneNegInf);assertEquals(w.getReal(),inf,0);assertEquals(w.getImaginary(),inf,0);w=negInfNegInf.multiply(oneNaN);assertTrue(Double.isNaN(w.getReal()));assertTrue(Double.isNaN(w.getImaginary()));}"
"org.apache.commons.math.complex.ComplexTest.testNegate",0,"public void testNegate(){Complex x=new Complex(3.0,4.0);Complex z=x.negate();assertEquals(-3.0,z.getReal(),1.0e-5);assertEquals(-4.0,z.getImaginary(),1.0e-5);}"
"org.apache.commons.math.complex.ComplexTest.testNegateNaN",0,"public void testNegateNaN(){Complex z=Complex.NaN.negate();assertTrue(z.isNaN());}"
"org.apache.commons.math.complex.ComplexTest.testSubtract",0,"public void testSubtract(){Complex x=new Complex(3.0,4.0);Complex y=new Complex(5.0,6.0);Complex z=x.subtract(y);assertEquals(-2.0,z.getReal(),1.0e-5);assertEquals(-2.0,z.getImaginary(),1.0e-5);}"
"org.apache.commons.math.complex.ComplexTest.testSubtractNaN",0,"public void testSubtractNaN(){Complex x=new Complex(3.0,4.0);Complex z=x.subtract(Complex.NaN);assertTrue(z.isNaN());}"
"org.apache.commons.math.complex.ComplexTest.testEqualsNull",0,"public void testEqualsNull(){Complex x=new Complex(3.0,4.0);assertFalse(x.equals(null));}"
"org.apache.commons.math.complex.ComplexTest.testEqualsClass",0,"public void testEqualsClass(){Complex x=new Complex(3.0,4.0);assertFalse(x.equals(this));}"
"org.apache.commons.math.complex.ComplexTest.testEqualsSame",0,"public void testEqualsSame(){Complex x=new Complex(3.0,4.0);assertTrue(x.equals(x));}"
"org.apache.commons.math.complex.ComplexTest.testEqualsTrue",0,"public void testEqualsTrue(){Complex x=new Complex(3.0,4.0);Complex y=new Complex(3.0,4.0);assertTrue(x.equals(y));}"
"org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference",0,"public void testEqualsRealDifference(){Complex x=new Complex(0.0,0.0);Complex y=new Complex(0.0 + Double.MIN_VALUE,0.0);assertFalse(x.equals(y));}"
"org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference",0,"public void testEqualsImaginaryDifference(){Complex x=new Complex(0.0,0.0);Complex y=new Complex(0.0,0.0 + Double.MIN_VALUE);assertFalse(x.equals(y));}"
"org.apache.commons.math.complex.ComplexTest.testEqualsNaN",0,"public void testEqualsNaN(){Complex realNaN=new Complex(Double.NaN,0.0);Complex imaginaryNaN=new Complex(0.0,Double.NaN);Complex complexNaN=Complex.NaN;assertTrue(realNaN.equals(imaginaryNaN));assertTrue(imaginaryNaN.equals(complexNaN));assertTrue(realNaN.equals(complexNaN));}"
"org.apache.commons.math.complex.ComplexTest.testHashCode",0,"public void testHashCode(){Complex x=new Complex(0.0,0.0);Complex y=new Complex(0.0,0.0 + Double.MIN_VALUE);assertFalse(x.hashCode()== y.hashCode());y=new Complex(0.0 + Double.MIN_VALUE,0.0);assertFalse(x.hashCode()== y.hashCode());Complex realNaN=new Complex(Double.NaN,0.0);Complex imaginaryNaN=new Complex(0.0,Double.NaN);assertEquals(realNaN.hashCode(),imaginaryNaN.hashCode());assertEquals(imaginaryNaN.hashCode(),Complex.NaN.hashCode());}"
"org.apache.commons.math.complex.ComplexTest.testAcos",0,"public void testAcos(){Complex z=new Complex(3,4);Complex expected=new Complex(0.936812,-2.30551);TestUtils.assertEquals(expected,z.acos(),1.0e-5);TestUtils.assertEquals(new Complex(Math.acos(0),0),Complex.ZERO.acos(),1.0e-12);}"
"org.apache.commons.math.complex.ComplexTest.testAcosInf",0,"public void testAcosInf(){TestUtils.assertSame(Complex.NaN,oneInf.acos());TestUtils.assertSame(Complex.NaN,oneNegInf.acos());TestUtils.assertSame(Complex.NaN,infOne.acos());TestUtils.assertSame(Complex.NaN,negInfOne.acos());TestUtils.assertSame(Complex.NaN,infInf.acos());TestUtils.assertSame(Complex.NaN,infNegInf.acos());TestUtils.assertSame(Complex.NaN,negInfInf.acos());TestUtils.assertSame(Complex.NaN,negInfNegInf.acos());}"
"org.apache.commons.math.complex.ComplexTest.testAcosNaN",0,"public void testAcosNaN(){assertTrue(Complex.NaN.acos().isNaN());}"
"org.apache.commons.math.complex.ComplexTest.testAsin",0,"public void testAsin(){Complex z=new Complex(3,4);Complex expected=new Complex(0.633984,2.30551);TestUtils.assertEquals(expected,z.asin(),1.0e-5);}"
"org.apache.commons.math.complex.ComplexTest.testAsinNaN",0,"public void testAsinNaN(){assertTrue(Complex.NaN.asin().isNaN());}"
"org.apache.commons.math.complex.ComplexTest.testAsinInf",0,"public void testAsinInf(){TestUtils.assertSame(Complex.NaN,oneInf.asin());TestUtils.assertSame(Complex.NaN,oneNegInf.asin());TestUtils.assertSame(Complex.NaN,infOne.asin());TestUtils.assertSame(Complex.NaN,negInfOne.asin());TestUtils.assertSame(Complex.NaN,infInf.asin());TestUtils.assertSame(Complex.NaN,infNegInf.asin());TestUtils.assertSame(Complex.NaN,negInfInf.asin());TestUtils.assertSame(Complex.NaN,negInfNegInf.asin());}"
"org.apache.commons.math.complex.ComplexTest.testAtan",0,"public void testAtan(){Complex z=new Complex(3,4);Complex expected=new Complex(1.44831,0.158997);TestUtils.assertEquals(expected,z.atan(),1.0e-5);}"
"org.apache.commons.math.complex.ComplexTest.testAtanInf",0,"public void testAtanInf(){TestUtils.assertSame(Complex.NaN,oneInf.atan());TestUtils.assertSame(Complex.NaN,oneNegInf.atan());TestUtils.assertSame(Complex.NaN,infOne.atan());TestUtils.assertSame(Complex.NaN,negInfOne.atan());TestUtils.assertSame(Complex.NaN,infInf.atan());TestUtils.assertSame(Complex.NaN,infNegInf.atan());TestUtils.assertSame(Complex.NaN,negInfInf.atan());TestUtils.assertSame(Complex.NaN,negInfNegInf.atan());}"
"org.apache.commons.math.complex.ComplexTest.testAtanNaN",0,"public void testAtanNaN(){assertTrue(Complex.NaN.atan().isNaN());assertTrue(Complex.I.atan().isNaN());}"
"org.apache.commons.math.complex.ComplexTest.testCos",0,"public void testCos(){Complex z=new Complex(3,4);Complex expected=new Complex(-27.03495,-3.851153);TestUtils.assertEquals(expected,z.cos(),1.0e-5);}"
"org.apache.commons.math.complex.ComplexTest.testCosNaN",0,"public void testCosNaN(){assertTrue(Complex.NaN.cos().isNaN());}"
"org.apache.commons.math.complex.ComplexTest.testCosInf",0,"public void testCosInf(){TestUtils.assertSame(infNegInf,oneInf.cos());TestUtils.assertSame(infInf,oneNegInf.cos());TestUtils.assertSame(Complex.NaN,infOne.cos());TestUtils.assertSame(Complex.NaN,negInfOne.cos());TestUtils.assertSame(Complex.NaN,infInf.cos());TestUtils.assertSame(Complex.NaN,infNegInf.cos());TestUtils.assertSame(Complex.NaN,negInfInf.cos());TestUtils.assertSame(Complex.NaN,negInfNegInf.cos());}"
"org.apache.commons.math.complex.ComplexTest.testCosh",0,"public void testCosh(){Complex z=new Complex(3,4);Complex expected=new Complex(-6.58066,-7.58155);TestUtils.assertEquals(expected,z.cosh(),1.0e-5);}"
"org.apache.commons.math.complex.ComplexTest.testCoshNaN",0,"public void testCoshNaN(){assertTrue(Complex.NaN.cosh().isNaN());}"
"org.apache.commons.math.complex.ComplexTest.testCoshInf",0,"public void testCoshInf(){TestUtils.assertSame(Complex.NaN,oneInf.cosh());TestUtils.assertSame(Complex.NaN,oneNegInf.cosh());TestUtils.assertSame(infInf,infOne.cosh());TestUtils.assertSame(infNegInf,negInfOne.cosh());TestUtils.assertSame(Complex.NaN,infInf.cosh());TestUtils.assertSame(Complex.NaN,infNegInf.cosh());TestUtils.assertSame(Complex.NaN,negInfInf.cosh());TestUtils.assertSame(Complex.NaN,negInfNegInf.cosh());}"
"org.apache.commons.math.complex.ComplexTest.testExp",0,"public void testExp(){Complex z=new Complex(3,4);Complex expected=new Complex(-13.12878,-15.20078);TestUtils.assertEquals(expected,z.exp(),1.0e-5);TestUtils.assertEquals(Complex.ONE,Complex.ZERO.exp(),10e-12);Complex iPi=Complex.I.multiply(new Complex(pi,0));TestUtils.assertEquals(Complex.ONE.negate(),iPi.exp(),10e-12);}"
"org.apache.commons.math.complex.ComplexTest.testExpNaN",0,"public void testExpNaN(){assertTrue(Complex.NaN.exp().isNaN());}"
"org.apache.commons.math.complex.ComplexTest.testExpInf",0,"public void testExpInf(){TestUtils.assertSame(Complex.NaN,oneInf.exp());TestUtils.assertSame(Complex.NaN,oneNegInf.exp());TestUtils.assertSame(infInf,infOne.exp());TestUtils.assertSame(Complex.ZERO,negInfOne.exp());TestUtils.assertSame(Complex.NaN,infInf.exp());TestUtils.assertSame(Complex.NaN,infNegInf.exp());TestUtils.assertSame(Complex.NaN,negInfInf.exp());TestUtils.assertSame(Complex.NaN,negInfNegInf.exp());}"
"org.apache.commons.math.complex.ComplexTest.testLog",0,"public void testLog(){Complex z=new Complex(3,4);Complex expected=new Complex(1.60944,0.927295);TestUtils.assertEquals(expected,z.log(),1.0e-5);}"
"org.apache.commons.math.complex.ComplexTest.testLogNaN",0,"public void testLogNaN(){assertTrue(Complex.NaN.log().isNaN());}"
"org.apache.commons.math.complex.ComplexTest.testLogInf",0,"public void testLogInf(){TestUtils.assertEquals(new Complex(inf,pi / 2),oneInf.log(),10e-12);TestUtils.assertEquals(new Complex(inf,-pi / 2),oneNegInf.log(),10e-12);TestUtils.assertEquals(infZero,infOne.log(),10e-12);TestUtils.assertEquals(new Complex(inf,pi),negInfOne.log(),10e-12);TestUtils.assertEquals(new Complex(inf,pi / 4),infInf.log(),10e-12);TestUtils.assertEquals(new Complex(inf,-pi / 4),infNegInf.log(),10e-12);TestUtils.assertEquals(new Complex(inf,3d * pi / 4),negInfInf.log(),10e-12);TestUtils.assertEquals(new Complex(inf,-3d * pi / 4),negInfNegInf.log(),10e-12);}"
"org.apache.commons.math.complex.ComplexTest.testLogZero",0,"public void testLogZero(){TestUtils.assertSame(negInfZero,Complex.ZERO.log());}"
"org.apache.commons.math.complex.ComplexTest.testPow",0,"public void testPow(){Complex x=new Complex(3,4);Complex y=new Complex(5,6);Complex expected=new Complex(-1.860893,11.83677);TestUtils.assertEquals(expected,x.pow(y),1.0e-5);}"
"org.apache.commons.math.complex.ComplexTest.testPowNaNBase",0,"public void testPowNaNBase(){Complex x=new Complex(3,4);assertTrue(Complex.NaN.pow(x).isNaN());}"
"org.apache.commons.math.complex.ComplexTest.testPowNaNExponent",0,"public void testPowNaNExponent(){Complex x=new Complex(3,4);assertTrue(x.pow(Complex.NaN).isNaN());}"
"org.apache.commons.math.complex.ComplexTest.testPowInf",0,"public void testPowInf(){TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(oneInf));TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(oneNegInf));TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(infOne));TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(infInf));TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(infNegInf));TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(negInfInf));TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(negInfNegInf));TestUtils.assertSame(Complex.NaN,infOne.pow(Complex.ONE));TestUtils.assertSame(Complex.NaN,negInfOne.pow(Complex.ONE));TestUtils.assertSame(Complex.NaN,infInf.pow(Complex.ONE));TestUtils.assertSame(Complex.NaN,infNegInf.pow(Complex.ONE));TestUtils.assertSame(Complex.NaN,negInfInf.pow(Complex.ONE));TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(Complex.ONE));TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(infNegInf));TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(negInfNegInf));TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(infInf));TestUtils.assertSame(Complex.NaN,infInf.pow(infNegInf));TestUtils.assertSame(Complex.NaN,infInf.pow(negInfNegInf));TestUtils.assertSame(Complex.NaN,infInf.pow(infInf));TestUtils.assertSame(Complex.NaN,infNegInf.pow(infNegInf));TestUtils.assertSame(Complex.NaN,infNegInf.pow(negInfNegInf));TestUtils.assertSame(Complex.NaN,infNegInf.pow(infInf));}"
"org.apache.commons.math.complex.ComplexTest.testPowZero",0,"public void testPowZero(){TestUtils.assertSame(Complex.NaN,Complex.ZERO.pow(Complex.ONE));TestUtils.assertSame(Complex.NaN,Complex.ZERO.pow(Complex.ZERO));TestUtils.assertSame(Complex.NaN,Complex.ZERO.pow(Complex.I));TestUtils.assertEquals(Complex.ONE,Complex.ONE.pow(Complex.ZERO),10e-12);TestUtils.assertEquals(Complex.ONE,Complex.I.pow(Complex.ZERO),10e-12);TestUtils.assertEquals(Complex.ONE,new Complex(-1,3).pow(Complex.ZERO),10e-12);}"
"org.apache.commons.math.complex.ComplexTest.testpowNull",0,"public void testpowNull(){try {Complex.ONE.pow(null);fail(""Expecting NullPointerException"");}catch(NullPointerException ex){}}"
"org.apache.commons.math.complex.ComplexTest.testSin",0,"public void testSin(){Complex z=new Complex(3,4);Complex expected=new Complex(3.853738,-27.01681);TestUtils.assertEquals(expected,z.sin(),1.0e-5);}"
"org.apache.commons.math.complex.ComplexTest.testSinInf",0,"public void testSinInf(){TestUtils.assertSame(infInf,oneInf.sin());TestUtils.assertSame(infNegInf,oneNegInf.sin());TestUtils.assertSame(Complex.NaN,infOne.sin());TestUtils.assertSame(Complex.NaN,negInfOne.sin());TestUtils.assertSame(Complex.NaN,infInf.sin());TestUtils.assertSame(Complex.NaN,infNegInf.sin());TestUtils.assertSame(Complex.NaN,negInfInf.sin());TestUtils.assertSame(Complex.NaN,negInfNegInf.sin());}"
"org.apache.commons.math.complex.ComplexTest.testSinNaN",0,"public void testSinNaN(){assertTrue(Complex.NaN.sin().isNaN());}"
"org.apache.commons.math.complex.ComplexTest.testSinh",0,"public void testSinh(){Complex z=new Complex(3,4);Complex expected=new Complex(-6.54812,-7.61923);TestUtils.assertEquals(expected,z.sinh(),1.0e-5);}"
"org.apache.commons.math.complex.ComplexTest.testSinhNaN",0,"public void testSinhNaN(){assertTrue(Complex.NaN.sinh().isNaN());}"
"org.apache.commons.math.complex.ComplexTest.testSinhInf",0,"public void testSinhInf(){TestUtils.assertSame(Complex.NaN,oneInf.sinh());TestUtils.assertSame(Complex.NaN,oneNegInf.sinh());TestUtils.assertSame(infInf,infOne.sinh());TestUtils.assertSame(negInfInf,negInfOne.sinh());TestUtils.assertSame(Complex.NaN,infInf.sinh());TestUtils.assertSame(Complex.NaN,infNegInf.sinh());TestUtils.assertSame(Complex.NaN,negInfInf.sinh());TestUtils.assertSame(Complex.NaN,negInfNegInf.sinh());}"
"org.apache.commons.math.complex.ComplexTest.testSqrtRealPositive",0,"public void testSqrtRealPositive(){Complex z=new Complex(3,4);Complex expected=new Complex(2,1);TestUtils.assertEquals(expected,z.sqrt(),1.0e-5);}"
"org.apache.commons.math.complex.ComplexTest.testSqrtRealZero",0,"public void testSqrtRealZero(){Complex z=new Complex(0.0,4);Complex expected=new Complex(1.41421,1.41421);TestUtils.assertEquals(expected,z.sqrt(),1.0e-5);}"
"org.apache.commons.math.complex.ComplexTest.testSqrtRealNegative",0,"public void testSqrtRealNegative(){Complex z=new Complex(-3.0,4);Complex expected=new Complex(1,2);TestUtils.assertEquals(expected,z.sqrt(),1.0e-5);}"
"org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryZero",0,"public void testSqrtImaginaryZero(){Complex z=new Complex(-3.0,0.0);Complex expected=new Complex(0.0,1.73205);TestUtils.assertEquals(expected,z.sqrt(),1.0e-5);}"
"org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryNegative",0,"public void testSqrtImaginaryNegative(){Complex z=new Complex(-3.0,-4.0);Complex expected=new Complex(1.0,-2.0);TestUtils.assertEquals(expected,z.sqrt(),1.0e-5);}"
"org.apache.commons.math.complex.ComplexTest.testSqrtPolar",0,"public void testSqrtPolar(){double r=1;for (int i=0;i < 5;i++){r+=i;double theta=0;for (int j=0;j < 11;j++){theta+=pi / 12;Complex z=ComplexUtils.polar2Complex(r,theta);Complex sqrtz=ComplexUtils.polar2Complex(Math.sqrt(r),theta / 2);TestUtils.assertEquals(sqrtz,z.sqrt(),10e-12);}}}"
"org.apache.commons.math.complex.ComplexTest.testSqrtNaN",0,"public void testSqrtNaN(){assertTrue(Complex.NaN.sqrt().isNaN());}"
"org.apache.commons.math.complex.ComplexTest.testSqrtInf",0,"public void testSqrtInf(){TestUtils.assertSame(infNaN,oneInf.sqrt());TestUtils.assertSame(infNaN,oneNegInf.sqrt());TestUtils.assertSame(infZero,infOne.sqrt());TestUtils.assertSame(zeroInf,negInfOne.sqrt());TestUtils.assertSame(infNaN,infInf.sqrt());TestUtils.assertSame(infNaN,infNegInf.sqrt());TestUtils.assertSame(nanInf,negInfInf.sqrt());TestUtils.assertSame(nanNegInf,negInfNegInf.sqrt());}"
"org.apache.commons.math.complex.ComplexTest.testSqrt1z",0,"public void testSqrt1z(){Complex z=new Complex(3,4);Complex expected=new Complex(4.08033,-2.94094);TestUtils.assertEquals(expected,z.sqrt1z(),1.0e-5);}"
"org.apache.commons.math.complex.ComplexTest.testSqrt1zNaN",0,"public void testSqrt1zNaN(){assertTrue(Complex.NaN.sqrt1z().isNaN());}"
"org.apache.commons.math.complex.ComplexTest.testTan",0,"public void testTan(){Complex z=new Complex(3,4);Complex expected=new Complex(-0.000187346,0.999356);TestUtils.assertEquals(expected,z.tan(),1.0e-5);}"
"org.apache.commons.math.complex.ComplexTest.testTanNaN",0,"public void testTanNaN(){assertTrue(Complex.NaN.tan().isNaN());}"
"org.apache.commons.math.complex.ComplexTest.testTanInf",0,"public void testTanInf(){TestUtils.assertSame(zeroNaN,oneInf.tan());TestUtils.assertSame(zeroNaN,oneNegInf.tan());TestUtils.assertSame(Complex.NaN,infOne.tan());TestUtils.assertSame(Complex.NaN,negInfOne.tan());TestUtils.assertSame(Complex.NaN,infInf.tan());TestUtils.assertSame(Complex.NaN,infNegInf.tan());TestUtils.assertSame(Complex.NaN,negInfInf.tan());TestUtils.assertSame(Complex.NaN,negInfNegInf.tan());}"
"org.apache.commons.math.complex.ComplexTest.testTanCritical",0,"public void testTanCritical(){TestUtils.assertSame(infNaN,new Complex(pi / 2,0).tan());TestUtils.assertSame(negInfNaN,new Complex(-pi / 2,0).tan());}"
"org.apache.commons.math.complex.ComplexTest.testTanh",0,"public void testTanh(){Complex z=new Complex(3,4);Complex expected=new Complex(1.00071,0.00490826);TestUtils.assertEquals(expected,z.tanh(),1.0e-5);}"
"org.apache.commons.math.complex.ComplexTest.testTanhNaN",0,"public void testTanhNaN(){assertTrue(Complex.NaN.tanh().isNaN());}"
"org.apache.commons.math.complex.ComplexTest.testTanhInf",0,"public void testTanhInf(){TestUtils.assertSame(Complex.NaN,oneInf.tanh());TestUtils.assertSame(Complex.NaN,oneNegInf.tanh());TestUtils.assertSame(nanZero,infOne.tanh());TestUtils.assertSame(nanZero,negInfOne.tanh());TestUtils.assertSame(Complex.NaN,infInf.tanh());TestUtils.assertSame(Complex.NaN,infNegInf.tanh());TestUtils.assertSame(Complex.NaN,negInfInf.tanh());TestUtils.assertSame(Complex.NaN,negInfNegInf.tanh());}"
"org.apache.commons.math.complex.ComplexTest.testTanhCritical",0,"public void testTanhCritical(){TestUtils.assertSame(nanInf,new Complex(0,pi / 2).tanh());}"
"org.apache.commons.math.complex.ComplexTest.testMath221",0,"/** * test issue MATH-221 */public void testMath221(){assertEquals(new Complex(0,-1),new Complex(0,1).multiply(new Complex(-1,0)));}"
"org.apache.commons.math.complex.ComplexTest.testNthRoot_normal_thirdRoot",0,"/** * Test: computing <b>third roots</b> of z. <pre> <code> <b>z = -2 + 2 * i</b> => z_0 =  1      +          i => z_1 = -1.3660 + 0.3660 * i => z_2 =  0.3660 - 1.3660 * i </code> </pre>*/public void testNthRoot_normal_thirdRoot(){Complex z=new Complex(-2,2);Complex[]thirdRootsOfZ=z.nthRoot(3).toArray(new Complex[0]);assertEquals(3,thirdRootsOfZ.length);assertEquals(1.0,thirdRootsOfZ[0].getReal(),1.0e-5);assertEquals(1.0,thirdRootsOfZ[0].getImaginary(),1.0e-5);assertEquals(-1.3660254037844386,thirdRootsOfZ[1].getReal(),1.0e-5);assertEquals(0.36602540378443843,thirdRootsOfZ[1].getImaginary(),1.0e-5);assertEquals(0.366025403784439,thirdRootsOfZ[2].getReal(),1.0e-5);assertEquals(-1.3660254037844384,thirdRootsOfZ[2].getImaginary(),1.0e-5);}"
"org.apache.commons.math.complex.ComplexTest.testNthRoot_normal_fourthRoot",0,"/** * Test: computing <b>fourth roots</b> of z. <pre> <code> <b>z = 5 - 2 * i</b> => z_0 =  1.5164 - 0.1446 * i => z_1 =  0.1446 + 1.5164 * i => z_2 = -1.5164 + 0.1446 * i => z_3 = -1.5164 - 0.1446 * i </code> </pre>*/public void testNthRoot_normal_fourthRoot(){Complex z=new Complex(5,-2);Complex[]fourthRootsOfZ=z.nthRoot(4).toArray(new Complex[0]);assertEquals(4,fourthRootsOfZ.length);assertEquals(1.5164629308487783,fourthRootsOfZ[0].getReal(),1.0e-5);assertEquals(-0.14469266210702247,fourthRootsOfZ[0].getImaginary(),1.0e-5);assertEquals(0.14469266210702256,fourthRootsOfZ[1].getReal(),1.0e-5);assertEquals(1.5164629308487783,fourthRootsOfZ[1].getImaginary(),1.0e-5);assertEquals(-1.5164629308487783,fourthRootsOfZ[2].getReal(),1.0e-5);assertEquals(0.14469266210702267,fourthRootsOfZ[2].getImaginary(),1.0e-5);assertEquals(-0.14469266210702275,fourthRootsOfZ[3].getReal(),1.0e-5);assertEquals(-1.5164629308487783,fourthRootsOfZ[3].getImaginary(),1.0e-5);}"
"org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty",0,"/** * Test: computing <b>third roots</b> of z. <pre> <code> <b>z = 8</b> => z_0 =  2 => z_1 = -1 + 1.73205 * i => z_2 = -1 - 1.73205 * i </code> </pre>*/public void testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty(){Complex z=new Complex(8,0);Complex[]thirdRootsOfZ=z.nthRoot(3).toArray(new Complex[0]);assertEquals(3,thirdRootsOfZ.length);assertEquals(2.0,thirdRootsOfZ[0].getReal(),1.0e-5);assertEquals(0.0,thirdRootsOfZ[0].getImaginary(),1.0e-5);assertEquals(-1.0,thirdRootsOfZ[1].getReal(),1.0e-5);assertEquals(1.7320508075688774,thirdRootsOfZ[1].getImaginary(),1.0e-5);assertEquals(-1.0,thirdRootsOfZ[2].getReal(),1.0e-5);assertEquals(-1.732050807568877,thirdRootsOfZ[2].getImaginary(),1.0e-5);}"
"org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_thirdRoot_realPartZero",0,"/** * Test: computing <b>third roots</b> of z with real part 0. <pre> <code> <b>z = 2 * i</b> => z_0 =  1.0911 + 0.6299 * i => z_1 = -1.0911 + 0.6299 * i => z_2 = -2.3144 - 1.2599 * i </code> </pre>*/public void testNthRoot_cornercase_thirdRoot_realPartZero(){Complex z=new Complex(0,2);Complex[]thirdRootsOfZ=z.nthRoot(3).toArray(new Complex[0]);assertEquals(3,thirdRootsOfZ.length);assertEquals(1.0911236359717216,thirdRootsOfZ[0].getReal(),1.0e-5);assertEquals(0.6299605249474365,thirdRootsOfZ[0].getImaginary(),1.0e-5);assertEquals(-1.0911236359717216,thirdRootsOfZ[1].getReal(),1.0e-5);assertEquals(0.6299605249474365,thirdRootsOfZ[1].getImaginary(),1.0e-5);assertEquals(-2.3144374213981936E-16,thirdRootsOfZ[2].getReal(),1.0e-5);assertEquals(-1.2599210498948732,thirdRootsOfZ[2].getImaginary(),1.0e-5);}"
"org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf",0,"/** * Test cornercases with NaN and Infinity.*/public void testNthRoot_cornercase_NAN_Inf(){List<Complex> roots=oneNaN.nthRoot(3);assertEquals(1,roots.size());assertEquals(Complex.NaN,roots.get(0));roots=nanZero.nthRoot(3);assertEquals(1,roots.size());assertEquals(Complex.NaN,roots.get(0));roots=nanInf.nthRoot(3);assertEquals(1,roots.size());assertEquals(Complex.NaN,roots.get(0));roots=oneInf.nthRoot(3);assertEquals(1,roots.size());assertEquals(Complex.INF,roots.get(0));roots=negInfInf.nthRoot(3);assertEquals(1,roots.size());assertEquals(Complex.INF,roots.get(0));}"
"org.apache.commons.math.complex.ComplexTest.testGetArgument",0,"/** * Test standard values*/public void testGetArgument(){Complex z=new Complex(1,0);assertEquals(0.0,z.getArgument(),1.0e-12);z=new Complex(1,1);assertEquals(Math.PI / 4,z.getArgument(),1.0e-12);z=new Complex(0,1);assertEquals(Math.PI / 2,z.getArgument(),1.0e-12);z=new Complex(-1,1);assertEquals(3 * Math.PI / 4,z.getArgument(),1.0e-12);z=new Complex(-1,0);assertEquals(Math.PI,z.getArgument(),1.0e-12);z=new Complex(-1,-1);assertEquals(-3 * Math.PI / 4,z.getArgument(),1.0e-12);z=new Complex(0,-1);assertEquals(-Math.PI / 2,z.getArgument(),1.0e-12);z=new Complex(1,-1);assertEquals(-Math.PI / 4,z.getArgument(),1.0e-12);}"
"org.apache.commons.math.complex.ComplexTest.testGetArgumentInf",0,"/** * Verify atan2-style handling of infinite parts*/public void testGetArgumentInf(){assertEquals(Math.PI / 4,infInf.getArgument(),1.0e-12);assertEquals(Math.PI / 2,oneInf.getArgument(),1.0e-12);assertEquals(0.0,infOne.getArgument(),1.0e-12);assertEquals(Math.PI / 2,zeroInf.getArgument(),1.0e-12);assertEquals(0.0,infZero.getArgument(),1.0e-12);assertEquals(Math.PI,negInfOne.getArgument(),1.0e-12);assertEquals(-3.0 * Math.PI / 4,negInfNegInf.getArgument(),1.0e-12);assertEquals(-Math.PI / 2,oneNegInf.getArgument(),1.0e-12);}"
"org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN",0,"/** * Verify that either part NaN results in NaN*/public void testGetArgumentNaN(){assertEquals(nan,nanZero.getArgument());assertEquals(nan,zeroNaN.getArgument());assertEquals(nan,Complex.NaN.getArgument());}"
"org.apache.commons.math.fraction.FractionFormatTest.testFormat",0,"public void testFormat(){Fraction c=new Fraction(1,2);String expected=""1 / 2"";String actual=properFormat.format(c);assertEquals(expected,actual);actual=improperFormat.format(c);assertEquals(expected,actual);}"
"org.apache.commons.math.fraction.FractionFormatTest.testFormatNegative",0,"public void testFormatNegative(){Fraction c=new Fraction(-1,2);String expected=""-1 / 2"";String actual=properFormat.format(c);assertEquals(expected,actual);actual=improperFormat.format(c);assertEquals(expected,actual);}"
"org.apache.commons.math.fraction.FractionFormatTest.testFormatZero",0,"public void testFormatZero(){Fraction c=new Fraction(0,1);String expected=""0 / 1"";String actual=properFormat.format(c);assertEquals(expected,actual);actual=improperFormat.format(c);assertEquals(expected,actual);}"
"org.apache.commons.math.fraction.FractionFormatTest.testFormatImproper",0,"public void testFormatImproper(){Fraction c=new Fraction(5,3);String actual=properFormat.format(c);assertEquals(""1 2 / 3"",actual);actual=improperFormat.format(c);assertEquals(""5 / 3"",actual);}"
"org.apache.commons.math.fraction.FractionFormatTest.testFormatImproperNegative",0,"public void testFormatImproperNegative(){Fraction c=new Fraction(-5,3);String actual=properFormat.format(c);assertEquals(""-1 2 / 3"",actual);actual=improperFormat.format(c);assertEquals(""-5 / 3"",actual);}"
"org.apache.commons.math.fraction.FractionFormatTest.testParse",0,"public void testParse(){String source=""1 / 2"";try {Fraction c=properFormat.parse(source);assertNotNull(c);assertEquals(1,c.getNumerator());assertEquals(2,c.getDenominator());c=improperFormat.parse(source);assertNotNull(c);assertEquals(1,c.getNumerator());assertEquals(2,c.getDenominator());}catch(ParseException ex){fail(ex.getMessage());}}"
"org.apache.commons.math.fraction.FractionFormatTest.testParseInteger",0,"public void testParseInteger(){String source=""10"";try {Fraction c=properFormat.parse(source);assertNotNull(c);assertEquals(10,c.getNumerator());assertEquals(1,c.getDenominator());}catch(ParseException ex){fail(ex.getMessage());}try {Fraction c=improperFormat.parse(source);assertNotNull(c);assertEquals(10,c.getNumerator());assertEquals(1,c.getDenominator());}catch(ParseException ex){fail(ex.getMessage());}}"
"org.apache.commons.math.fraction.FractionFormatTest.testParseInvalid",0,"public void testParseInvalid(){String source=""a"";String msg=""should not be able to parse '10 / a'."";try {properFormat.parse(source);fail(msg);}catch(ParseException ex){}try {improperFormat.parse(source);fail(msg);}catch(ParseException ex){}}"
"org.apache.commons.math.fraction.FractionFormatTest.testParseInvalidDenominator",0,"public void testParseInvalidDenominator(){String source=""10 / a"";String msg=""should not be able to parse '10 / a'."";try {properFormat.parse(source);fail(msg);}catch(ParseException ex){}try {improperFormat.parse(source);fail(msg);}catch(ParseException ex){}}"
"org.apache.commons.math.fraction.FractionFormatTest.testParseNegative",0,"public void testParseNegative(){try {String source=""-1 / 2"";Fraction c=properFormat.parse(source);assertNotNull(c);assertEquals(-1,c.getNumerator());assertEquals(2,c.getDenominator());c=improperFormat.parse(source);assertNotNull(c);assertEquals(-1,c.getNumerator());assertEquals(2,c.getDenominator());source=""1 / -2"";c=properFormat.parse(source);assertNotNull(c);assertEquals(-1,c.getNumerator());assertEquals(2,c.getDenominator());c=improperFormat.parse(source);assertNotNull(c);assertEquals(-1,c.getNumerator());assertEquals(2,c.getDenominator());}catch(ParseException ex){fail(ex.getMessage());}}"
"org.apache.commons.math.fraction.FractionFormatTest.testParseProper",0,"public void testParseProper(){String source=""1 2 / 3"";try {Fraction c=properFormat.parse(source);assertNotNull(c);assertEquals(5,c.getNumerator());assertEquals(3,c.getDenominator());}catch(ParseException ex){fail(ex.getMessage());}try {improperFormat.parse(source);fail(""invalid improper fraction."");}catch(ParseException ex){}}"
"org.apache.commons.math.fraction.FractionFormatTest.testParseProperNegative",0,"public void testParseProperNegative(){String source=""-1 2 / 3"";try {Fraction c=properFormat.parse(source);assertNotNull(c);assertEquals(-5,c.getNumerator());assertEquals(3,c.getDenominator());}catch(ParseException ex){fail(ex.getMessage());}try {improperFormat.parse(source);fail(""invalid improper fraction."");}catch(ParseException ex){}}"
"org.apache.commons.math.fraction.FractionFormatTest.testParseProperInvalidMinus",0,"public void testParseProperInvalidMinus(){String source=""2 -2 / 3"";try {properFormat.parse(source);fail(""invalid minus in improper fraction."");}catch(ParseException ex){}source=""2 2 / -3"";try {properFormat.parse(source);fail(""invalid minus in improper fraction."");}catch(ParseException ex){}}"
"org.apache.commons.math.fraction.FractionFormatTest.testNumeratorFormat",0,"public void testNumeratorFormat(){NumberFormat old=properFormat.getNumeratorFormat();NumberFormat nf=NumberFormat.getInstance();nf.setParseIntegerOnly(true);properFormat.setNumeratorFormat(nf);assertEquals(nf,properFormat.getNumeratorFormat());properFormat.setNumeratorFormat(old);old=improperFormat.getNumeratorFormat();nf=NumberFormat.getInstance();nf.setParseIntegerOnly(true);improperFormat.setNumeratorFormat(nf);assertEquals(nf,improperFormat.getNumeratorFormat());improperFormat.setNumeratorFormat(old);}"
"org.apache.commons.math.fraction.FractionFormatTest.testDenominatorFormat",0,"public void testDenominatorFormat(){NumberFormat old=properFormat.getDenominatorFormat();NumberFormat nf=NumberFormat.getInstance();nf.setParseIntegerOnly(true);properFormat.setDenominatorFormat(nf);assertEquals(nf,properFormat.getDenominatorFormat());properFormat.setDenominatorFormat(old);old=improperFormat.getDenominatorFormat();nf=NumberFormat.getInstance();nf.setParseIntegerOnly(true);improperFormat.setDenominatorFormat(nf);assertEquals(nf,improperFormat.getDenominatorFormat());improperFormat.setDenominatorFormat(old);}"
"org.apache.commons.math.fraction.FractionFormatTest.testWholeFormat",0,"public void testWholeFormat(){ProperFractionFormat format=(ProperFractionFormat)properFormat;NumberFormat old=format.getWholeFormat();NumberFormat nf=NumberFormat.getInstance();nf.setParseIntegerOnly(true);format.setWholeFormat(nf);assertEquals(nf,format.getWholeFormat());format.setWholeFormat(old);}"
"org.apache.commons.math.stat.StatUtilsTest.testStats",0,"/** * test stats */public void testStats(){double[]values=new double[]{one,two,two,three};assertEquals(""sum"",sum,StatUtils.sum(values),tolerance);assertEquals(""sumsq"",sumSq,StatUtils.sumSq(values),tolerance);assertEquals(""var"",var,StatUtils.variance(values),tolerance);assertEquals(""var with mean"",var,StatUtils.variance(values,mean),tolerance);assertEquals(""mean"",mean,StatUtils.mean(values),tolerance);assertEquals(""min"",min,StatUtils.min(values),tolerance);assertEquals(""max"",max,StatUtils.max(values),tolerance);}"
"org.apache.commons.math.stat.StatUtilsTest.testN0andN1Conditions",0,"public void testN0andN1Conditions()throws Exception {double[]values=new double[0];assertTrue(""Mean of n = 0 set should be NaN"",Double.isNaN(StatUtils.mean(values)));assertTrue(""Variance of n = 0 set should be NaN"",Double.isNaN(StatUtils.variance(values)));values=new double[]{one};assertTrue(""Mean of n = 1 set should be value of single item n1"",StatUtils.mean(values)== one);assertTrue(""Variance of n = 1 set should be zero"",StatUtils.variance(values)== 0);}"
"org.apache.commons.math.stat.StatUtilsTest.testArrayIndexConditions",0,"public void testArrayIndexConditions()throws Exception {double[]values={1.0,2.0,3.0,4.0};assertEquals(""Sum not expected"",5.0,StatUtils.sum(values,1,2),Double.MIN_VALUE);assertEquals(""Sum not expected"",3.0,StatUtils.sum(values,0,2),Double.MIN_VALUE);assertEquals(""Sum not expected"",7.0,StatUtils.sum(values,2,2),Double.MIN_VALUE);try {StatUtils.sum(values,2,3);assertTrue(""Didn't throw exception"",false);}catch(Exception e){assertTrue(true);}try {StatUtils.sum(values,-1,2);assertTrue(""Didn't throw exception"",false);}catch(Exception e){assertTrue(true);}}"
"org.apache.commons.math.stat.StatUtilsTest.testSumSq",0,"public void testSumSq(){double[]x=null;try {StatUtils.sumSq(x);fail(""null is not a valid data array."");}catch(IllegalArgumentException ex){}try {StatUtils.sumSq(x,0,4);fail(""null is not a valid data array."");}catch(IllegalArgumentException ex){}x=new double[]{};TestUtils.assertEquals(Double.NaN,StatUtils.sumSq(x),tolerance);TestUtils.assertEquals(Double.NaN,StatUtils.sumSq(x,0,0),tolerance);x=new double[]{two};TestUtils.assertEquals(4,StatUtils.sumSq(x),tolerance);TestUtils.assertEquals(4,StatUtils.sumSq(x,0,1),tolerance);x=new double[]{one,two,two,three};TestUtils.assertEquals(18,StatUtils.sumSq(x),tolerance);TestUtils.assertEquals(8,StatUtils.sumSq(x,1,2),tolerance);}"
"org.apache.commons.math.stat.StatUtilsTest.testProduct",0,"public void testProduct(){double[]x=null;try {StatUtils.product(x);fail(""null is not a valid data array."");}catch(IllegalArgumentException ex){}try {StatUtils.product(x,0,4);fail(""null is not a valid data array."");}catch(IllegalArgumentException ex){}x=new double[]{};TestUtils.assertEquals(Double.NaN,StatUtils.product(x),tolerance);TestUtils.assertEquals(Double.NaN,StatUtils.product(x,0,0),tolerance);x=new double[]{two};TestUtils.assertEquals(two,StatUtils.product(x),tolerance);TestUtils.assertEquals(two,StatUtils.product(x,0,1),tolerance);x=new double[]{one,two,two,three};TestUtils.assertEquals(12,StatUtils.product(x),tolerance);TestUtils.assertEquals(4,StatUtils.product(x,1,2),tolerance);}"
"org.apache.commons.math.stat.StatUtilsTest.testSumLog",0,"public void testSumLog(){double[]x=null;try {StatUtils.sumLog(x);fail(""null is not a valid data array."");}catch(IllegalArgumentException ex){}try {StatUtils.sumLog(x,0,4);fail(""null is not a valid data array."");}catch(IllegalArgumentException ex){}x=new double[]{};TestUtils.assertEquals(Double.NaN,StatUtils.sumLog(x),tolerance);TestUtils.assertEquals(Double.NaN,StatUtils.sumLog(x,0,0),tolerance);x=new double[]{two};TestUtils.assertEquals(Math.log(two),StatUtils.sumLog(x),tolerance);TestUtils.assertEquals(Math.log(two),StatUtils.sumLog(x,0,1),tolerance);x=new double[]{one,two,two,three};TestUtils.assertEquals(Math.log(one)+ 2.0 * Math.log(two)+ Math.log(three),StatUtils.sumLog(x),tolerance);TestUtils.assertEquals(2.0 * Math.log(two),StatUtils.sumLog(x,1,2),tolerance);}"
"org.apache.commons.math.stat.StatUtilsTest.testMean",0,"public void testMean(){double[]x=null;try {StatUtils.mean(x,0,4);fail(""null is not a valid data array."");}catch(IllegalArgumentException ex){}x=new double[]{};TestUtils.assertEquals(Double.NaN,StatUtils.mean(x,0,0),tolerance);x=new double[]{two};TestUtils.assertEquals(two,StatUtils.mean(x,0,1),tolerance);x=new double[]{one,two,two,three};TestUtils.assertEquals(2.5,StatUtils.mean(x,2,2),tolerance);}"
"org.apache.commons.math.stat.StatUtilsTest.testVariance",0,"public void testVariance(){double[]x=null;try {StatUtils.variance(x,0,4);fail(""null is not a valid data array."");}catch(IllegalArgumentException ex){}x=new double[]{};TestUtils.assertEquals(Double.NaN,StatUtils.variance(x,0,0),tolerance);x=new double[]{two};TestUtils.assertEquals(0.0,StatUtils.variance(x,0,1),tolerance);x=new double[]{one,two,two,three};TestUtils.assertEquals(0.5,StatUtils.variance(x,2,2),tolerance);x=new double[]{one,two,two,three};TestUtils.assertEquals(0.5,StatUtils.variance(x,2.5,2,2),tolerance);}"
"org.apache.commons.math.stat.StatUtilsTest.testMax",0,"public void testMax(){double[]x=null;try {StatUtils.max(x,0,4);fail(""null is not a valid data array."");}catch(IllegalArgumentException ex){}x=new double[]{};TestUtils.assertEquals(Double.NaN,StatUtils.max(x,0,0),tolerance);x=new double[]{two};TestUtils.assertEquals(two,StatUtils.max(x,0,1),tolerance);x=new double[]{one,two,two,three};TestUtils.assertEquals(three,StatUtils.max(x,1,3),tolerance);x=new double[]{nan,two,three};TestUtils.assertEquals(three,StatUtils.max(x),tolerance);x=new double[]{one,nan,three};TestUtils.assertEquals(three,StatUtils.max(x),tolerance);x=new double[]{one,two,nan};TestUtils.assertEquals(two,StatUtils.max(x),tolerance);x=new double[]{nan,nan,nan};TestUtils.assertEquals(nan,StatUtils.max(x),tolerance);}"
"org.apache.commons.math.stat.StatUtilsTest.testMin",0,"public void testMin(){double[]x=null;try {StatUtils.min(x,0,4);fail(""null is not a valid data array."");}catch(IllegalArgumentException ex){}x=new double[]{};TestUtils.assertEquals(Double.NaN,StatUtils.min(x,0,0),tolerance);x=new double[]{two};TestUtils.assertEquals(two,StatUtils.min(x,0,1),tolerance);x=new double[]{one,two,two,three};TestUtils.assertEquals(two,StatUtils.min(x,1,3),tolerance);x=new double[]{nan,two,three};TestUtils.assertEquals(two,StatUtils.min(x),tolerance);x=new double[]{one,nan,three};TestUtils.assertEquals(one,StatUtils.min(x),tolerance);x=new double[]{one,two,nan};TestUtils.assertEquals(one,StatUtils.min(x),tolerance);x=new double[]{nan,nan,nan};TestUtils.assertEquals(nan,StatUtils.min(x),tolerance);}"
"org.apache.commons.math.stat.StatUtilsTest.testPercentile",0,"public void testPercentile(){double[]x=null;try {StatUtils.percentile(x,.25);fail(""null is not a valid data array."");}catch(IllegalArgumentException ex){}try {StatUtils.percentile(x,0,4,0.25);fail(""null is not a valid data array."");}catch(IllegalArgumentException ex){}x=new double[]{};TestUtils.assertEquals(Double.NaN,StatUtils.percentile(x,25),tolerance);TestUtils.assertEquals(Double.NaN,StatUtils.percentile(x,0,0,25),tolerance);x=new double[]{two};TestUtils.assertEquals(two,StatUtils.percentile(x,25),tolerance);TestUtils.assertEquals(two,StatUtils.percentile(x,0,1,25),tolerance);x=new double[]{one,two,two,three};TestUtils.assertEquals(2.5,StatUtils.percentile(x,70),tolerance);TestUtils.assertEquals(2.5,StatUtils.percentile(x,1,3,62.5),tolerance);}"
"org.apache.commons.math.stat.StatUtilsTest.testDifferenceStats",0,"public void testDifferenceStats()throws Exception {double sample1[]={1d,2d,3d,4d};double sample2[]={1d,3d,4d,2d};double diff[]={0d,-1d,-1d,2d};double small[]={1d,4d};double meanDifference=StatUtils.meanDifference(sample1,sample2);assertEquals(StatUtils.sumDifference(sample1,sample2),StatUtils.sum(diff),tolerance);assertEquals(meanDifference,StatUtils.mean(diff),tolerance);assertEquals(StatUtils.varianceDifference(sample1,sample2,meanDifference),StatUtils.variance(diff),tolerance);try {StatUtils.meanDifference(sample1,small);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}try {StatUtils.varianceDifference(sample1,small,meanDifference);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}try {double[]single={1.0};StatUtils.varianceDifference(single,single,meanDifference);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.stat.StatUtilsTest.testGeometricMean",0,"public void testGeometricMean()throws Exception {double[]test=null;try {StatUtils.geometricMean(test);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}test=new double[]{2,4,6,8};assertEquals(Math.exp(0.25d * StatUtils.sumLog(test)),StatUtils.geometricMean(test),Double.MIN_VALUE);assertEquals(Math.exp(0.5 * StatUtils.sumLog(test,0,2)),StatUtils.geometricMean(test,0,2),Double.MIN_VALUE);}"
"org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.testMismatch",0,"public void testMismatch(){try {new VectorialMean(8).increment(new double[5]);fail(""an exception should have been thrown"");}catch(DimensionMismatchException dme){assertEquals(5,dme.getDimension1());assertEquals(8,dme.getDimension2());}catch(Exception e){fail(""wrong exception type caught: "" + e.getClass().getName());}}"
"org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.testSimplistic",0,"public void testSimplistic()throws DimensionMismatchException {VectorialMean stat=new VectorialMean(2);stat.increment(new double[]{-1.0,1.0});stat.increment(new double[]{1.0,-1.0});double[]mean=stat.getResult();assertEquals(0.0,mean[0],1.0e-12);assertEquals(0.0,mean[1],1.0e-12);}"
"org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.testBasicStats",0,"public void testBasicStats()throws DimensionMismatchException {VectorialMean stat=new VectorialMean(points[0].length);for (int i=0;i < points.length;++i){stat.increment(points[i]);}assertEquals(points.length,stat.getN());double[]mean=stat.getResult();double[]refMean=new double[]{1.78,1.62,3.12};for (int i=0;i < mean.length;++i){assertEquals(refMean[i],mean[i],1.0e-12);}}"
"org.apache.commons.math.linear.QRSolverTest.testRank",0,"/** * test rank */public void testRank(){DecompositionSolver solver=new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x3NonSingular)).getSolver();assertTrue(solver.isNonSingular());solver=new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x3Singular)).getSolver();assertFalse(solver.isNonSingular());solver=new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x4)).getSolver();assertTrue(solver.isNonSingular());solver=new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData4x3)).getSolver();assertTrue(solver.isNonSingular());}"
"org.apache.commons.math.linear.QRSolverTest.testSolveDimensionErrors",0,"/** * test solve dimension errors */public void testSolveDimensionErrors(){DecompositionSolver solver=new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x3NonSingular)).getSolver();RealMatrix b=MatrixUtils.createRealMatrix(new double[2][2]);try {solver.solve(b);fail(""an exception should have been thrown"");}catch(IllegalArgumentException iae){}catch(Exception e){fail(""wrong exception caught"");}try {solver.solve(b.getColumn(0));fail(""an exception should have been thrown"");}catch(IllegalArgumentException iae){}catch(Exception e){fail(""wrong exception caught"");}try {solver.solve(b.getColumnVector(0));fail(""an exception should have been thrown"");}catch(IllegalArgumentException iae){}catch(Exception e){fail(""wrong exception caught"");}}"
"org.apache.commons.math.linear.QRSolverTest.testSolveRankErrors",0,"/** * test solve rank errors */public void testSolveRankErrors(){DecompositionSolver solver=new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x3Singular)).getSolver();RealMatrix b=MatrixUtils.createRealMatrix(new double[3][2]);try {solver.solve(b);fail(""an exception should have been thrown"");}catch(InvalidMatrixException iae){}catch(Exception e){fail(""wrong exception caught"");}try {solver.solve(b.getColumn(0));fail(""an exception should have been thrown"");}catch(InvalidMatrixException iae){}catch(Exception e){fail(""wrong exception caught"");}try {solver.solve(b.getColumnVector(0));fail(""an exception should have been thrown"");}catch(InvalidMatrixException iae){}catch(Exception e){fail(""wrong exception caught"");}}"
"org.apache.commons.math.linear.QRSolverTest.testSolve",0,"/** * test solve */public void testSolve(){QRDecomposition decomposition=new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x3NonSingular));DecompositionSolver solver=decomposition.getSolver();RealMatrix b=MatrixUtils.createRealMatrix(new double[][]{{-102,12250},{544,24500},{167,-36750}});RealMatrix xRef=MatrixUtils.createRealMatrix(new double[][]{{1,2515},{2,422},{-3,898}});assertEquals(0,solver.solve(b).subtract(xRef).getNorm(),2.0e-16 * xRef.getNorm());for (int i=0;i < b.getColumnDimension();++i){final double[]x=solver.solve(b.getColumn(i));final double error=new RealVectorImpl(x).subtract(xRef.getColumnVector(i)).getNorm();assertEquals(0,error,3.0e-16 * xRef.getColumnVector(i).getNorm());}for (int i=0;i < b.getColumnDimension();++i){final RealVector x=solver.solve(b.getColumnVector(i));final double error=x.subtract(xRef.getColumnVector(i)).getNorm();assertEquals(0,error,3.0e-16 * xRef.getColumnVector(i).getNorm());}for (int i=0;i < b.getColumnDimension();++i){RealVectorImplTest.RealVectorTestImpl v=new RealVectorImplTest.RealVectorTestImpl(b.getColumn(i));final RealVector x=solver.solve(v);final double error=x.subtract(xRef.getColumnVector(i)).getNorm();assertEquals(0,error,3.0e-16 * xRef.getColumnVector(i).getNorm());}}"
"org.apache.commons.math.linear.QRSolverTest.testOverdetermined",0,"public void testOverdetermined(){final Random r=new Random(5559252868205245l);int p=(7 * DenseRealMatrix.BLOCK_SIZE)/ 4;int q=(5 * DenseRealMatrix.BLOCK_SIZE)/ 4;RealMatrix a=createTestMatrix(r,p,q);RealMatrix xRef=createTestMatrix(r,q,DenseRealMatrix.BLOCK_SIZE + 3);RealMatrix b=a.multiply(xRef);final double noise=0.001;b.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor(){private static final long serialVersionUID=3533849820776962636L;public double visit(int row,int column,double value){return value * (1.0 + noise * (2 * r.nextDouble()- 1));}});RealMatrix x=new QRDecompositionImpl(a).getSolver().solve(b);assertEquals(0,x.subtract(xRef).getNorm(),0.01 * noise * p* q);}"
"org.apache.commons.math.linear.QRSolverTest.testUnderdetermined",0,"public void testUnderdetermined(){final Random r=new Random(42185006424567123l);int p=(5 * DenseRealMatrix.BLOCK_SIZE)/ 4;int q=(7 * DenseRealMatrix.BLOCK_SIZE)/ 4;RealMatrix a=createTestMatrix(r,p,q);RealMatrix xRef=createTestMatrix(r,q,DenseRealMatrix.BLOCK_SIZE + 3);RealMatrix b=a.multiply(xRef);RealMatrix x=new QRDecompositionImpl(a).getSolver().solve(b);assertTrue(x.subtract(xRef).getNorm()/ (p * q)> 0.01);assertEquals(0.0,x.getSubMatrix(p,q - 1,0,x.getColumnDimension()- 1).getNorm());}"
"org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest.testDerivativesConsistency",0,"public void testDerivativesConsistency()throws DerivativeException,IntegratorException {TestProblem3 pb=new TestProblem3();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.001;MidpointIntegrator integ=new MidpointIntegrator(step);checkDerivativesConsistency(integ,pb,1.0e-10);}"
"org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest.testSerialization",0,"public void testSerialization()throws DerivativeException,IntegratorException,IOException,ClassNotFoundException {TestProblem1 pb=new TestProblem1();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.001;MidpointIntegrator integ=new MidpointIntegrator(step);integ.addStepHandler(new ContinuousOutputModel());integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);ByteArrayOutputStream bos=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(bos);for(StepHandler handler : integ.getStepHandlers()){oos.writeObject(handler);}assertTrue(bos.size()> 98000);assertTrue(bos.size()< 99000);ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());ObjectInputStream ois=new ObjectInputStream(bis);ContinuousOutputModel cm=(ContinuousOutputModel)ois.readObject();Random random=new Random(347588535632l);double maxError=0.0;for (int i=0;i < 1000;++i){double r=random.nextDouble();double time=r * pb.getInitialTime()+ (1.0 - r)* pb.getFinalTime();cm.setInterpolatedTime(time);double[]interpolatedY=cm.getInterpolatedState();double[]theoreticalY=pb.computeTheoreticalState(time);double dx=interpolatedY[0]- theoreticalY[0];double dy=interpolatedY[1]- theoreticalY[1];double error=dx * dx + dy * dy;if (error > maxError){maxError=error;}}assertTrue(maxError < 1.0e-6);}"
"org.apache.commons.math.distribution.PascalDistributionTest.testDegenerate0",0,"/** * Test degenerate case p = 0   */public void testDegenerate0()throws Exception {setDistribution(new PascalDistributionImpl(5,0.0d));setCumulativeTestPoints(new int[]{-1,0,1,5,10});setCumulativeTestValues(new double[]{0d,0d,0d,0d,0d});setDensityTestPoints(new int[]{-1,0,1,10,11});setDensityTestValues(new double[]{0d,0d,0d,0d,0d});setInverseCumulativeTestPoints(new double[]{0.1d,0.5d});setInverseCumulativeTestValues(new int[]{Integer.MAX_VALUE - 1,Integer.MAX_VALUE - 1});verifyDensities();verifyCumulativeProbabilities();verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math.distribution.PascalDistributionTest.testDegenerate1",0,"/** * Test degenerate case p = 1   */public void testDegenerate1()throws Exception {setDistribution(new PascalDistributionImpl(5,1.0d));setCumulativeTestPoints(new int[]{-1,0,1,2,5,10});setCumulativeTestValues(new double[]{0d,1d,1d,1d,1d,1d});setDensityTestPoints(new int[]{-1,0,1,2,5,10});setDensityTestValues(new double[]{0d,1d,0d,0d,0d,0d});setInverseCumulativeTestPoints(new double[]{0.1d,0.5d});setInverseCumulativeTestValues(new int[]{-1,-1});verifyDensities();verifyCumulativeProbabilities();verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math.stat.descriptive.moment.KurtosisTest.testNaN",0,"/** * Make sure Double.NaN is returned iff n < 4*/public void testNaN(){Kurtosis kurt=new Kurtosis();assertTrue(Double.isNaN(kurt.getResult()));kurt.increment(1d);assertTrue(Double.isNaN(kurt.getResult()));kurt.increment(1d);assertTrue(Double.isNaN(kurt.getResult()));kurt.increment(1d);assertTrue(Double.isNaN(kurt.getResult()));kurt.increment(1d);assertFalse(Double.isNaN(kurt.getResult()));}"
"org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest.testDerivativesConsistency",0,"public void testDerivativesConsistency()throws DerivativeException,IntegratorException {TestProblem3 pb=new TestProblem3(0.1);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=scalAbsoluteTolerance;HighamHall54Integrator integ=new HighamHall54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);checkDerivativesConsistency(integ,pb,1.0e-10);}"
"org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest.testSerialization",0,"public void testSerialization()throws DerivativeException,IntegratorException,IOException,ClassNotFoundException {TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=scalAbsoluteTolerance;HighamHall54Integrator integ=new HighamHall54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);integ.addStepHandler(new ContinuousOutputModel());integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);ByteArrayOutputStream bos=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(bos);for(StepHandler handler : integ.getStepHandlers()){oos.writeObject(handler);}assertTrue(bos.size()> 158000);assertTrue(bos.size()< 159000);ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());ObjectInputStream ois=new ObjectInputStream(bis);ContinuousOutputModel cm=(ContinuousOutputModel)ois.readObject();Random random=new Random(347588535632l);double maxError=0.0;for (int i=0;i < 1000;++i){double r=random.nextDouble();double time=r * pb.getInitialTime()+ (1.0 - r)* pb.getFinalTime();cm.setInterpolatedTime(time);double[]interpolatedY=cm.getInterpolatedState();double[]theoreticalY=pb.computeTheoreticalState(time);double dx=interpolatedY[0]- theoreticalY[0];double dy=interpolatedY[1]- theoreticalY[1];double error=dx * dx + dy * dy;if (error > maxError){maxError=error;}}assertTrue(maxError < 1.6e-10);}"
"org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest.testClone",0,"public void testClone()throws DerivativeException,IntegratorException {TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=scalAbsoluteTolerance;HighamHall54Integrator integ=new HighamHall54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);integ.addStepHandler(new StepHandler(){private static final long serialVersionUID=9111679755950880352L;public void handleStep(StepInterpolator interpolator,boolean isLast)throws DerivativeException {StepInterpolator cloned=interpolator.copy();double tA=cloned.getPreviousTime();double tB=cloned.getCurrentTime();double halfStep=Math.abs(tB - tA)/ 2;assertEquals(interpolator.getPreviousTime(),tA,1.0e-12);assertEquals(interpolator.getCurrentTime(),tB,1.0e-12);for (int i=0;i < 10;++i){double t=(i * tB + (9 - i)* tA)/ 9;interpolator.setInterpolatedTime(t);assertTrue(Math.abs(cloned.getInterpolatedTime()- t)> (halfStep / 10));cloned.setInterpolatedTime(t);assertEquals(t,cloned.getInterpolatedTime(),1.0e-12);double[]referenceState=interpolator.getInterpolatedState();double[]cloneState=cloned.getInterpolatedState();for (int j=0;j < referenceState.length;++j){assertEquals(referenceState[j],cloneState[j],1.0e-12);}}}public boolean requiresDenseOutput(){return true;}public void reset(){}});integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);}"
"org.apache.commons.math.ode.FirstOrderConverterTest.testDoubleDimension",0,"public void testDoubleDimension(){for (int i=1;i < 10;++i){SecondOrderDifferentialEquations eqn2=new Equations(i,0.2);FirstOrderConverter eqn1=new FirstOrderConverter(eqn2);assertTrue(eqn1.getDimension()== (2 * eqn2.getDimension()));}}"
"org.apache.commons.math.ode.FirstOrderConverterTest.testDecreasingSteps",0,"public void testDecreasingSteps()throws DerivativeException,IntegratorException {double previousError=Double.NaN;for (int i=0;i < 10;++i){double step=Math.pow(2.0,-(i + 1));double error=integrateWithSpecifiedStep(4.0,0.0,1.0,step)- Math.sin(4.0);if (i > 0){assertTrue(Math.abs(error)< Math.abs(previousError));}previousError=error;}}"
"org.apache.commons.math.ode.FirstOrderConverterTest.testSmallStep",0,"public void testSmallStep()throws DerivativeException,IntegratorException {double error=integrateWithSpecifiedStep(4.0,0.0,1.0,1.0e-4)- Math.sin(4.0);assertTrue(Math.abs(error)< 1.0e-10);}"
"org.apache.commons.math.ode.FirstOrderConverterTest.testBigStep",0,"public void testBigStep()throws DerivativeException,IntegratorException {double error=integrateWithSpecifiedStep(4.0,0.0,1.0,0.5)- Math.sin(4.0);assertTrue(Math.abs(error)> 0.1);}"
"org.apache.commons.math.distribution.CauchyDistributionTest.testInverseCumulativeProbabilityExtremes",0,"public void testInverseCumulativeProbabilityExtremes()throws Exception {setInverseCumulativeTestPoints(new double[]{0.0,1.0});setInverseCumulativeTestValues(new double[]{Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY});verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math.distribution.CauchyDistributionTest.testMedian",0,"public void testMedian(){CauchyDistribution distribution=(CauchyDistribution)getDistribution();double expected=Math.random();distribution.setMedian(expected);assertEquals(expected,distribution.getMedian(),0.0);}"
"org.apache.commons.math.distribution.CauchyDistributionTest.testScale",0,"public void testScale(){CauchyDistribution distribution=(CauchyDistribution)getDistribution();double expected=Math.random();distribution.setScale(expected);assertEquals(expected,distribution.getScale(),0.0);}"
"org.apache.commons.math.distribution.CauchyDistributionTest.testSetScale",0,"public void testSetScale(){CauchyDistribution distribution=(CauchyDistribution)getDistribution();try {distribution.setScale(0.0);fail(""Can not have 0.0 scale."");}catch(IllegalArgumentException ex){}try {distribution.setScale(-1.0);fail(""Can not have negative scale."");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.distribution.CauchyDistributionTest.testCumulativeProbabilities",0,"/** * Verifies that cumulative probability density calculations match expected values using default test instance data*/public void testCumulativeProbabilities()throws Exception {verifyCumulativeProbabilities();}"
"org.apache.commons.math.distribution.CauchyDistributionTest.testInverseCumulativeProbabilities",0,"/** * Verifies that inverse cumulative probability density calculations match expected values using default test instance data*/public void testInverseCumulativeProbabilities()throws Exception {verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math.distribution.CauchyDistributionTest.testConsistency",0,"/** * Verifies that probability computations are consistent*/public void testConsistency()throws Exception {for (int i=1;i < cumulativeTestPoints.length;i++){TestUtils.assertEquals(0d,distribution.cumulativeProbability(cumulativeTestPoints[i],cumulativeTestPoints[i]),tolerance);double upper=Math.max(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double lower=Math.min(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double diff=distribution.cumulativeProbability(upper)- distribution.cumulativeProbability(lower);double direct=distribution.cumulativeProbability(lower,upper);TestUtils.assertEquals(""Inconsistent cumulative probabilities for ("" + lower + "",""+ upper+ "")"",diff,direct,tolerance);}}"
"org.apache.commons.math.distribution.CauchyDistributionTest.testIllegalArguments",0,"/** * Verifies that illegal arguments are correctly handled*/public void testIllegalArguments()throws Exception {try {distribution.cumulativeProbability(1,0);fail(""Expecting IllegalArgumentException for bad cumulativeProbability interval"");}catch(IllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(-1);fail(""Expecting IllegalArgumentException for p = -1"");}catch(IllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(2);fail(""Expecting IllegalArgumentException for p = 2"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.linear.TriDiagonalTransformerTest.testNonSquare",0,"public void testNonSquare(){try {new TriDiagonalTransformer(MatrixUtils.createRealMatrix(new double[3][2]));fail(""an exception should have been thrown"");}catch(InvalidMatrixException ime){}catch(Exception e){fail(""wrong exception caught"");}}"
"org.apache.commons.math.linear.TriDiagonalTransformerTest.testAEqualQTQt",0,"public void testAEqualQTQt(){checkAEqualQTQt(MatrixUtils.createRealMatrix(testSquare5));checkAEqualQTQt(MatrixUtils.createRealMatrix(testSquare3));}"
"org.apache.commons.math.linear.TriDiagonalTransformerTest.testNoAccessBelowDiagonal",0,"public void testNoAccessBelowDiagonal(){checkNoAccessBelowDiagonal(testSquare5);checkNoAccessBelowDiagonal(testSquare3);}"
"org.apache.commons.math.linear.TriDiagonalTransformerTest.testQOrthogonal",0,"public void testQOrthogonal(){checkOrthogonal(new TriDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare5)).getQ());checkOrthogonal(new TriDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare3)).getQ());}"
"org.apache.commons.math.linear.TriDiagonalTransformerTest.testQTOrthogonal",0,"public void testQTOrthogonal(){checkOrthogonal(new TriDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare5)).getQT());checkOrthogonal(new TriDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare3)).getQT());}"
"org.apache.commons.math.linear.TriDiagonalTransformerTest.testTTriDiagonal",0,"public void testTTriDiagonal(){checkTriDiagonal(new TriDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare5)).getT());checkTriDiagonal(new TriDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare3)).getT());}"
"org.apache.commons.math.linear.TriDiagonalTransformerTest.testMatricesValues5",0,"public void testMatricesValues5(){checkMatricesValues(testSquare5,new double[][]{{1.0,0.0,0.0,0.0,0.0},{0.0,-0.5163977794943222,0.016748280772542083,0.839800693771262,0.16669620021405473},{0.0,-0.7745966692414833,-0.4354553000860955,-0.44989322880603355,-0.08930153582895772},{0.0,-0.2581988897471611,0.6364346693566014,-0.30263204032131164,0.6608313651342882},{0.0,-0.2581988897471611,0.6364346693566009,-0.027289660803112598,-0.7263191580755246}},new double[]{1,4.4,1.433099579242636,-0.89537362758743,2.062274048344794},new double[]{-Math.sqrt(15),-3.0832882879592476,0.6082710842351517,1.1786086405912128});}"
"org.apache.commons.math.linear.TriDiagonalTransformerTest.testMatricesValues3",0,"public void testMatricesValues3(){checkMatricesValues(testSquare3,new double[][]{{1.0,0.0,0.0},{0.0,-0.6,0.8},{0.0,-0.8,-0.6}},new double[]{1,2.64,-0.64},new double[]{-5,-1.52});}"
"org.apache.commons.math.analysis.MullerSolverTest.testDeprecated",0,"/** * Test deprecated APIs.*/@Deprecated public void testDeprecated()throws MathException {UnivariateRealFunction f=new SinFunction();UnivariateRealSolver solver=new MullerSolver(f);double min,max,expected,result,tolerance;min=3.0;max=4.0;expected=Math.PI;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(min,max);assertEquals(expected,result,tolerance);min=-1.0;max=1.5;expected=0.0;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(min,max);assertEquals(expected,result,tolerance);}"
"org.apache.commons.math.analysis.MullerSolverTest.testDeprecated2",0,"/** * Test deprecated APIs.*/@Deprecated public void testDeprecated2()throws MathException {UnivariateRealFunction f=new QuinticFunction();MullerSolver solver=new MullerSolver(f);double min,max,expected,result,tolerance;min=-0.4;max=0.2;expected=0.0;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve2(min,max);assertEquals(expected,result,tolerance);min=0.75;max=1.5;expected=1.0;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve2(min,max);assertEquals(expected,result,tolerance);min=-0.9;max=-0.2;expected=-0.5;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve2(min,max);assertEquals(expected,result,tolerance);}"
"org.apache.commons.math.analysis.MullerSolverTest.testSinFunction",0,"/** * Test of solver for the sine function.*/public void testSinFunction()throws MathException {UnivariateRealFunction f=new SinFunction();UnivariateRealSolver solver=new MullerSolver();double min,max,expected,result,tolerance;min=3.0;max=4.0;expected=Math.PI;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(f,min,max);assertEquals(expected,result,tolerance);min=-1.0;max=1.5;expected=0.0;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(f,min,max);assertEquals(expected,result,tolerance);}"
"org.apache.commons.math.analysis.MullerSolverTest.testSinFunction2",0,"/** * Test of solver for the sine function using solve2().*/public void testSinFunction2()throws MathException {UnivariateRealFunction f=new SinFunction();MullerSolver solver=new MullerSolver();double min,max,expected,result,tolerance;min=3.0;max=4.0;expected=Math.PI;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve2(f,min,max);assertEquals(expected,result,tolerance);min=-1.0;max=1.5;expected=0.0;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve2(f,min,max);assertEquals(expected,result,tolerance);}"
"org.apache.commons.math.analysis.MullerSolverTest.testQuinticFunction",0,"/** * Test of solver for the quintic function.*/public void testQuinticFunction()throws MathException {UnivariateRealFunction f=new QuinticFunction();UnivariateRealSolver solver=new MullerSolver();double min,max,expected,result,tolerance;min=-0.4;max=0.2;expected=0.0;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(f,min,max);assertEquals(expected,result,tolerance);min=0.75;max=1.5;expected=1.0;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(f,min,max);assertEquals(expected,result,tolerance);min=-0.9;max=-0.2;expected=-0.5;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(f,min,max);assertEquals(expected,result,tolerance);}"
"org.apache.commons.math.analysis.MullerSolverTest.testQuinticFunction2",0,"/** * Test of solver for the quintic function using solve2().*/public void testQuinticFunction2()throws MathException {UnivariateRealFunction f=new QuinticFunction();MullerSolver solver=new MullerSolver();double min,max,expected,result,tolerance;min=-0.4;max=0.2;expected=0.0;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve2(f,min,max);assertEquals(expected,result,tolerance);min=0.75;max=1.5;expected=1.0;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve2(f,min,max);assertEquals(expected,result,tolerance);min=-0.9;max=-0.2;expected=-0.5;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve2(f,min,max);assertEquals(expected,result,tolerance);}"
"org.apache.commons.math.analysis.MullerSolverTest.testExpm1Function",0,"/** * Test of solver for the exponential function. <p> It takes 10 to 15 iterations for the last two tests to converge. In fact,if not for the bisection alternative,the solver would exceed the default maximal iteration of 100.*/public void testExpm1Function()throws MathException {UnivariateRealFunction f=new Expm1Function();UnivariateRealSolver solver=new MullerSolver();double min,max,expected,result,tolerance;min=-1.0;max=2.0;expected=0.0;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(f,min,max);assertEquals(expected,result,tolerance);min=-20.0;max=10.0;expected=0.0;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(f,min,max);assertEquals(expected,result,tolerance);min=-50.0;max=100.0;expected=0.0;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(f,min,max);assertEquals(expected,result,tolerance);}"
"org.apache.commons.math.analysis.MullerSolverTest.testExpm1Function2",0,"/** * Test of solver for the exponential function using solve2(). <p> It takes 25 to 50 iterations for the last two tests to converge.*/public void testExpm1Function2()throws MathException {UnivariateRealFunction f=new Expm1Function();MullerSolver solver=new MullerSolver();double min,max,expected,result,tolerance;min=-1.0;max=2.0;expected=0.0;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve2(f,min,max);assertEquals(expected,result,tolerance);min=-20.0;max=10.0;expected=0.0;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve2(f,min,max);assertEquals(expected,result,tolerance);min=-50.0;max=100.0;expected=0.0;tolerance=Math.max(solver.getAbsoluteAccuracy(),Math.abs(expected * solver.getRelativeAccuracy()));result=solver.solve2(f,min,max);assertEquals(expected,result,tolerance);}"
"org.apache.commons.math.analysis.MullerSolverTest.testParameters",0,"/** * Test of parameters for the solver.*/public void testParameters()throws Exception {UnivariateRealFunction f=new SinFunction();UnivariateRealSolver solver=new MullerSolver();try {solver.solve(f,1,-1);fail(""Expecting IllegalArgumentException - bad interval"");}catch(IllegalArgumentException ex){}try {solver.solve(f,2,3);fail(""Expecting IllegalArgumentException - no bracketing"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.analysis.PolynomialSplineFunctionTest.testConstructor",0,"public void testConstructor(){PolynomialSplineFunction spline=new PolynomialSplineFunction(knots,polynomials);assertTrue(Arrays.equals(knots,spline.getKnots()));assertEquals(1d,spline.getPolynomials()[0].getCoefficients()[2],0);assertEquals(3,spline.getN());try {new PolynomialSplineFunction(new double[]{0},polynomials);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}try {new PolynomialSplineFunction(new double[]{0,1,2,3,4},polynomials);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}try {new PolynomialSplineFunction(new double[]{0,1,3,2},polynomials);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.analysis.PolynomialSplineFunctionTest.testValues",0,"public void testValues()throws Exception {PolynomialSplineFunction spline=new PolynomialSplineFunction(knots,polynomials);UnivariateRealFunction dSpline=spline.derivative();double x=-1;int index=0;for (int i=0;i < 10;i++){x+=0.25;index=findKnot(knots,x);assertEquals(""spline function evaluation failed for x="" + x,polynomials[index].value(x - knots[index]),spline.value(x),tolerance);assertEquals(""spline derivative evaluation failed for x="" + x,dp.value(x - knots[index]),dSpline.value(x),tolerance);}for (int i=0;i < 3;i++){assertEquals(""spline function evaluation failed for knot="" + knots[i],polynomials[i].value(0),spline.value(knots[i]),tolerance);assertEquals(""spline function evaluation failed for knot="" + knots[i],dp.value(0),dSpline.value(knots[i]),tolerance);}try {x=spline.value(-1.5);fail(""Expecting IllegalArgumentException"");}catch(FunctionEvaluationException ex){}try {x=spline.value(2.5);fail(""Expecting IllegalArgumentException"");}catch(FunctionEvaluationException ex){}}"
"org.apache.commons.math.linear.BigMatrixImplTest.testDimensions",0,"/** * test dimensions */public void testDimensions(){BigMatrixImpl m=new BigMatrixImpl(testData);BigMatrixImpl m2=new BigMatrixImpl(testData2);assertEquals(""testData row dimension"",3,m.getRowDimension());assertEquals(""testData column dimension"",3,m.getColumnDimension());assertTrue(""testData is square"",m.isSquare());assertEquals(""testData2 row dimension"",m2.getRowDimension(),2);assertEquals(""testData2 column dimension"",m2.getColumnDimension(),3);assertTrue(""testData2 is not square"",!m2.isSquare());}"
"org.apache.commons.math.linear.BigMatrixImplTest.testCopyFunctions",0,"/** * test copy functions */public void testCopyFunctions(){BigMatrixImpl m1=new BigMatrixImpl(testData);BigMatrixImpl m2=new BigMatrixImpl(m1.getData());assertEquals(m2,m1);BigMatrixImpl m3=new BigMatrixImpl(testData);BigMatrixImpl m4=new BigMatrixImpl(m3.getData(),false);assertEquals(m4,m3);}"
"org.apache.commons.math.linear.BigMatrixImplTest.testConstructors",0,"/** * test constructors */public void testConstructors(){BigMatrix m1=new BigMatrixImpl(testData);BigMatrix m2=new BigMatrixImpl(testDataString);BigMatrix m3=new BigMatrixImpl(asBigDecimal(testData));BigMatrix m4=new BigMatrixImpl(asBigDecimal(testData),true);BigMatrix m5=new BigMatrixImpl(asBigDecimal(testData),false);assertClose(""double,string"",m1,m2,Double.MIN_VALUE);assertClose(""double,BigDecimal"",m1,m3,Double.MIN_VALUE);assertClose(""string,BigDecimal"",m2,m3,Double.MIN_VALUE);assertClose(""double,BigDecimal/true"",m1,m4,Double.MIN_VALUE);assertClose(""double,BigDecimal/false"",m1,m5,Double.MIN_VALUE);try {new BigMatrixImpl(new String[][]{{""0"",""hello"",""1""}});fail(""Expecting NumberFormatException"");}catch(NumberFormatException ex){}try {new BigMatrixImpl(new String[][]{});fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}try {new BigMatrixImpl(new String[][]{{},{}});fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}try {new BigMatrixImpl(new String[][]{{""a"",""b""},{""c""}});fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}try {new BigMatrixImpl(0,1);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}try {new BigMatrixImpl(1,0);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.linear.BigMatrixImplTest.testAdd",0,"/** * test add */public void testAdd(){BigMatrixImpl m=new BigMatrixImpl(testData);BigMatrixImpl mInv=new BigMatrixImpl(testDataInv);BigMatrix mPlusMInv=m.add(mInv);double[][]sumEntries=asDouble(mPlusMInv.getData());for (int row=0;row < m.getRowDimension();row++){for (int col=0;col < m.getColumnDimension();col++){assertEquals(""sum entry entry"",testDataPlusInv[row][col],sumEntries[row][col],entryTolerance);}}}"
"org.apache.commons.math.linear.BigMatrixImplTest.testAddFail",0,"/** * test add failure */public void testAddFail(){BigMatrixImpl m=new BigMatrixImpl(testData);BigMatrixImpl m2=new BigMatrixImpl(testData2);try {m.add(m2);fail(""IllegalArgumentException expected"");}catch(IllegalArgumentException ex){;}}"
"org.apache.commons.math.linear.BigMatrixImplTest.testNorm",0,"/** * test norm */public void testNorm(){BigMatrixImpl m=new BigMatrixImpl(testData);BigMatrixImpl m2=new BigMatrixImpl(testData2);assertEquals(""testData norm"",14d,m.getNorm().doubleValue(),entryTolerance);assertEquals(""testData2 norm"",7d,m2.getNorm().doubleValue(),entryTolerance);}"
"org.apache.commons.math.linear.BigMatrixImplTest.testPlusMinus",0,"/** * test m-n = m + -n */public void testPlusMinus(){BigMatrixImpl m=new BigMatrixImpl(testData);BigMatrixImpl m2=new BigMatrixImpl(testDataInv);assertClose(""m-n = m + -n"",m.subtract(m2),m2.scalarMultiply(new BigDecimal(-1d)).add(m),entryTolerance);try {m.subtract(new BigMatrixImpl(testData2));fail(""Expecting illegalArgumentException"");}catch(IllegalArgumentException ex){;}}"
"org.apache.commons.math.linear.BigMatrixImplTest.testMultiply",0,"/** * test multiply */public void testMultiply(){BigMatrixImpl m=new BigMatrixImpl(testData);BigMatrixImpl mInv=new BigMatrixImpl(testDataInv);BigMatrixImpl identity=new BigMatrixImpl(id);BigMatrixImpl m2=new BigMatrixImpl(testData2);assertClose(""inverse multiply"",m.multiply(mInv),identity,entryTolerance);assertClose(""inverse multiply"",mInv.multiply(m),identity,entryTolerance);assertClose(""identity multiply"",m.multiply(identity),m,entryTolerance);assertClose(""identity multiply"",identity.multiply(mInv),mInv,entryTolerance);assertClose(""identity multiply"",m2.multiply(identity),m2,entryTolerance);try {m.multiply(new BigMatrixImpl(bigSingular));fail(""Expecting illegalArgumentException"");}catch(IllegalArgumentException ex){;}}"
"org.apache.commons.math.linear.BigMatrixImplTest.testMultiply2",0,"public void testMultiply2(){BigMatrix m3=new BigMatrixImpl(d3);BigMatrix m4=new BigMatrixImpl(d4);BigMatrix m5=new BigMatrixImpl(d5);assertClose(""m3*m4=m5"",m3.multiply(m4),m5,entryTolerance);}"
"org.apache.commons.math.linear.BigMatrixImplTest.testIsSingular",0,"/** * test isSingular */public void testIsSingular(){BigMatrixImpl m=new BigMatrixImpl(singular);assertTrue(""singular"",m.isSingular());m=new BigMatrixImpl(bigSingular);assertTrue(""big singular"",m.isSingular());m=new BigMatrixImpl(id);assertTrue(""identity nonsingular"",!m.isSingular());m=new BigMatrixImpl(testData);assertTrue(""testData nonsingular"",!m.isSingular());}"
"org.apache.commons.math.linear.BigMatrixImplTest.testInverse",0,"/** * test inverse */public void testInverse(){BigMatrixImpl m=new BigMatrixImpl(testData);BigMatrix mInv=new BigMatrixImpl(testDataInv);assertClose(""inverse"",mInv,m.inverse(),normTolerance);assertClose(""inverse^2"",m,m.inverse().inverse(),10E-12);m=new BigMatrixImpl(testData2);try {m.inverse();fail(""Expecting InvalidMatrixException"");}catch(InvalidMatrixException ex){}m=new BigMatrixImpl(singular);try {m.inverse();fail(""Expecting InvalidMatrixException"");}catch(InvalidMatrixException ex){}}"
"org.apache.commons.math.linear.BigMatrixImplTest.testSolve",0,"/** * test solve */public void testSolve(){BigMatrixImpl m=new BigMatrixImpl(testData);BigMatrix mInv=new BigMatrixImpl(testDataInv);assertClose(""inverse-operate"",asDouble(mInv.operate(asBigDecimal(testVector))),asDouble(m.solve(asBigDecimal(testVector))),normTolerance);try {asDouble(m.solve(asBigDecimal(testVector2)));fail(""expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){;}BigMatrix bs=new BigMatrixImpl(bigSingular);try {bs.solve(bs);fail(""Expecting InvalidMatrixException"");}catch(InvalidMatrixException ex){;}try {m.solve(bs);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){;}try {new BigMatrixImpl(testData2).solve(bs);fail(""Expecting illegalArgumentException"");}catch(IllegalArgumentException ex){;}try {(new BigMatrixImpl(testData2)).luDecompose();fail(""Expecting InvalidMatrixException"");}catch(InvalidMatrixException ex){;}}"
"org.apache.commons.math.linear.BigMatrixImplTest.testDeterminant",0,"/** * test determinant */public void testDeterminant(){BigMatrix m=new BigMatrixImpl(bigSingular);assertEquals(""singular determinant"",0,m.getDeterminant().doubleValue(),0);m=new BigMatrixImpl(detData);assertEquals(""nonsingular test"",-3d,m.getDeterminant().doubleValue(),normTolerance);m=new BigMatrixImpl(detData2);assertEquals(""nonsingular R test 1"",-2d,m.getDeterminant().doubleValue(),normTolerance);m=new BigMatrixImpl(testData);assertEquals(""nonsingular  R test 2"",-1d,m.getDeterminant().doubleValue(),normTolerance);try {new BigMatrixImpl(testData2).getDeterminant().doubleValue();fail(""Expecting InvalidMatrixException"");}catch(InvalidMatrixException ex){;}}"
"org.apache.commons.math.linear.BigMatrixImplTest.testTrace",0,"/** * test trace */public void testTrace(){BigMatrix m=new BigMatrixImpl(id);assertEquals(""identity trace"",3d,m.getTrace().doubleValue(),entryTolerance);m=new BigMatrixImpl(testData2);try {m.getTrace().doubleValue();fail(""Expecting illegalArgumentException"");}catch(IllegalArgumentException ex){;}}"
"org.apache.commons.math.linear.BigMatrixImplTest.testScalarAdd",0,"/** * test sclarAdd */public void testScalarAdd(){BigMatrix m=new BigMatrixImpl(testData);assertClose(""scalar add"",new BigMatrixImpl(testDataPlus2),m.scalarAdd(new BigDecimal(2d)),entryTolerance);}"
"org.apache.commons.math.linear.BigMatrixImplTest.testOperate",0,"/** * test operate */public void testOperate(){BigMatrix m=new BigMatrixImpl(id);double[]x=asDouble(m.operate(asBigDecimal(testVector)));assertClose(""identity operate"",testVector,x,entryTolerance);m=new BigMatrixImpl(bigSingular);try {asDouble(m.operate(asBigDecimal(testVector)));fail(""Expecting illegalArgumentException"");}catch(IllegalArgumentException ex){;}}"
"org.apache.commons.math.linear.BigMatrixImplTest.testMath209",0,"/** * test issue MATH-209 */public void testMath209(){BigMatrix a=new BigMatrixImpl(new BigDecimal[][]{{new BigDecimal(1),new BigDecimal(2)},{new BigDecimal(3),new BigDecimal(4)},{new BigDecimal(5),new BigDecimal(6)}},false);BigDecimal[]b=a.operate(new BigDecimal[]{new BigDecimal(1),new BigDecimal(1)});assertEquals(a.getRowDimension(),b.length);assertEquals(3.0,b[0].doubleValue(),1.0e-12);assertEquals(7.0,b[1].doubleValue(),1.0e-12);assertEquals(11.0,b[2].doubleValue(),1.0e-12);}"
"org.apache.commons.math.linear.BigMatrixImplTest.testTranspose",0,"/** * test transpose */public void testTranspose(){BigMatrix m=new BigMatrixImpl(testData);assertClose(""inverse-transpose"",m.inverse().transpose(),m.transpose().inverse(),normTolerance);m=new BigMatrixImpl(testData2);BigMatrix mt=new BigMatrixImpl(testData2T);assertClose(""transpose"",mt,m.transpose(),normTolerance);}"
"org.apache.commons.math.linear.BigMatrixImplTest.testPremultiplyVector",0,"/** * test preMultiply by vector */public void testPremultiplyVector(){BigMatrix m=new BigMatrixImpl(testData);assertClose(""premultiply"",asDouble(m.preMultiply(asBigDecimal(testVector))),preMultTest,normTolerance);m=new BigMatrixImpl(bigSingular);try {m.preMultiply(asBigDecimal(testVector));fail(""expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){;}}"
"org.apache.commons.math.linear.BigMatrixImplTest.testPremultiply",0,"public void testPremultiply(){BigMatrix m3=new BigMatrixImpl(d3);BigMatrix m4=new BigMatrixImpl(d4);BigMatrix m5=new BigMatrixImpl(d5);assertClose(""m3*m4=m5"",m4.preMultiply(m3),m5,entryTolerance);BigMatrixImpl m=new BigMatrixImpl(testData);BigMatrixImpl mInv=new BigMatrixImpl(testDataInv);BigMatrixImpl identity=new BigMatrixImpl(id);new BigMatrixImpl(testData2);assertClose(""inverse multiply"",m.preMultiply(mInv),identity,entryTolerance);assertClose(""inverse multiply"",mInv.preMultiply(m),identity,entryTolerance);assertClose(""identity multiply"",m.preMultiply(identity),m,entryTolerance);assertClose(""identity multiply"",identity.preMultiply(mInv),mInv,entryTolerance);try {m.preMultiply(new BigMatrixImpl(bigSingular));fail(""Expecting illegalArgumentException"");}catch(IllegalArgumentException ex){;}}"
"org.apache.commons.math.linear.BigMatrixImplTest.testGetVectors",0,"public void testGetVectors(){BigMatrix m=new BigMatrixImpl(testData);assertClose(""get row"",m.getRowAsDoubleArray(0),testDataRow1,entryTolerance);assertClose(""get col"",m.getColumnAsDoubleArray(2),testDataCol3,entryTolerance);try {m.getRowAsDoubleArray(10);fail(""expecting MatrixIndexException"");}catch(MatrixIndexException ex){;}try {m.getColumnAsDoubleArray(-1);fail(""expecting MatrixIndexException"");}catch(MatrixIndexException ex){;}}"
"org.apache.commons.math.linear.BigMatrixImplTest.testLUDecomposition",0,"public void testLUDecomposition()throws Exception {BigMatrixImpl m=new BigMatrixImpl(testData);BigMatrix lu=m.getLUMatrix();assertClose(""LU decomposition"",lu,(BigMatrix)new BigMatrixImpl(testDataLU),normTolerance);verifyDecomposition(m,lu);m=new BigMatrixImpl(luData);lu=m.getLUMatrix();assertClose(""LU decomposition"",lu,(BigMatrix)new BigMatrixImpl(luDataLUDecomposition),normTolerance);verifyDecomposition(m,lu);m=new BigMatrixImpl(testDataMinus);lu=m.getLUMatrix();verifyDecomposition(m,lu);m=new BigMatrixImpl(id);lu=m.getLUMatrix();verifyDecomposition(m,lu);try {m=new BigMatrixImpl(bigSingular);lu=m.getLUMatrix();fail(""Expecting InvalidMatrixException"");}catch(InvalidMatrixException ex){}try {m=new BigMatrixImpl(testData2);lu=m.getLUMatrix();fail(""Expecting InvalidMatrixException"");}catch(InvalidMatrixException ex){}}"
"org.apache.commons.math.linear.BigMatrixImplTest.testSubMatrix",0,"/** * test submatrix accessors*/public void testSubMatrix(){BigMatrix m=new BigMatrixImpl(subTestData);BigMatrix mRows23Cols00=new BigMatrixImpl(subRows23Cols00);BigMatrix mRows00Cols33=new BigMatrixImpl(subRows00Cols33);BigMatrix mRows01Cols23=new BigMatrixImpl(subRows01Cols23);BigMatrix mRows02Cols13=new BigMatrixImpl(subRows02Cols13);BigMatrix mRows03Cols12=new BigMatrixImpl(subRows03Cols12);BigMatrix mRows03Cols123=new BigMatrixImpl(subRows03Cols123);BigMatrix mRows20Cols123=new BigMatrixImpl(subRows20Cols123);BigMatrix mRows31Cols31=new BigMatrixImpl(subRows31Cols31);assertEquals(""Rows23Cols00"",mRows23Cols00,m.getSubMatrix(2,3,0,0));assertEquals(""Rows00Cols33"",mRows00Cols33,m.getSubMatrix(0,0,3,3));assertEquals(""Rows01Cols23"",mRows01Cols23,m.getSubMatrix(0,1,2,3));assertEquals(""Rows02Cols13"",mRows02Cols13,m.getSubMatrix(new int[]{0,2},new int[]{1,3}));assertEquals(""Rows03Cols12"",mRows03Cols12,m.getSubMatrix(new int[]{0,3},new int[]{1,2}));assertEquals(""Rows03Cols123"",mRows03Cols123,m.getSubMatrix(new int[]{0,3},new int[]{1,2,3}));assertEquals(""Rows20Cols123"",mRows20Cols123,m.getSubMatrix(new int[]{2,0},new int[]{1,2,3}));assertEquals(""Rows31Cols31"",mRows31Cols31,m.getSubMatrix(new int[]{3,1},new int[]{3,1}));assertEquals(""Rows31Cols31"",mRows31Cols31,m.getSubMatrix(new int[]{3,1},new int[]{3,1}));try {m.getSubMatrix(1,0,2,4);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.getSubMatrix(-1,1,2,2);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.getSubMatrix(1,0,2,2);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.getSubMatrix(1,0,2,4);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.getSubMatrix(new int[]{},new int[]{0});fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.getSubMatrix(new int[]{0},new int[]{4});fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}}"
"org.apache.commons.math.linear.BigMatrixImplTest.testGetColumnMatrix",0,"public void testGetColumnMatrix(){BigMatrix m=new BigMatrixImpl(subTestData);BigMatrix mColumn1=new BigMatrixImpl(subColumn1);BigMatrix mColumn3=new BigMatrixImpl(subColumn3);assertEquals(""Column1"",mColumn1,m.getColumnMatrix(1));assertEquals(""Column3"",mColumn3,m.getColumnMatrix(3));try {m.getColumnMatrix(-1);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.getColumnMatrix(4);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}}"
"org.apache.commons.math.linear.BigMatrixImplTest.testGetRowMatrix",0,"public void testGetRowMatrix(){BigMatrix m=new BigMatrixImpl(subTestData);BigMatrix mRow0=new BigMatrixImpl(subRow0);BigMatrix mRow3=new BigMatrixImpl(subRow3);assertEquals(""Row0"",mRow0,m.getRowMatrix(0));assertEquals(""Row3"",mRow3,m.getRowMatrix(3));try {m.getRowMatrix(-1);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}try {m.getRowMatrix(4);fail(""Expecting MatrixIndexException"");}catch(MatrixIndexException ex){}}"
"org.apache.commons.math.linear.BigMatrixImplTest.testEqualsAndHashCode",0,"public void testEqualsAndHashCode(){BigMatrixImpl m=new BigMatrixImpl(testData);BigMatrixImpl m1=(BigMatrixImpl)m.copy();BigMatrixImpl mt=(BigMatrixImpl)m.transpose();assertTrue(m.hashCode()!= mt.hashCode());assertEquals(m.hashCode(),m1.hashCode());assertEquals(m,m);assertEquals(m,m1);assertFalse(m.equals(null));assertFalse(m.equals(mt));assertFalse(m.equals(new BigMatrixImpl(bigSingular)));m=new BigMatrixImpl(new String[][]{{""2.0""}});m1=new BigMatrixImpl(new String[][]{{""2.00""}});assertTrue(m.hashCode()!= m1.hashCode());assertFalse(m.equals(m1));}"
"org.apache.commons.math.linear.BigMatrixImplTest.testToString",0,"public void testToString(){BigMatrixImpl m=new BigMatrixImpl(testData);assertEquals(""BigMatrixImpl{{1,2,3},{2,5,3},{1,0,8}}"",m.toString());m=new BigMatrixImpl();assertEquals(""BigMatrixImpl{}"",m.toString());}"
"org.apache.commons.math.linear.BigMatrixImplTest.testSetSubMatrix",0,"public void testSetSubMatrix()throws Exception {BigDecimal[][]detData3=MatrixUtils.createBigMatrix(detData2).getData();BigMatrixImpl m=new BigMatrixImpl(testData);m.setSubMatrix(detData3,1,1);BigMatrix expected=MatrixUtils.createBigMatrix(new double[][]{{1.0,2.0,3.0},{2.0,1.0,3.0},{1.0,2.0,4.0}});assertEquals(expected,m);m.setSubMatrix(detData3,0,0);expected=MatrixUtils.createBigMatrix(new double[][]{{1.0,3.0,3.0},{2.0,4.0,3.0},{1.0,2.0,4.0}});assertEquals(expected,m);BigDecimal[][]testDataPlus3=MatrixUtils.createBigMatrix(testDataPlus2).getData();m.setSubMatrix(testDataPlus3,0,0);expected=MatrixUtils.createBigMatrix(new double[][]{{3.0,4.0,5.0},{4.0,7.0,5.0},{3.0,2.0,10.0}});assertEquals(expected,m);BigMatrixImpl matrix=(BigMatrixImpl)MatrixUtils.createBigMatrix(new double[][]{{1,2,3,4},{5,6,7,8},{9,0,1,2}});matrix.setSubMatrix(new BigDecimal[][]{{new BigDecimal(3),new BigDecimal(4)},{new BigDecimal(5),new BigDecimal(6)}},1,1);expected=MatrixUtils.createBigMatrix(new BigDecimal[][]{{new BigDecimal(1),new BigDecimal(2),new BigDecimal(3),new BigDecimal(4)},{new BigDecimal(5),new BigDecimal(3),new BigDecimal(4),new BigDecimal(8)},{new BigDecimal(9),new BigDecimal(5),new BigDecimal(6),new BigDecimal(2)}});assertEquals(expected,matrix);try {m.setSubMatrix(matrix.getData(),1,1);fail(""expecting MatrixIndexException"");}catch(MatrixIndexException e){}try {m.setSubMatrix(null,1,1);fail(""expecting NullPointerException"");}catch(NullPointerException e){}try {m.setSubMatrix(new BigDecimal[][]{{new BigDecimal(1)},{new BigDecimal(2),new BigDecimal(3)}},0,0);fail(""expecting IllegalArgumentException"");}catch(IllegalArgumentException e){}try {m.setSubMatrix(new BigDecimal[][]{{}},0,0);fail(""expecting IllegalArgumentException"");}catch(IllegalArgumentException e){}}"
"org.apache.commons.math.estimation.MinpackTest.testMinpackLinearFullRank",0,"public void testMinpackLinearFullRank()throws EstimationException {minpackTest(new LinearFullRankFunction(10,5,1.0,5.0,2.23606797749979),false);minpackTest(new LinearFullRankFunction(50,5,1.0,8.06225774829855,6.70820393249937),false);}"
"org.apache.commons.math.estimation.MinpackTest.testMinpackLinearRank1",0,"public void testMinpackLinearRank1()throws EstimationException {minpackTest(new LinearRank1Function(10,5,1.0,291.521868819476,1.4638501094228),false);minpackTest(new LinearRank1Function(50,5,1.0,3101.60039334535,3.48263016573496),false);}"
"org.apache.commons.math.estimation.MinpackTest.testMinpackLinearRank1ZeroColsAndRows",0,"public void testMinpackLinearRank1ZeroColsAndRows()throws EstimationException {minpackTest(new LinearRank1ZeroColsAndRowsFunction(10,5,1.0),false);minpackTest(new LinearRank1ZeroColsAndRowsFunction(50,5,1.0),false);}"
"org.apache.commons.math.estimation.MinpackTest.testMinpackRosenbrok",0,"public void testMinpackRosenbrok()throws EstimationException {minpackTest(new RosenbrockFunction(new double[]{-1.2,1.0},Math.sqrt(24.2)),false);minpackTest(new RosenbrockFunction(new double[]{-12.0,10.0},Math.sqrt(1795769.0)),false);minpackTest(new RosenbrockFunction(new double[]{-120.0,100.0},11.0 * Math.sqrt(169000121.0)),false);}"
"org.apache.commons.math.estimation.MinpackTest.testMinpackHelicalValley",0,"public void testMinpackHelicalValley()throws EstimationException {minpackTest(new HelicalValleyFunction(new double[]{-1.0,0.0,0.0},50.0),false);minpackTest(new HelicalValleyFunction(new double[]{-10.0,0.0,0.0},102.95630140987),false);minpackTest(new HelicalValleyFunction(new double[]{-100.0,0.0,0.0},991.261822123701),false);}"
"org.apache.commons.math.estimation.MinpackTest.testMinpackPowellSingular",0,"public void testMinpackPowellSingular()throws EstimationException {minpackTest(new PowellSingularFunction(new double[]{3.0,-1.0,0.0,1.0},14.6628782986152),false);minpackTest(new PowellSingularFunction(new double[]{30.0,-10.0,0.0,10.0},1270.9838708654),false);minpackTest(new PowellSingularFunction(new double[]{300.0,-100.0,0.0,100.0},126887.903284750),false);}"
"org.apache.commons.math.estimation.MinpackTest.testMinpackFreudensteinRoth",0,"public void testMinpackFreudensteinRoth()throws EstimationException {minpackTest(new FreudensteinRothFunction(new double[]{0.5,-2.0},20.0124960961895,6.99887517584575,new double[]{11.4124844654993,-0.896827913731509}),false);minpackTest(new FreudensteinRothFunction(new double[]{5.0,-20.0},12432.833948863,6.9988751744895,new double[]{11.4130046614746,-0.896796038685958}),false);minpackTest(new FreudensteinRothFunction(new double[]{50.0,-200.0},11426454.595762,6.99887517242903,new double[]{11.4127817857886,-0.89680510749204}),false);}"
"org.apache.commons.math.estimation.MinpackTest.testMinpackBard",0,"public void testMinpackBard()throws EstimationException {minpackTest(new BardFunction(1.0,6.45613629515967,0.0906359603390466,new double[]{0.0824105765758334,1.1330366534715,2.34369463894115}),false);minpackTest(new BardFunction(10.0,36.1418531596785,4.17476870138539,new double[]{0.840666673818329,-158848033.259565,-164378671.653535}),false);minpackTest(new BardFunction(100.0,384.114678637399,4.17476870135969,new double[]{0.840666673867645,-158946167.205518,-164464906.857771}),false);}"
"org.apache.commons.math.estimation.MinpackTest.testMinpackKowalikOsborne",0,"public void testMinpackKowalikOsborne()throws EstimationException {minpackTest(new KowalikOsborneFunction(new double[]{0.25,0.39,0.415,0.39},0.0728915102882945,0.017535837721129,new double[]{0.192807810476249,0.191262653354071,0.123052801046931,0.136053221150517}),false);minpackTest(new KowalikOsborneFunction(new double[]{2.5,3.9,4.15,3.9},2.97937007555202,0.032052192917937,new double[]{728675.473768287,-14.0758803129393,-32977797.7841797,-20571594.1977912}),false);minpackTest(new KowalikOsborneFunction(new double[]{25.0,39.0,41.5,39.0},29.9590617016037,0.0175364017658228,new double[]{0.192948328597594,0.188053165007911,0.122430604321144,0.134575665392506}),true);}"
"org.apache.commons.math.estimation.MinpackTest.testMinpackMeyer",0,"public void testMinpackMeyer()throws EstimationException {minpackTest(new MeyerFunction(new double[]{0.02,4000.0,250.0},41153.4665543031,9.37794514651874,new double[]{0.00560963647102661,6181.34634628659,345.223634624144}),false);minpackTest(new MeyerFunction(new double[]{0.2,40000.0,2500.0},4168216.89130846,792.917871779501,new double[]{1.42367074157994e-11,33695.7133432541,901.268527953801}),true);}"
"org.apache.commons.math.estimation.MinpackTest.testMinpackWatson",0,"public void testMinpackWatson()throws EstimationException {minpackTest(new WatsonFunction(6,0.0,5.47722557505166,0.0478295939097601,new double[]{-0.0157249615083782,1.01243488232965,-0.232991722387673,1.26043101102818,-1.51373031394421,0.99299727291842}),false);minpackTest(new WatsonFunction(6,10.0,6433.12578950026,0.0478295939096951,new double[]{-0.0157251901386677,1.01243485860105,-0.232991545843829,1.26042932089163,-1.51372776706575,0.99299573426328}),false);minpackTest(new WatsonFunction(6,100.0,674256.040605213,0.047829593911544,new double[]{-0.0157247019712586,1.01243490925658,-0.232991922761641,1.26043292929555,-1.51373320452707,0.99299901922322}),false);minpackTest(new WatsonFunction(9,0.0,5.47722557505166,0.00118311459212420,new double[]{-0.153070644166722e-4,0.999789703934597,0.0147639634910978,0.146342330145992,1.00082109454817,-2.61773112070507,4.10440313943354,-3.14361226236241,1.05262640378759}),false);minpackTest(new WatsonFunction(9,10.0,12088.127069307,0.00118311459212513,new double[]{-0.153071334849279e-4,0.999789703941234,0.0147639629786217,0.146342334818836,1.00082107321386,-2.61773107084722,4.10440307655564,-3.14361222178686,1.05262639322589}),false);minpackTest(new WatsonFunction(9,100.0,1269109.29043834,0.00118311459212384,new double[]{-0.153069523352176e-4,0.999789703958371,0.0147639625185392,0.146342341096326,1.00082104729164,-2.61773101573645,4.10440301427286,-3.14361218602503,1.05262638516774}),false);minpackTest(new WatsonFunction(12,0.0,5.47722557505166,0.217310402535861e-4,new double[]{-0.660266001396382e-8,1.00000164411833,-0.000563932146980154,0.347820540050756,-0.156731500244233,1.05281515825593,-3.24727109519451,7.2884347837505,-10.271848098614,9.07411353715783,-4.54137541918194,1.01201187975044}),false);minpackTest(new WatsonFunction(12,10.0,19220.7589790951,0.217310402518509e-4,new double[]{-0.663710223017410e-8,1.00000164411787,-0.000563932208347327,0.347820540486998,-0.156731503955652,1.05281517654573,-3.2472711515214,7.28843489430665,-10.2718482369638,9.07411364383733,-4.54137546533666,1.01201188830857}),false);minpackTest(new WatsonFunction(12,100.0,2018918.04462367,0.217310402539845e-4,new double[]{-0.663806046485249e-8,1.00000164411786,-0.000563932210324959,0.347820540503588,-0.156731504091375,1.05281517718031,-3.24727115337025,7.28843489775302,-10.2718482410813,9.07411364688464,-4.54137546660822,1.0120118885369}),false);}"
"org.apache.commons.math.estimation.MinpackTest.testMinpackBox3Dimensional",0,"public void testMinpackBox3Dimensional()throws EstimationException {minpackTest(new Box3DimensionalFunction(10,new double[]{0.0,10.0,20.0},32.1115837449572),false);}"
"org.apache.commons.math.estimation.MinpackTest.testMinpackJennrichSampson",0,"public void testMinpackJennrichSampson()throws EstimationException {minpackTest(new JennrichSampsonFunction(10,new double[]{0.3,0.4},64.5856498144943,11.1517793413499,new double[]{0.257819926636811,0.257829976764542}),false);}"
"org.apache.commons.math.estimation.MinpackTest.testMinpackBrownDennis",0,"public void testMinpackBrownDennis()throws EstimationException {minpackTest(new BrownDennisFunction(20,new double[]{25.0,5.0,-5.0,-1.0},2815.43839161816,292.954288244866,new double[]{-11.59125141003,13.2024883984741,-0.403574643314272,0.236736269844604}),false);minpackTest(new BrownDennisFunction(20,new double[]{250.0,50.0,-50.0,-10.0},555073.354173069,292.954270581415,new double[]{-11.5959274272203,13.2041866926242,-0.403417362841545,0.236771143410386}),false);minpackTest(new BrownDennisFunction(20,new double[]{2500.0,500.0,-500.0,-100.0},61211252.2338581,292.954306151134,new double[]{-11.5902596937374,13.2020628854665,-0.403688070279258,0.236665033746463}),false);}"
"org.apache.commons.math.estimation.MinpackTest.testMinpackChebyquad",0,"public void testMinpackChebyquad()throws EstimationException {minpackTest(new ChebyquadFunction(1,8,1.0,1.88623796907732,1.88623796907732,new double[]{0.5}),false);minpackTest(new ChebyquadFunction(1,8,10.0,5383344372.34005,1.88424820499951,new double[]{0.9817314924684}),false);minpackTest(new ChebyquadFunction(1,8,100.0,0.118088726698392e19,1.88424820499347,new double[]{0.9817314852934}),false);minpackTest(new ChebyquadFunction(8,8,1.0,0.196513862833975,0.0593032355046727,new double[]{0.0431536648587336,0.193091637843267,0.266328593812698,0.499999334628884,0.500000665371116,0.733671406187302,0.806908362156733,0.956846335141266}),false);minpackTest(new ChebyquadFunction(9,9,1.0,0.16994993465202,0.0,new double[]{0.0442053461357828,0.199490672309881,0.23561910847106,0.416046907892598,0.5,0.583953092107402,0.764380891528940,0.800509327690119,0.955794653864217}),false);minpackTest(new ChebyquadFunction(10,10,1.0,0.183747831178711,0.0806471004038253,new double[]{0.0596202671753563,0.166708783805937,0.239171018813509,0.398885290346268,0.398883667870681,0.601116332129320,0.60111470965373,0.760828981186491,0.833291216194063,0.940379732824644}),false);}"
"org.apache.commons.math.estimation.MinpackTest.testMinpackBrownAlmostLinear",0,"public void testMinpackBrownAlmostLinear()throws EstimationException {minpackTest(new BrownAlmostLinearFunction(10,0.5,16.5302162063499,0.0,new double[]{0.979430303349862,0.979430303349862,0.979430303349862,0.979430303349862,0.979430303349862,0.979430303349862,0.979430303349862,0.979430303349862,0.979430303349862,1.20569696650138}),false);minpackTest(new BrownAlmostLinearFunction(10,5.0,9765624.00089211,0.0,new double[]{0.979430303349865,0.979430303349865,0.979430303349865,0.979430303349865,0.979430303349865,0.979430303349865,0.979430303349865,0.979430303349865,0.979430303349865,1.20569696650135}),false);minpackTest(new BrownAlmostLinearFunction(10,50.0,0.9765625e17,0.0,new double[]{1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0}),false);minpackTest(new BrownAlmostLinearFunction(30,0.5,83.476044467848,0.0,new double[]{}),false);minpackTest(new BrownAlmostLinearFunction(40,0.5,128.026364472323,0.0,new double[]{}),false);}"
"org.apache.commons.math.estimation.MinpackTest.testMinpackOsborne1",0,"public void testMinpackOsborne1()throws EstimationException {minpackTest(new Osborne1Function(new double[]{0.5,1.5,-1.0,0.01,0.02},0.937564021037838,0.00739249260904843,new double[]{0.375410049244025,1.93584654543108,-1.46468676748716,0.0128675339110439,0.0221227011813076}),false);}"
"org.apache.commons.math.estimation.MinpackTest.testMinpackOsborne2",0,"public void testMinpackOsborne2()throws EstimationException {minpackTest(new Osborne2Function(new double[]{1.3,0.65,0.65,0.7,0.6,3.0,5.0,7.0,2.0,4.5,5.5},1.44686540984712,0.20034404483314,new double[]{1.30997663810096,0.43155248076,0.633661261602859,0.599428560991695,0.754179768272449,0.904300082378518,1.36579949521007,4.82373199748107,2.39868475104871,4.56887554791452,5.67534206273052}),false);}"
"org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testDimensionCheck",0,"public void testDimensionCheck(){try {TestProblem1 pb=new TestProblem1();new ThreeEighthesIntegrator(0.01).integrate(pb,0.0,new double[pb.getDimension()+ 10],1.0,new double[pb.getDimension()+ 10]);fail(""an exception should have been thrown"");}catch(DerivativeException de){fail(""wrong exception caught"");}catch(IntegratorException ie){}}"
"org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testDecreasingSteps",0,"public void testDecreasingSteps()throws DerivativeException,IntegratorException {TestProblemAbstract[]problems=TestProblemFactory.getProblems();for (int k=0;k < problems.length;++k){double previousError=Double.NaN;for (int i=4;i < 10;++i){TestProblemAbstract pb=(TestProblemAbstract)problems[k].clone();double step=(pb.getFinalTime()- pb.getInitialTime())* Math.pow(2.0,-i);FirstOrderIntegrator integ=new ThreeEighthesIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);EventHandler[]functions=pb.getEventsHandlers();for (int l=0;l < functions.length;++l){integ.addEventHandler(functions[l],Double.POSITIVE_INFINITY,1.0e-6 * step,1000);}double stopTime=integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);if (functions.length == 0){assertEquals(pb.getFinalTime(),stopTime,1.0e-10);}double error=handler.getMaximalValueError();if (i > 4){assertTrue(error < Math.abs(previousError));}previousError=error;assertEquals(0,handler.getMaximalTimeError(),1.0e-12);}}}"
"org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testSmallStep",0,"public void testSmallStep()throws DerivativeException,IntegratorException {TestProblem1 pb=new TestProblem1();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.001;FirstOrderIntegrator integ=new ThreeEighthesIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.getLastError()< 2.0e-13);assertTrue(handler.getMaximalValueError()< 4.0e-12);assertEquals(0,handler.getMaximalTimeError(),1.0e-12);assertEquals(""3/8"",integ.getName());}"
"org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testBigStep",0,"public void testBigStep()throws DerivativeException,IntegratorException {TestProblem1 pb=new TestProblem1();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.2;FirstOrderIntegrator integ=new ThreeEighthesIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.getLastError()> 0.0004);assertTrue(handler.getMaximalValueError()> 0.005);assertEquals(0,handler.getMaximalTimeError(),1.0e-12);}"
"org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testBackward",0,"public void testBackward()throws DerivativeException,IntegratorException {TestProblem5 pb=new TestProblem5();double step=Math.abs(pb.getFinalTime()- pb.getInitialTime())* 0.001;FirstOrderIntegrator integ=new ThreeEighthesIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);assertTrue(handler.getLastError()< 5.0e-10);assertTrue(handler.getMaximalValueError()< 7.0e-10);assertEquals(0,handler.getMaximalTimeError(),1.0e-12);assertEquals(""3/8"",integ.getName());}"
"org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testKepler",0,"public void testKepler()throws DerivativeException,IntegratorException {final TestProblem3 pb=new TestProblem3(0.9);double step=(pb.getFinalTime()- pb.getInitialTime())* 0.0003;FirstOrderIntegrator integ=new ThreeEighthesIntegrator(step);integ.addStepHandler(new KeplerHandler(pb));integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);}"
"org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testStepSize",0,"public void testStepSize()throws DerivativeException,IntegratorException {final double step=1.23456;FirstOrderIntegrator integ=new ThreeEighthesIntegrator(step);integ.addStepHandler(new StepHandler(){private static final long serialVersionUID=0L;public void handleStep(StepInterpolator interpolator,boolean isLast){if (!isLast){assertEquals(step,interpolator.getCurrentTime()- interpolator.getPreviousTime(),1.0e-12);}}public boolean requiresDenseOutput(){return false;}public void reset(){}});integ.integrate(new FirstOrderDifferentialEquations(){private static final long serialVersionUID=0L;public void computeDerivatives(double t,double[]y,double[]dot){dot[0]=1.0;}public int getDimension(){return 1;}},0.0,new double[]{0.0},5.0,new double[1]);}"
"org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquare",0,"public void testChiSquare()throws Exception {long[]observed={10,9,11};double[]expected={10,10,10};assertEquals(""chi-square statistic"",0.2,TestUtils.chiSquare(expected,observed),10E-12);assertEquals(""chi-square p-value"",0.904837418036,TestUtils.chiSquareTest(expected,observed),1E-10);long[]observed1={500,623,72,70,31};double[]expected1={485,541,82,61,37};assertEquals(""chi-square test statistic"",9.023307936427388,TestUtils.chiSquare(expected1,observed1),1E-10);assertEquals(""chi-square p-value"",0.06051952647453607,TestUtils.chiSquareTest(expected1,observed1),1E-9);assertTrue(""chi-square test reject"",TestUtils.chiSquareTest(expected1,observed1,0.07));assertTrue(""chi-square test accept"",!TestUtils.chiSquareTest(expected1,observed1,0.05));try {TestUtils.chiSquareTest(expected1,observed1,95);fail(""alpha out of range,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}long[]tooShortObs={0};double[]tooShortEx={1};try {TestUtils.chiSquare(tooShortEx,tooShortObs);fail(""arguments too short,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}long[]unMatchedObs={0,1,2,3};double[]unMatchedEx={1,1,2};try {TestUtils.chiSquare(unMatchedEx,unMatchedObs);fail(""arrays have different lengths,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}expected[0]=0;try {TestUtils.chiSquareTest(expected,observed,.01);fail(""bad expected count,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}expected[0]=1;observed[0]=-1;try {TestUtils.chiSquareTest(expected,observed,.01);fail(""bad expected count,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareIndependence",0,"public void testChiSquareIndependence()throws Exception {long[][]counts={{40,22,43},{91,21,28},{60,10,22}};assertEquals(""chi-square test statistic"",22.709027688,TestUtils.chiSquare(counts),1E-9);assertEquals(""chi-square p-value"",0.000144751460134,TestUtils.chiSquareTest(counts),1E-9);assertTrue(""chi-square test reject"",TestUtils.chiSquareTest(counts,0.0002));assertTrue(""chi-square test accept"",!TestUtils.chiSquareTest(counts,0.0001));long[][]counts2={{10,15},{30,40},{60,90}};assertEquals(""chi-square test statistic"",0.168965517241,TestUtils.chiSquare(counts2),1E-9);assertEquals(""chi-square p-value"",0.918987499852,TestUtils.chiSquareTest(counts2),1E-9);assertTrue(""chi-square test accept"",!TestUtils.chiSquareTest(counts2,0.1));long[][]counts3={{40,22,43},{91,21,28},{60,10}};try {TestUtils.chiSquare(counts3);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}long[][]counts4={{40,22,43}};try {TestUtils.chiSquare(counts4);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}long[][]counts5={{40},{40},{30},{10}};try {TestUtils.chiSquare(counts5);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}long[][]counts6={{10,-2},{30,40},{60,90}};try {TestUtils.chiSquare(counts6);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}try {TestUtils.chiSquareTest(counts,0);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareLargeTestStatistic",0,"public void testChiSquareLargeTestStatistic()throws Exception {double[]exp=new double[]{3389119.5,649136.6,285745.4,25357364.76,11291189.78,543628.0,232921.0,437665.75};long[]obs=new long[]{2372383,584222,257170,17750155,7903832,489265,209628,393899};org.apache.commons.math.stat.inference.ChiSquareTestImpl csti=new org.apache.commons.math.stat.inference.ChiSquareTestImpl();double cst=csti.chiSquareTest(exp,obs);assertEquals(""chi-square p-value"",0.0,cst,1E-3);assertEquals(""chi-square test statistic"",114875.90421929007,TestUtils.chiSquare(exp,obs),1E-9);}"
"org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareZeroCount",0,"/** * Contingency table containing zeros - PR # 32531 */public void testChiSquareZeroCount()throws Exception {long[][]counts={{40,0,4},{91,1,2},{60,2,0}};assertEquals(""chi-square test statistic"",9.67444662263,TestUtils.chiSquare(counts),1E-9);assertEquals(""chi-square p-value"",0.0462835770603,TestUtils.chiSquareTest(counts),1E-9);}"
"org.apache.commons.math.stat.inference.TestUtilsTest.testOneSampleT",0,"public void testOneSampleT()throws Exception {double[]observed={93.0,103.0,95.0,101.0,91.0,105.0,96.0,94.0,101.0,88.0,98.0,94.0,101.0,92.0,95.0};double mu=100.0;SummaryStatistics sampleStats=null;sampleStats=new SummaryStatistics();for (int i=0;i < observed.length;i++){sampleStats.addValue(observed[i]);}assertEquals(""t statistic"",-2.81976445346,TestUtils.t(mu,observed),10E-10);assertEquals(""t statistic"",-2.81976445346,TestUtils.t(mu,sampleStats),10E-10);assertEquals(""p value"",0.0136390585873,TestUtils.tTest(mu,observed),10E-10);assertEquals(""p value"",0.0136390585873,TestUtils.tTest(mu,sampleStats),10E-10);try {TestUtils.t(mu,(double[])null);fail(""arguments too short,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {TestUtils.t(mu,(SummaryStatistics)null);fail(""arguments too short,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {TestUtils.t(mu,emptyObs);fail(""arguments too short,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {TestUtils.t(mu,emptyStats);fail(""arguments too short,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {TestUtils.t(mu,tooShortObs);fail(""insufficient data to compute t statistic,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {TestUtils.tTest(mu,tooShortObs);fail(""insufficient data to perform t test,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {TestUtils.t(mu,(SummaryStatistics)null);fail(""insufficient data to compute t statistic,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {TestUtils.tTest(mu,(SummaryStatistics)null);fail(""insufficient data to perform t test,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.stat.inference.TestUtilsTest.testOneSampleTTest",0,"public void testOneSampleTTest()throws Exception {double[]oneSidedP={2d,0d,6d,6d,3d,3d,2d,3d,-6d,6d,6d,6d,3d,0d,1d,1d,0d,2d,3d,3d};SummaryStatistics oneSidedPStats=new SummaryStatistics();for (int i=0;i < oneSidedP.length;i++){oneSidedPStats.addValue(oneSidedP[i]);}assertEquals(""one sample t stat"",3.86485535541,TestUtils.t(0d,oneSidedP),10E-10);assertEquals(""one sample t stat"",3.86485535541,TestUtils.t(0d,oneSidedPStats),1E-10);assertEquals(""one sample p value"",0.000521637019637,TestUtils.tTest(0d,oneSidedP)/ 2d,10E-10);assertEquals(""one sample p value"",0.000521637019637,TestUtils.tTest(0d,oneSidedPStats)/ 2d,10E-5);assertTrue(""one sample t-test reject"",TestUtils.tTest(0d,oneSidedP,0.01));assertTrue(""one sample t-test reject"",TestUtils.tTest(0d,oneSidedPStats,0.01));assertTrue(""one sample t-test accept"",!TestUtils.tTest(0d,oneSidedP,0.0001));assertTrue(""one sample t-test accept"",!TestUtils.tTest(0d,oneSidedPStats,0.0001));try {TestUtils.tTest(0d,oneSidedP,95);fail(""alpha out of range,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {TestUtils.tTest(0d,oneSidedPStats,95);fail(""alpha out of range,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.stat.inference.TestUtilsTest.testTwoSampleTHeterscedastic",0,"public void testTwoSampleTHeterscedastic()throws Exception {double[]sample1={7d,-4d,18d,17d,-3d,-5d,1d,10d,11d,-2d};double[]sample2={-1d,12d,-1d,-3d,3d,-5d,5d,2d,-11d,-1d,-3d};SummaryStatistics sampleStats1=new SummaryStatistics();for (int i=0;i < sample1.length;i++){sampleStats1.addValue(sample1[i]);}SummaryStatistics sampleStats2=new SummaryStatistics();for (int i=0;i < sample2.length;i++){sampleStats2.addValue(sample2[i]);}assertEquals(""two sample heteroscedastic t stat"",1.60371728768,TestUtils.t(sample1,sample2),1E-10);assertEquals(""two sample heteroscedastic t stat"",1.60371728768,TestUtils.t(sampleStats1,sampleStats2),1E-10);assertEquals(""two sample heteroscedastic p value"",0.128839369622,TestUtils.tTest(sample1,sample2),1E-10);assertEquals(""two sample heteroscedastic p value"",0.128839369622,TestUtils.tTest(sampleStats1,sampleStats2),1E-10);assertTrue(""two sample heteroscedastic t-test reject"",TestUtils.tTest(sample1,sample2,0.2));assertTrue(""two sample heteroscedastic t-test reject"",TestUtils.tTest(sampleStats1,sampleStats2,0.2));assertTrue(""two sample heteroscedastic t-test accept"",!TestUtils.tTest(sample1,sample2,0.1));assertTrue(""two sample heteroscedastic t-test accept"",!TestUtils.tTest(sampleStats1,sampleStats2,0.1));try {TestUtils.tTest(sample1,sample2,.95);fail(""alpha out of range,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {TestUtils.tTest(sampleStats1,sampleStats2,.95);fail(""alpha out of range,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {TestUtils.tTest(sample1,tooShortObs,.01);fail(""insufficient data,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {TestUtils.tTest(sampleStats1,(SummaryStatistics)null,.01);fail(""insufficient data,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {TestUtils.tTest(sample1,tooShortObs);fail(""insufficient data,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {TestUtils.tTest(sampleStats1,(SummaryStatistics)null);fail(""insufficient data,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {TestUtils.t(sample1,tooShortObs);fail(""insufficient data,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}try {TestUtils.t(sampleStats1,(SummaryStatistics)null);fail(""insufficient data,IllegalArgumentException expected"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math.stat.inference.TestUtilsTest.testTwoSampleTHomoscedastic",0,"public void testTwoSampleTHomoscedastic()throws Exception {double[]sample1={2,4,6,8,10,97};double[]sample2={4,6,8,10,16};SummaryStatistics sampleStats1=new SummaryStatistics();for (int i=0;i < sample1.length;i++){sampleStats1.addValue(sample1[i]);}SummaryStatistics sampleStats2=new SummaryStatistics();for (int i=0;i < sample2.length;i++){sampleStats2.addValue(sample2[i]);}assertEquals(""two sample homoscedastic t stat"",0.73096310086,TestUtils.homoscedasticT(sample1,sample2),10E-11);assertEquals(""two sample homoscedastic p value"",0.4833963785,TestUtils.homoscedasticTTest(sampleStats1,sampleStats2),1E-10);assertTrue(""two sample homoscedastic t-test reject"",TestUtils.homoscedasticTTest(sample1,sample2,0.49));assertTrue(""two sample homoscedastic t-test accept"",!TestUtils.homoscedasticTTest(sample1,sample2,0.48));}"
"org.apache.commons.math.stat.inference.TestUtilsTest.testSmallSamples",0,"public void testSmallSamples()throws Exception {double[]sample1={1d,3d};double[]sample2={4d,5d};assertEquals(-2.2360679775,TestUtils.t(sample1,sample2),1E-10);assertEquals(0.198727388935,TestUtils.tTest(sample1,sample2),1E-10);}"
"org.apache.commons.math.stat.inference.TestUtilsTest.testPaired",0,"public void testPaired()throws Exception {double[]sample1={1d,3d,5d,7d};double[]sample2={0d,6d,11d,2d};double[]sample3={5d,7d,8d,10d};assertEquals(-0.3133,TestUtils.pairedT(sample1,sample2),1E-4);assertEquals(0.774544295819,TestUtils.pairedTTest(sample1,sample2),1E-10);assertEquals(0.001208,TestUtils.pairedTTest(sample1,sample3),1E-6);assertFalse(TestUtils.pairedTTest(sample1,sample3,.001));assertTrue(TestUtils.pairedTTest(sample1,sample3,.002));}"
"org.apache.commons.math.stat.inference.TestUtilsTest.testOneWayAnovaUtils",0,"public void testOneWayAnovaUtils()throws Exception {classes.add(classA);classes.add(classB);classes.add(classC);assertEquals(oneWayAnova.anovaFValue(classes),TestUtils.oneWayAnovaFValue(classes),10E-12);assertEquals(oneWayAnova.anovaPValue(classes),TestUtils.oneWayAnovaPValue(classes),10E-12);assertEquals(oneWayAnova.anovaTest(classes,0.01),TestUtils.oneWayAnovaTest(classes,0.01));}"
"org.apache.commons.math.stat.regression.SimpleRegressionTest.testNorris",0,"public void testNorris(){SimpleRegression regression=new SimpleRegression();for (int i=0;i < data.length;i++){regression.addData(data[i][1],data[i][0]);}assertEquals(""slope"",1.00211681802045,regression.getSlope(),10E-12);assertEquals(""slope std err"",0.429796848199937E-03,regression.getSlopeStdErr(),10E-12);assertEquals(""number of observations"",36,regression.getN());assertEquals(""intercept"",-0.262323073774029,regression.getIntercept(),10E-12);assertEquals(""std err intercept"",0.232818234301152,regression.getInterceptStdErr(),10E-12);assertEquals(""r-square"",0.999993745883712,regression.getRSquare(),10E-12);assertEquals(""SSR"",4255954.13232369,regression.getRegressionSumSquares(),10E-9);assertEquals(""MSE"",0.782864662630069,regression.getMeanSquareError(),10E-10);assertEquals(""SSE"",26.6173985294224,regression.getSumSquaredErrors(),10E-9);assertEquals(""predict(0)"",-0.262323073774029,regression.predict(0),10E-12);assertEquals(""predict(1)"",1.00211681802045 - 0.262323073774029,regression.predict(1),10E-12);}"
"org.apache.commons.math.stat.regression.SimpleRegressionTest.testCorr",0,"public void testCorr(){SimpleRegression regression=new SimpleRegression();regression.addData(corrData);assertEquals(""number of observations"",17,regression.getN());assertEquals(""r-square"",.896123,regression.getRSquare(),10E-6);assertEquals(""r"",-0.94663767742,regression.getR(),1E-10);}"
"org.apache.commons.math.stat.regression.SimpleRegressionTest.testNaNs",0,"public void testNaNs(){SimpleRegression regression=new SimpleRegression();assertTrue(""intercept not NaN"",Double.isNaN(regression.getIntercept()));assertTrue(""slope not NaN"",Double.isNaN(regression.getSlope()));assertTrue(""slope std err not NaN"",Double.isNaN(regression.getSlopeStdErr()));assertTrue(""intercept std err not NaN"",Double.isNaN(regression.getInterceptStdErr()));assertTrue(""MSE not NaN"",Double.isNaN(regression.getMeanSquareError()));assertTrue(""e not NaN"",Double.isNaN(regression.getR()));assertTrue(""r-square not NaN"",Double.isNaN(regression.getRSquare()));assertTrue(""RSS not NaN"",Double.isNaN(regression.getRegressionSumSquares()));assertTrue(""SSE not NaN"",Double.isNaN(regression.getSumSquaredErrors()));assertTrue(""SSTO not NaN"",Double.isNaN(regression.getTotalSumSquares()));assertTrue(""predict not NaN"",Double.isNaN(regression.predict(0)));regression.addData(1,2);regression.addData(1,3);assertTrue(""intercept not NaN"",Double.isNaN(regression.getIntercept()));assertTrue(""slope not NaN"",Double.isNaN(regression.getSlope()));assertTrue(""slope std err not NaN"",Double.isNaN(regression.getSlopeStdErr()));assertTrue(""intercept std err not NaN"",Double.isNaN(regression.getInterceptStdErr()));assertTrue(""MSE not NaN"",Double.isNaN(regression.getMeanSquareError()));assertTrue(""e not NaN"",Double.isNaN(regression.getR()));assertTrue(""r-square not NaN"",Double.isNaN(regression.getRSquare()));assertTrue(""RSS not NaN"",Double.isNaN(regression.getRegressionSumSquares()));assertTrue(""SSE not NaN"",Double.isNaN(regression.getSumSquaredErrors()));assertTrue(""predict not NaN"",Double.isNaN(regression.predict(0)));assertTrue(""SSTO NaN"",!Double.isNaN(regression.getTotalSumSquares()));regression=new SimpleRegression();regression.addData(1,2);regression.addData(3,3);assertTrue(""interceptNaN"",!Double.isNaN(regression.getIntercept()));assertTrue(""slope NaN"",!Double.isNaN(regression.getSlope()));assertTrue(""slope std err not NaN"",Double.isNaN(regression.getSlopeStdErr()));assertTrue(""intercept std err not NaN"",Double.isNaN(regression.getInterceptStdErr()));assertTrue(""MSE not NaN"",Double.isNaN(regression.getMeanSquareError()));assertTrue(""r NaN"",!Double.isNaN(regression.getR()));assertTrue(""r-square NaN"",!Double.isNaN(regression.getRSquare()));assertTrue(""RSS NaN"",!Double.isNaN(regression.getRegressionSumSquares()));assertTrue(""SSE NaN"",!Double.isNaN(regression.getSumSquaredErrors()));assertTrue(""SSTO NaN"",!Double.isNaN(regression.getTotalSumSquares()));assertTrue(""predict NaN"",!Double.isNaN(regression.predict(0)));regression.addData(1,4);assertTrue(""MSE NaN"",!Double.isNaN(regression.getMeanSquareError()));assertTrue(""slope std err NaN"",!Double.isNaN(regression.getSlopeStdErr()));assertTrue(""intercept std err NaN"",!Double.isNaN(regression.getInterceptStdErr()));}"
"org.apache.commons.math.stat.regression.SimpleRegressionTest.testClear",0,"public void testClear(){SimpleRegression regression=new SimpleRegression();regression.addData(corrData);assertEquals(""number of observations"",17,regression.getN());regression.clear();assertEquals(""number of observations"",0,regression.getN());regression.addData(corrData);assertEquals(""r-square"",.896123,regression.getRSquare(),10E-6);regression.addData(data);assertEquals(""number of observations"",53,regression.getN());}"
"org.apache.commons.math.stat.regression.SimpleRegressionTest.testInference",0,"public void testInference()throws Exception {SimpleRegression regression=new SimpleRegression();regression.addData(infData);assertEquals(""slope std err"",0.011448491,regression.getSlopeStdErr(),1E-10);assertEquals(""std err intercept"",0.286036932,regression.getInterceptStdErr(),1E-8);assertEquals(""significance"",4.596e-07,regression.getSignificance(),1E-8);assertEquals(""slope conf interval half-width"",0.0270713794287,regression.getSlopeConfidenceInterval(),1E-8);regression=new SimpleRegression();regression.addData(infData2);assertEquals(""slope std err"",1.07260253,regression.getSlopeStdErr(),1E-8);assertEquals(""std err intercept"",4.17718672,regression.getInterceptStdErr(),1E-8);assertEquals(""significance"",0.261829133982,regression.getSignificance(),1E-11);assertEquals(""slope conf interval half-width"",2.97802204827,regression.getSlopeConfidenceInterval(),1E-8);assertTrue(""tighter means wider"",regression.getSlopeConfidenceInterval()< regression.getSlopeConfidenceInterval(0.01));try {regression.getSlopeConfidenceInterval(1);fail(""expecting IllegalArgumentException for alpha = 1"");}catch(IllegalArgumentException ex){;}}"
"org.apache.commons.math.stat.regression.SimpleRegressionTest.testPerfect",0,"public void testPerfect()throws Exception {SimpleRegression regression=new SimpleRegression();int n=100;for (int i=0;i < n;i++){regression.addData(((double)i)/ (n - 1),i);}assertEquals(0.0,regression.getSignificance(),1.0e-5);assertTrue(regression.getSlope()> 0.0);assertTrue(regression.getSumSquaredErrors()>= 0.0);}"
"org.apache.commons.math.stat.regression.SimpleRegressionTest.testPerfectNegative",0,"public void testPerfectNegative()throws Exception {SimpleRegression regression=new SimpleRegression();int n=100;for (int i=0;i < n;i++){regression.addData(-((double)i)/ (n - 1),i);}assertEquals(0.0,regression.getSignificance(),1.0e-5);assertTrue(regression.getSlope()< 0.0);}"
"org.apache.commons.math.stat.regression.SimpleRegressionTest.testRandom",0,"public void testRandom()throws Exception {SimpleRegression regression=new SimpleRegression();Random random=new Random(1);int n=100;for (int i=0;i < n;i++){regression.addData(((double)i)/ (n - 1),random.nextDouble());}assertTrue(0.0 < regression.getSignificance()&& regression.getSignificance()< 1.0);}"
"org.apache.commons.math.stat.regression.SimpleRegressionTest.testSSENonNegative",0,"public void testSSENonNegative(){double[]y={8915.102,8919.302,8923.502};double[]x={1.107178495E2,1.107264895E2,1.107351295E2};SimpleRegression reg=new SimpleRegression();for (int i=0;i < x.length;i++){reg.addData(x[i],y[i]);}assertTrue(reg.getSumSquaredErrors()>= 0.0);}"
"org.apache.commons.math.stat.regression.SimpleRegressionTest.testRemoveXY",0,"public void testRemoveXY()throws Exception {SimpleRegression regression=new SimpleRegression();regression.addData(infData);regression.removeData(removeX,removeY);regression.addData(removeX,removeY);assertEquals(""slope std err"",0.011448491,regression.getSlopeStdErr(),1E-10);assertEquals(""std err intercept"",0.286036932,regression.getInterceptStdErr(),1E-8);assertEquals(""significance"",4.596e-07,regression.getSignificance(),1E-8);assertEquals(""slope conf interval half-width"",0.0270713794287,regression.getSlopeConfidenceInterval(),1E-8);}"
"org.apache.commons.math.stat.regression.SimpleRegressionTest.testRemoveSingle",0,"public void testRemoveSingle()throws Exception {SimpleRegression regression=new SimpleRegression();regression.addData(infData);regression.removeData(removeSingle);regression.addData(removeSingle);assertEquals(""slope std err"",0.011448491,regression.getSlopeStdErr(),1E-10);assertEquals(""std err intercept"",0.286036932,regression.getInterceptStdErr(),1E-8);assertEquals(""significance"",4.596e-07,regression.getSignificance(),1E-8);assertEquals(""slope conf interval half-width"",0.0270713794287,regression.getSlopeConfidenceInterval(),1E-8);}"
"org.apache.commons.math.stat.regression.SimpleRegressionTest.testRemoveMultiple",0,"public void testRemoveMultiple()throws Exception {SimpleRegression regression=new SimpleRegression();regression.addData(infData);regression.removeData(removeMultiple);regression.addData(removeMultiple);assertEquals(""slope std err"",0.011448491,regression.getSlopeStdErr(),1E-10);assertEquals(""std err intercept"",0.286036932,regression.getInterceptStdErr(),1E-8);assertEquals(""significance"",4.596e-07,regression.getSignificance(),1E-8);assertEquals(""slope conf interval half-width"",0.0270713794287,regression.getSlopeConfidenceInterval(),1E-8);}"
"org.apache.commons.math.stat.regression.SimpleRegressionTest.testRemoveObsFromEmpty",0,"public void testRemoveObsFromEmpty(){SimpleRegression regression=new SimpleRegression();regression.removeData(removeX,removeY);assertEquals(regression.getN(),0);}"
"org.apache.commons.math.stat.regression.SimpleRegressionTest.testRemoveObsFromSingle",0,"public void testRemoveObsFromSingle(){SimpleRegression regression=new SimpleRegression();regression.addData(removeX,removeY);regression.removeData(removeX,removeY);assertEquals(regression.getN(),0);}"
"org.apache.commons.math.stat.regression.SimpleRegressionTest.testRemoveMultipleToEmpty",0,"public void testRemoveMultipleToEmpty(){SimpleRegression regression=new SimpleRegression();regression.addData(removeMultiple);regression.removeData(removeMultiple);assertEquals(regression.getN(),0);}"
"org.apache.commons.math.stat.regression.SimpleRegressionTest.testRemoveMultiplePastEmpty",0,"public void testRemoveMultiplePastEmpty(){SimpleRegression regression=new SimpleRegression();regression.addData(removeX,removeY);regression.removeData(removeMultiple);assertEquals(regression.getN(),0);}"
