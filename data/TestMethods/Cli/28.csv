test_case,faulty,test_code
"org.apache.commons.cli.CommandLineTest.testGetOptionProperties",0,"public void testGetOptionProperties()throws Exception {String[]args=new String[]{""-Dparam1=value1"",""-Dparam2=value2"",""-Dparam3"",""-Dparam4=value4"",""-D"",""--property"",""foo=bar""};Options options=new Options();options.addOption(OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D'));options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).withLongOpt(""property"").create());Parser parser=new GnuParser();CommandLine cl=parser.parse(options,args);Properties props=cl.getOptionProperties(""D"");assertNotNull(""null properties"",props);assertEquals(""number of properties in "" + props,4,props.size());assertEquals(""property 1"",""value1"",props.getProperty(""param1""));assertEquals(""property 2"",""value2"",props.getProperty(""param2""));assertEquals(""property 3"",""true"",props.getProperty(""param3""));assertEquals(""property 4"",""value4"",props.getProperty(""param4""));assertEquals(""property with long format"",""bar"",cl.getOptionProperties(""property"").getProperty(""foo""));}"
"org.apache.commons.cli.OptionTest.testClear",0,"public void testClear(){TestOption option=new TestOption(""x"",true,"""");assertEquals(0,option.getValuesList().size());option.addValue(""a"");assertEquals(1,option.getValuesList().size());option.clearValues();assertEquals(0,option.getValuesList().size());}"
"org.apache.commons.cli.OptionTest.testClone",0,"public void testClone()throws CloneNotSupportedException {TestOption a=new TestOption(""a"",true,"""");TestOption b=(TestOption)a.clone();assertEquals(a,b);assertNotSame(a,b);a.setDescription(""a"");assertEquals("""",b.getDescription());b.setArgs(2);b.addValue(""b1"");b.addValue(""b2"");assertEquals(1,a.getArgs());assertEquals(0,a.getValuesList().size());assertEquals(2,b.getValues().length);}"
"org.apache.commons.cli.OptionTest.testSubclass",0,"public void testSubclass()throws CloneNotSupportedException {Option option=new DefaultOption(""f"",""file"",""myfile.txt"");Option clone=(Option)option.clone();assertEquals(""myfile.txt"",clone.getValue());assertEquals(DefaultOption.class,clone.getClass());}"
"org.apache.commons.cli.OptionTest.testHasArgName",0,"public void testHasArgName(){Option option=new Option(""f"",null);option.setArgName(null);assertFalse(option.hasArgName());option.setArgName("""");assertFalse(option.hasArgName());option.setArgName(""file"");assertTrue(option.hasArgName());}"
"org.apache.commons.cli.OptionTest.testHasArgs",0,"public void testHasArgs(){Option option=new Option(""f"",null);option.setArgs(0);assertFalse(option.hasArgs());option.setArgs(1);assertFalse(option.hasArgs());option.setArgs(10);assertTrue(option.hasArgs());option.setArgs(Option.UNLIMITED_VALUES);assertTrue(option.hasArgs());option.setArgs(Option.UNINITIALIZED);assertFalse(option.hasArgs());}"
"org.apache.commons.cli.OptionTest.testGetValue",0,"public void testGetValue(){Option option=new Option(""f"",null);option.setArgs(Option.UNLIMITED_VALUES);assertEquals(""default"",option.getValue(""default""));assertEquals(null,option.getValue(0));option.addValueForProcessing(""foo"");assertEquals(""foo"",option.getValue());assertEquals(""foo"",option.getValue(0));assertEquals(""foo"",option.getValue(""default""));}"
"org.apache.commons.cli.BasicParserTest.testDoubleDash2",0,"public void testDoubleDash2()throws Exception {}"
"org.apache.commons.cli.BasicParserTest.testLongWithoutEqualSingleDash",0,"public void testLongWithoutEqualSingleDash()throws Exception {}"
"org.apache.commons.cli.BasicParserTest.testAmbiguousLongWithoutEqualSingleDash",0,"public void testAmbiguousLongWithoutEqualSingleDash()throws Exception {}"
"org.apache.commons.cli.BasicParserTest.testNegativeOption",0,"public void testNegativeOption()throws Exception {}"
"org.apache.commons.cli.BasicParserTest.testPropertiesOption1",0,"public void testPropertiesOption1()throws Exception {}"
"org.apache.commons.cli.BasicParserTest.testPropertiesOption2",0,"public void testPropertiesOption2()throws Exception {}"
"org.apache.commons.cli.BasicParserTest.testShortWithEqual",0,"public void testShortWithEqual()throws Exception {}"
"org.apache.commons.cli.BasicParserTest.testShortWithoutEqual",0,"public void testShortWithoutEqual()throws Exception {}"
"org.apache.commons.cli.BasicParserTest.testLongWithEqualDoubleDash",0,"public void testLongWithEqualDoubleDash()throws Exception {}"
"org.apache.commons.cli.BasicParserTest.testLongWithEqualSingleDash",0,"public void testLongWithEqualSingleDash()throws Exception {}"
"org.apache.commons.cli.BasicParserTest.testUnambiguousPartialLongOption1",0,"public void testUnambiguousPartialLongOption1()throws Exception {}"
"org.apache.commons.cli.BasicParserTest.testUnambiguousPartialLongOption2",0,"public void testUnambiguousPartialLongOption2()throws Exception {}"
"org.apache.commons.cli.BasicParserTest.testUnambiguousPartialLongOption3",0,"public void testUnambiguousPartialLongOption3()throws Exception {}"
"org.apache.commons.cli.BasicParserTest.testUnambiguousPartialLongOption4",0,"public void testUnambiguousPartialLongOption4()throws Exception {}"
"org.apache.commons.cli.BasicParserTest.testAmbiguousPartialLongOption1",0,"public void testAmbiguousPartialLongOption1()throws Exception {}"
"org.apache.commons.cli.BasicParserTest.testAmbiguousPartialLongOption2",0,"public void testAmbiguousPartialLongOption2()throws Exception {}"
"org.apache.commons.cli.BasicParserTest.testAmbiguousPartialLongOption3",0,"public void testAmbiguousPartialLongOption3()throws Exception {}"
"org.apache.commons.cli.BasicParserTest.testAmbiguousPartialLongOption4",0,"public void testAmbiguousPartialLongOption4()throws Exception {}"
"org.apache.commons.cli.BasicParserTest.testPartialLongOptionSingleDash",0,"public void testPartialLongOptionSingleDash()throws Exception {}"
"org.apache.commons.cli.BasicParserTest.testBursting",0,"public void testBursting()throws Exception {}"
"org.apache.commons.cli.BasicParserTest.testUnrecognizedOptionWithBursting",0,"public void testUnrecognizedOptionWithBursting()throws Exception {}"
"org.apache.commons.cli.BasicParserTest.testMissingArgWithBursting",0,"public void testMissingArgWithBursting()throws Exception {}"
"org.apache.commons.cli.BasicParserTest.testStopBursting",0,"public void testStopBursting()throws Exception {}"
"org.apache.commons.cli.BasicParserTest.testStopBursting2",0,"public void testStopBursting2()throws Exception {}"
"org.apache.commons.cli.BasicParserTest.testSimpleShort",0,"public void testSimpleShort()throws Exception {String[]args=new String[]{""-a"",""-b"",""toast"",""foo"",""bar""};CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -a is set"",cl.hasOption(""a""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""toast""));assertTrue(""Confirm size of extra args"",cl.getArgList().size()== 2);}"
"org.apache.commons.cli.BasicParserTest.testSimpleLong",0,"public void testSimpleLong()throws Exception {String[]args=new String[]{""--enable-a"",""--bfile"",""toast"",""foo"",""bar""};CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -a is set"",cl.hasOption(""a""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""toast""));assertTrue(""Confirm arg of --bfile"",cl.getOptionValue(""bfile"").equals(""toast""));assertTrue(""Confirm size of extra args"",cl.getArgList().size()== 2);}"
"org.apache.commons.cli.BasicParserTest.testMultiple",0,"public void testMultiple()throws Exception {String[]args=new String[]{""-c"",""foobar"",""-b"",""toast""};CommandLine cl=parser.parse(options,args,true);assertTrue(""Confirm -c is set"",cl.hasOption(""c""));assertTrue(""Confirm  3 extra args: "" + cl.getArgList().size(),cl.getArgList().size()== 3);cl=parser.parse(options,cl.getArgs());assertTrue(""Confirm -c is not set"",!cl.hasOption(""c""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""toast""));assertTrue(""Confirm  1 extra arg: "" + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue(""Confirm  value of extra arg: "" + cl.getArgList().get(0),cl.getArgList().get(0).equals(""foobar""));}"
"org.apache.commons.cli.BasicParserTest.testMultipleWithLong",0,"public void testMultipleWithLong()throws Exception {String[]args=new String[]{""--copt"",""foobar"",""--bfile"",""toast""};CommandLine cl=parser.parse(options,args,true);assertTrue(""Confirm -c is set"",cl.hasOption(""c""));assertTrue(""Confirm  3 extra args: "" + cl.getArgList().size(),cl.getArgList().size()== 3);cl=parser.parse(options,cl.getArgs());assertTrue(""Confirm -c is not set"",!cl.hasOption(""c""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""toast""));assertTrue(""Confirm  1 extra arg: "" + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue(""Confirm  value of extra arg: "" + cl.getArgList().get(0),cl.getArgList().get(0).equals(""foobar""));}"
"org.apache.commons.cli.BasicParserTest.testUnrecognizedOption",0,"public void testUnrecognizedOption()throws Exception {String[]args=new String[]{""-a"",""-d"",""-b"",""toast"",""foo"",""bar""};try {parser.parse(options,args);fail(""UnrecognizedOptionException wasn't thrown"");}catch(UnrecognizedOptionException e){assertEquals(""-d"",e.getOption());}}"
"org.apache.commons.cli.BasicParserTest.testMissingArg",0,"public void testMissingArg()throws Exception {String[]args=new String[]{""-b""};boolean caught=false;try {parser.parse(options,args);}catch(MissingArgumentException e){caught=true;assertEquals(""option missing an argument"",""b"",e.getOption().getOpt());}assertTrue(""Confirm MissingArgumentException caught"",caught);}"
"org.apache.commons.cli.BasicParserTest.testDoubleDash1",0,"public void testDoubleDash1()throws Exception {String[]args=new String[]{""--copt"",""--"",""-b"",""toast""};CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -c is set"",cl.hasOption(""c""));assertTrue(""Confirm -b is not set"",!cl.hasOption(""b""));assertTrue(""Confirm 2 extra args: "" + cl.getArgList().size(),cl.getArgList().size()== 2);}"
"org.apache.commons.cli.BasicParserTest.testSingleDash",0,"public void testSingleDash()throws Exception {String[]args=new String[]{""--copt"",""-b"",""-"",""-a"",""-""};CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -a is set"",cl.hasOption(""a""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""-""));assertTrue(""Confirm 1 extra arg: "" + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue(""Confirm value of extra arg: "" + cl.getArgList().get(0),cl.getArgList().get(0).equals(""-""));}"
"org.apache.commons.cli.BasicParserTest.testStopAtUnexpectedArg",0,"public void testStopAtUnexpectedArg()throws Exception {String[]args=new String[]{""-c"",""foober"",""-b"",""toast""};CommandLine cl=parser.parse(options,args,true);assertTrue(""Confirm -c is set"",cl.hasOption(""c""));assertTrue(""Confirm  3 extra args: "" + cl.getArgList().size(),cl.getArgList().size()== 3);}"
"org.apache.commons.cli.BasicParserTest.testStopAtExpectedArg",0,"public void testStopAtExpectedArg()throws Exception {String[]args=new String[]{""-b"",""foo""};CommandLine cl=parser.parse(options,args,true);assertTrue(""Confirm -b is set"",cl.hasOption('b'));assertEquals(""Confirm -b is set"",""foo"",cl.getOptionValue('b'));assertTrue(""Confirm no extra args: "" + cl.getArgList().size(),cl.getArgList().size()== 0);}"
"org.apache.commons.cli.BasicParserTest.testStopAtNonOptionShort",0,"public void testStopAtNonOptionShort()throws Exception {String[]args=new String[]{""-z"",""-a"",""-btoast""};CommandLine cl=parser.parse(options,args,true);assertFalse(""Confirm -a is not set"",cl.hasOption(""a""));assertTrue(""Confirm  3 extra args: "" + cl.getArgList().size(),cl.getArgList().size()== 3);}"
"org.apache.commons.cli.BasicParserTest.testStopAtNonOptionLong",0,"public void testStopAtNonOptionLong()throws Exception {String[]args=new String[]{""--zop==1"",""-abtoast"",""--b=bar""};CommandLine cl=parser.parse(options,args,true);assertFalse(""Confirm -a is not set"",cl.hasOption(""a""));assertFalse(""Confirm -b is not set"",cl.hasOption(""b""));assertTrue(""Confirm  3 extra args: "" + cl.getArgList().size(),cl.getArgList().size()== 3);}"
"org.apache.commons.cli.BasicParserTest.testNegativeArgument",0,"public void testNegativeArgument()throws Exception {String[]args=new String[]{""-b"",""-1""};CommandLine cl=parser.parse(options,args);assertEquals(""-1"",cl.getOptionValue(""b""));}"
"org.apache.commons.cli.BasicParserTest.testArgumentStartingWithHyphen",0,"public void testArgumentStartingWithHyphen()throws Exception {String[]args=new String[]{""-b"",""-foo""};CommandLine cl=parser.parse(options,args);assertEquals(""-foo"",cl.getOptionValue(""b""));}"
"org.apache.commons.cli.BasicParserTest.testLongWithoutEqualDoubleDash",0,"public void testLongWithoutEqualDoubleDash()throws Exception {String[]args=new String[]{""--foobar""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""foo"").hasArg().create('f'));CommandLine cl=parser.parse(options,args,true);assertFalse(cl.hasOption(""foo""));}"
"org.apache.commons.cli.BasicParserTest.testLongWithUnexpectedArgument1",0,"public void testLongWithUnexpectedArgument1()throws Exception {String[]args=new String[]{""--foo=bar""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""foo"").create('f'));try {parser.parse(options,args);}catch(UnrecognizedOptionException e){assertEquals(""--foo=bar"",e.getOption());return;}fail(""UnrecognizedOptionException not thrown"");}"
"org.apache.commons.cli.BasicParserTest.testLongWithUnexpectedArgument2",0,"public void testLongWithUnexpectedArgument2()throws Exception {String[]args=new String[]{""-foobar""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""foo"").create('f'));try {parser.parse(options,args);}catch(UnrecognizedOptionException e){assertEquals(""-foobar"",e.getOption());return;}fail(""UnrecognizedOptionException not thrown"");}"
"org.apache.commons.cli.BasicParserTest.testShortWithUnexpectedArgument",0,"public void testShortWithUnexpectedArgument()throws Exception {String[]args=new String[]{""-f=bar""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""foo"").create('f'));try {parser.parse(options,args);}catch(UnrecognizedOptionException e){assertEquals(""-f=bar"",e.getOption());return;}fail(""UnrecognizedOptionException not thrown"");}"
"org.apache.commons.cli.BasicParserTest.testWithRequiredOption",0,"public void testWithRequiredOption()throws Exception {String[]args=new String[]{""-b"",""file""};Options options=new Options();options.addOption(""a"",""enable-a"",false,null);options.addOption(OptionBuilder.withLongOpt(""bfile"").hasArg().isRequired().create('b'));CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -a is NOT set"",!cl.hasOption(""a""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""file""));assertTrue(""Confirm NO of extra args"",cl.getArgList().size()== 0);}"
"org.apache.commons.cli.BasicParserTest.testOptionAndRequiredOption",0,"public void testOptionAndRequiredOption()throws Exception {String[]args=new String[]{""-a"",""-b"",""file""};Options options=new Options();options.addOption(""a"",""enable-a"",false,null);options.addOption(OptionBuilder.withLongOpt(""bfile"").hasArg().isRequired().create('b'));CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -a is set"",cl.hasOption(""a""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""file""));assertTrue(""Confirm NO of extra args"",cl.getArgList().size()== 0);}"
"org.apache.commons.cli.BasicParserTest.testMissingRequiredOption",0,"public void testMissingRequiredOption(){String[]args=new String[]{""-a""};Options options=new Options();options.addOption(""a"",""enable-a"",false,null);options.addOption(OptionBuilder.withLongOpt(""bfile"").hasArg().isRequired().create('b'));try {parser.parse(options,args);fail(""exception should have been thrown"");}catch(MissingOptionException e){assertEquals(""Incorrect exception message"",""Missing required option: b"",e.getMessage());assertTrue(e.getMissingOptions().contains(""b""));}catch(ParseException e){fail(""expected to catch MissingOptionException"");}}"
"org.apache.commons.cli.BasicParserTest.testMissingRequiredOptions",0,"public void testMissingRequiredOptions(){String[]args=new String[]{""-a""};Options options=new Options();options.addOption(""a"",""enable-a"",false,null);options.addOption(OptionBuilder.withLongOpt(""bfile"").hasArg().isRequired().create('b'));options.addOption(OptionBuilder.withLongOpt(""cfile"").hasArg().isRequired().create('c'));try {parser.parse(options,args);fail(""exception should have been thrown"");}catch(MissingOptionException e){assertEquals(""Incorrect exception message"",""Missing required options: b,c"",e.getMessage());assertTrue(e.getMissingOptions().contains(""b""));assertTrue(e.getMissingOptions().contains(""c""));}catch(ParseException e){fail(""expected to catch MissingOptionException"");}}"
"org.apache.commons.cli.BasicParserTest.testMissingRequiredGroup",0,"public void testMissingRequiredGroup()throws Exception {OptionGroup group=new OptionGroup();group.addOption(OptionBuilder.create(""a""));group.addOption(OptionBuilder.create(""b""));group.setRequired(true);Options options=new Options();options.addOptionGroup(group);options.addOption(OptionBuilder.isRequired().create(""c""));try {parser.parse(options,new String[]{""-c""});fail(""MissingOptionException not thrown"");}catch(MissingOptionException e){assertEquals(1,e.getMissingOptions().size());assertTrue(e.getMissingOptions().get(0)instanceof OptionGroup);}catch(ParseException e){fail(""Expected to catch MissingOptionException"");}}"
"org.apache.commons.cli.BasicParserTest.testOptionGroup",0,"public void testOptionGroup()throws Exception {OptionGroup group=new OptionGroup();group.addOption(OptionBuilder.create(""a""));group.addOption(OptionBuilder.create(""b""));Options options=new Options();options.addOptionGroup(group);parser.parse(options,new String[]{""-b""});assertEquals(""selected option"",""b"",group.getSelected());}"
"org.apache.commons.cli.BasicParserTest.testOptionGroupLong",0,"public void testOptionGroupLong()throws Exception {OptionGroup group=new OptionGroup();group.addOption(OptionBuilder.withLongOpt(""foo"").create());group.addOption(OptionBuilder.withLongOpt(""bar"").create());Options options=new Options();options.addOptionGroup(group);CommandLine cl=parser.parse(options,new String[]{""--bar""});assertTrue(cl.hasOption(""bar""));assertEquals(""selected option"",""bar"",group.getSelected());}"
"org.apache.commons.cli.BasicParserTest.testReuseOptionsTwice",0,"public void testReuseOptionsTwice()throws Exception {Options opts=new Options();opts.addOption(OptionBuilder.isRequired().create('v'));parser.parse(opts,new String[]{""-v""});try {parser.parse(opts,new String[0]);fail(""MissingOptionException not thrown"");}catch(MissingOptionException e){}}"
"org.apache.commons.cli.BasicParserTest.testUnlimitedArgs",0,"public void testUnlimitedArgs()throws Exception {String[]args=new String[]{""-e"",""one"",""two"",""-f"",""alpha""};Options options=new Options();options.addOption(OptionBuilder.hasArgs().create(""e""));options.addOption(OptionBuilder.hasArgs().create(""f""));CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -e is set"",cl.hasOption(""e""));assertEquals(""number of arg for -e"",2,cl.getOptionValues(""e"").length);assertTrue(""Confirm -f is set"",cl.hasOption(""f""));assertEquals(""number of arg for -f"",1,cl.getOptionValues(""f"").length);}"
"org.apache.commons.cli.BasicParserTest.testPropertyOptionSingularValue",0,"public void testPropertyOptionSingularValue()throws Exception {Options opts=new Options();opts.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt(""hide"").create());Properties properties=new Properties();properties.setProperty(""hide"",""seek"");CommandLine cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption(""hide""));assertEquals(""seek"",cmd.getOptionValue(""hide""));assertTrue(!cmd.hasOption(""fake""));}"
"org.apache.commons.cli.BasicParserTest.testPropertyOptionFlags",0,"public void testPropertyOptionFlags()throws Exception {Options opts=new Options();opts.addOption(""a"",false,""toggle -a"");opts.addOption(""c"",""c"",false,""toggle -c"");opts.addOption(OptionBuilder.hasOptionalArg().create('e'));Properties properties=new Properties();properties.setProperty(""a"",""true"");properties.setProperty(""c"",""yes"");properties.setProperty(""e"",""1"");CommandLine cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption(""a""));assertTrue(cmd.hasOption(""c""));assertTrue(cmd.hasOption(""e""));properties=new Properties();properties.setProperty(""a"",""false"");properties.setProperty(""c"",""no"");properties.setProperty(""e"",""0"");cmd=parse(parser,opts,null,properties);assertTrue(!cmd.hasOption(""a""));assertTrue(!cmd.hasOption(""c""));assertTrue(cmd.hasOption(""e""));properties=new Properties();properties.setProperty(""a"",""TRUE"");properties.setProperty(""c"",""nO"");properties.setProperty(""e"",""TrUe"");cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption(""a""));assertTrue(!cmd.hasOption(""c""));assertTrue(cmd.hasOption(""e""));properties=new Properties();properties.setProperty(""a"",""just a string"");properties.setProperty(""e"","""");cmd=parse(parser,opts,null,properties);assertTrue(!cmd.hasOption(""a""));assertTrue(!cmd.hasOption(""c""));assertTrue(cmd.hasOption(""e""));properties=new Properties();properties.setProperty(""a"",""0"");properties.setProperty(""c"",""1"");cmd=parse(parser,opts,null,properties);assertTrue(!cmd.hasOption(""a""));assertTrue(cmd.hasOption(""c""));}"
"org.apache.commons.cli.BasicParserTest.testPropertyOptionMultipleValues",0,"public void testPropertyOptionMultipleValues()throws Exception {Options opts=new Options();opts.addOption(OptionBuilder.hasArgs().withValueSeparator(',').create('k'));Properties properties=new Properties();properties.setProperty(""k"",""one,two"");String[]values=new String[]{""one"",""two""};CommandLine cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption(""k""));assertTrue(Arrays.equals(values,cmd.getOptionValues('k')));}"
"org.apache.commons.cli.BasicParserTest.testPropertyOverrideValues",0,"public void testPropertyOverrideValues()throws Exception {Options opts=new Options();opts.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));opts.addOption(OptionBuilder.hasOptionalArgs().create('j'));String[]args=new String[]{""-j"",""found"",""-i"",""ink""};Properties properties=new Properties();properties.setProperty(""j"",""seek"");CommandLine cmd=parse(parser,opts,args,properties);assertTrue(cmd.hasOption(""j""));assertEquals(""found"",cmd.getOptionValue(""j""));assertTrue(cmd.hasOption(""i""));assertEquals(""ink"",cmd.getOptionValue(""i""));assertTrue(!cmd.hasOption(""fake""));}"
"org.apache.commons.cli.PosixParserTest.testDoubleDash2",0,"public void testDoubleDash2()throws Exception {}"
"org.apache.commons.cli.PosixParserTest.testLongWithoutEqualSingleDash",0,"public void testLongWithoutEqualSingleDash()throws Exception {}"
"org.apache.commons.cli.PosixParserTest.testAmbiguousLongWithoutEqualSingleDash",0,"public void testAmbiguousLongWithoutEqualSingleDash()throws Exception {}"
"org.apache.commons.cli.PosixParserTest.testNegativeOption",0,"public void testNegativeOption()throws Exception {}"
"org.apache.commons.cli.PosixParserTest.testLongWithUnexpectedArgument1",0,"public void testLongWithUnexpectedArgument1()throws Exception {}"
"org.apache.commons.cli.PosixParserTest.testLongWithEqualSingleDash",0,"public void testLongWithEqualSingleDash()throws Exception {}"
"org.apache.commons.cli.PosixParserTest.testShortWithEqual",0,"public void testShortWithEqual()throws Exception {}"
"org.apache.commons.cli.PosixParserTest.testUnambiguousPartialLongOption4",0,"public void testUnambiguousPartialLongOption4()throws Exception {}"
"org.apache.commons.cli.PosixParserTest.testAmbiguousPartialLongOption4",0,"public void testAmbiguousPartialLongOption4()throws Exception {}"
"org.apache.commons.cli.PosixParserTest.testSimpleShort",0,"public void testSimpleShort()throws Exception {String[]args=new String[]{""-a"",""-b"",""toast"",""foo"",""bar""};CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -a is set"",cl.hasOption(""a""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""toast""));assertTrue(""Confirm size of extra args"",cl.getArgList().size()== 2);}"
"org.apache.commons.cli.PosixParserTest.testSimpleLong",0,"public void testSimpleLong()throws Exception {String[]args=new String[]{""--enable-a"",""--bfile"",""toast"",""foo"",""bar""};CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -a is set"",cl.hasOption(""a""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""toast""));assertTrue(""Confirm arg of --bfile"",cl.getOptionValue(""bfile"").equals(""toast""));assertTrue(""Confirm size of extra args"",cl.getArgList().size()== 2);}"
"org.apache.commons.cli.PosixParserTest.testMultiple",0,"public void testMultiple()throws Exception {String[]args=new String[]{""-c"",""foobar"",""-b"",""toast""};CommandLine cl=parser.parse(options,args,true);assertTrue(""Confirm -c is set"",cl.hasOption(""c""));assertTrue(""Confirm  3 extra args: "" + cl.getArgList().size(),cl.getArgList().size()== 3);cl=parser.parse(options,cl.getArgs());assertTrue(""Confirm -c is not set"",!cl.hasOption(""c""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""toast""));assertTrue(""Confirm  1 extra arg: "" + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue(""Confirm  value of extra arg: "" + cl.getArgList().get(0),cl.getArgList().get(0).equals(""foobar""));}"
"org.apache.commons.cli.PosixParserTest.testMultipleWithLong",0,"public void testMultipleWithLong()throws Exception {String[]args=new String[]{""--copt"",""foobar"",""--bfile"",""toast""};CommandLine cl=parser.parse(options,args,true);assertTrue(""Confirm -c is set"",cl.hasOption(""c""));assertTrue(""Confirm  3 extra args: "" + cl.getArgList().size(),cl.getArgList().size()== 3);cl=parser.parse(options,cl.getArgs());assertTrue(""Confirm -c is not set"",!cl.hasOption(""c""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""toast""));assertTrue(""Confirm  1 extra arg: "" + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue(""Confirm  value of extra arg: "" + cl.getArgList().get(0),cl.getArgList().get(0).equals(""foobar""));}"
"org.apache.commons.cli.PosixParserTest.testUnrecognizedOption",0,"public void testUnrecognizedOption()throws Exception {String[]args=new String[]{""-a"",""-d"",""-b"",""toast"",""foo"",""bar""};try {parser.parse(options,args);fail(""UnrecognizedOptionException wasn't thrown"");}catch(UnrecognizedOptionException e){assertEquals(""-d"",e.getOption());}}"
"org.apache.commons.cli.PosixParserTest.testMissingArg",0,"public void testMissingArg()throws Exception {String[]args=new String[]{""-b""};boolean caught=false;try {parser.parse(options,args);}catch(MissingArgumentException e){caught=true;assertEquals(""option missing an argument"",""b"",e.getOption().getOpt());}assertTrue(""Confirm MissingArgumentException caught"",caught);}"
"org.apache.commons.cli.PosixParserTest.testDoubleDash1",0,"public void testDoubleDash1()throws Exception {String[]args=new String[]{""--copt"",""--"",""-b"",""toast""};CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -c is set"",cl.hasOption(""c""));assertTrue(""Confirm -b is not set"",!cl.hasOption(""b""));assertTrue(""Confirm 2 extra args: "" + cl.getArgList().size(),cl.getArgList().size()== 2);}"
"org.apache.commons.cli.PosixParserTest.testSingleDash",0,"public void testSingleDash()throws Exception {String[]args=new String[]{""--copt"",""-b"",""-"",""-a"",""-""};CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -a is set"",cl.hasOption(""a""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""-""));assertTrue(""Confirm 1 extra arg: "" + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue(""Confirm value of extra arg: "" + cl.getArgList().get(0),cl.getArgList().get(0).equals(""-""));}"
"org.apache.commons.cli.PosixParserTest.testStopAtUnexpectedArg",0,"public void testStopAtUnexpectedArg()throws Exception {String[]args=new String[]{""-c"",""foober"",""-b"",""toast""};CommandLine cl=parser.parse(options,args,true);assertTrue(""Confirm -c is set"",cl.hasOption(""c""));assertTrue(""Confirm  3 extra args: "" + cl.getArgList().size(),cl.getArgList().size()== 3);}"
"org.apache.commons.cli.PosixParserTest.testStopAtExpectedArg",0,"public void testStopAtExpectedArg()throws Exception {String[]args=new String[]{""-b"",""foo""};CommandLine cl=parser.parse(options,args,true);assertTrue(""Confirm -b is set"",cl.hasOption('b'));assertEquals(""Confirm -b is set"",""foo"",cl.getOptionValue('b'));assertTrue(""Confirm no extra args: "" + cl.getArgList().size(),cl.getArgList().size()== 0);}"
"org.apache.commons.cli.PosixParserTest.testStopAtNonOptionShort",0,"public void testStopAtNonOptionShort()throws Exception {String[]args=new String[]{""-z"",""-a"",""-btoast""};CommandLine cl=parser.parse(options,args,true);assertFalse(""Confirm -a is not set"",cl.hasOption(""a""));assertTrue(""Confirm  3 extra args: "" + cl.getArgList().size(),cl.getArgList().size()== 3);}"
"org.apache.commons.cli.PosixParserTest.testStopAtNonOptionLong",0,"public void testStopAtNonOptionLong()throws Exception {String[]args=new String[]{""--zop==1"",""-abtoast"",""--b=bar""};CommandLine cl=parser.parse(options,args,true);assertFalse(""Confirm -a is not set"",cl.hasOption(""a""));assertFalse(""Confirm -b is not set"",cl.hasOption(""b""));assertTrue(""Confirm  3 extra args: "" + cl.getArgList().size(),cl.getArgList().size()== 3);}"
"org.apache.commons.cli.PosixParserTest.testNegativeArgument",0,"public void testNegativeArgument()throws Exception {String[]args=new String[]{""-b"",""-1""};CommandLine cl=parser.parse(options,args);assertEquals(""-1"",cl.getOptionValue(""b""));}"
"org.apache.commons.cli.PosixParserTest.testArgumentStartingWithHyphen",0,"public void testArgumentStartingWithHyphen()throws Exception {String[]args=new String[]{""-b"",""-foo""};CommandLine cl=parser.parse(options,args);assertEquals(""-foo"",cl.getOptionValue(""b""));}"
"org.apache.commons.cli.PosixParserTest.testShortWithoutEqual",0,"public void testShortWithoutEqual()throws Exception {String[]args=new String[]{""-fbar""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""foo"").hasArg().create('f'));CommandLine cl=parser.parse(options,args);assertEquals(""bar"",cl.getOptionValue(""foo""));}"
"org.apache.commons.cli.PosixParserTest.testLongWithEqualDoubleDash",0,"public void testLongWithEqualDoubleDash()throws Exception {String[]args=new String[]{""--foo=bar""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""foo"").hasArg().create('f'));CommandLine cl=parser.parse(options,args);assertEquals(""bar"",cl.getOptionValue(""foo""));}"
"org.apache.commons.cli.PosixParserTest.testLongWithoutEqualDoubleDash",0,"public void testLongWithoutEqualDoubleDash()throws Exception {String[]args=new String[]{""--foobar""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""foo"").hasArg().create('f'));CommandLine cl=parser.parse(options,args,true);assertFalse(cl.hasOption(""foo""));}"
"org.apache.commons.cli.PosixParserTest.testLongWithUnexpectedArgument2",0,"public void testLongWithUnexpectedArgument2()throws Exception {String[]args=new String[]{""-foobar""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""foo"").create('f'));try {parser.parse(options,args);}catch(UnrecognizedOptionException e){assertEquals(""-foobar"",e.getOption());return;}fail(""UnrecognizedOptionException not thrown"");}"
"org.apache.commons.cli.PosixParserTest.testShortWithUnexpectedArgument",0,"public void testShortWithUnexpectedArgument()throws Exception {String[]args=new String[]{""-f=bar""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""foo"").create('f'));try {parser.parse(options,args);}catch(UnrecognizedOptionException e){assertEquals(""-f=bar"",e.getOption());return;}fail(""UnrecognizedOptionException not thrown"");}"
"org.apache.commons.cli.PosixParserTest.testPropertiesOption1",0,"public void testPropertiesOption1()throws Exception {String[]args=new String[]{""-Jsource=1.5"",""-J"",""target"",""1.5"",""foo""};Options options=new Options();options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).create('J'));CommandLine cl=parser.parse(options,args);List values=Arrays.asList(cl.getOptionValues(""J""));assertNotNull(""null values"",values);assertEquals(""number of values"",4,values.size());assertEquals(""value 1"",""source"",values.get(0));assertEquals(""value 2"",""1.5"",values.get(1));assertEquals(""value 3"",""target"",values.get(2));assertEquals(""value 4"",""1.5"",values.get(3));List argsleft=cl.getArgList();assertEquals(""Should be 1 arg left"",1,argsleft.size());assertEquals(""Expecting foo"",""foo"",argsleft.get(0));}"
"org.apache.commons.cli.PosixParserTest.testPropertiesOption2",0,"public void testPropertiesOption2()throws Exception {String[]args=new String[]{""-Dparam1"",""-Dparam2=value2"",""-D""};Options options=new Options();options.addOption(OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D'));CommandLine cl=parser.parse(options,args);Properties props=cl.getOptionProperties(""D"");assertNotNull(""null properties"",props);assertEquals(""number of properties in "" + props,2,props.size());assertEquals(""property 1"",""true"",props.getProperty(""param1""));assertEquals(""property 2"",""value2"",props.getProperty(""param2""));List argsleft=cl.getArgList();assertEquals(""Should be no arg left"",0,argsleft.size());}"
"org.apache.commons.cli.PosixParserTest.testUnambiguousPartialLongOption1",0,"public void testUnambiguousPartialLongOption1()throws Exception {String[]args=new String[]{""--ver""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""version"").create());options.addOption(OptionBuilder.withLongOpt(""help"").create());CommandLine cl=parser.parse(options,args);assertTrue(""Confirm --version is set"",cl.hasOption(""version""));}"
"org.apache.commons.cli.PosixParserTest.testUnambiguousPartialLongOption2",0,"public void testUnambiguousPartialLongOption2()throws Exception {String[]args=new String[]{""-ver""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""version"").create());options.addOption(OptionBuilder.withLongOpt(""help"").create());CommandLine cl=parser.parse(options,args);assertTrue(""Confirm --version is set"",cl.hasOption(""version""));}"
"org.apache.commons.cli.PosixParserTest.testUnambiguousPartialLongOption3",0,"public void testUnambiguousPartialLongOption3()throws Exception {String[]args=new String[]{""--ver=1""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""verbose"").hasOptionalArg().create());options.addOption(OptionBuilder.withLongOpt(""help"").create());CommandLine cl=parser.parse(options,args);assertTrue(""Confirm --verbose is set"",cl.hasOption(""verbose""));assertEquals(""1"",cl.getOptionValue(""verbose""));}"
"org.apache.commons.cli.PosixParserTest.testAmbiguousPartialLongOption1",0,"public void testAmbiguousPartialLongOption1()throws Exception {String[]args=new String[]{""--ver""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""version"").create());options.addOption(OptionBuilder.withLongOpt(""verbose"").create());boolean caught=false;try {parser.parse(options,args);}catch(AmbiguousOptionException e){caught=true;assertEquals(""Partial option"",""--ver"",e.getOption());assertNotNull(""Matching options null"",e.getMatchingOptions());assertEquals(""Matching options size"",2,e.getMatchingOptions().size());}assertTrue(""Confirm MissingArgumentException caught"",caught);}"
"org.apache.commons.cli.PosixParserTest.testAmbiguousPartialLongOption2",0,"public void testAmbiguousPartialLongOption2()throws Exception {String[]args=new String[]{""-ver""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""version"").create());options.addOption(OptionBuilder.withLongOpt(""verbose"").create());boolean caught=false;try {parser.parse(options,args);}catch(AmbiguousOptionException e){caught=true;assertEquals(""Partial option"",""-ver"",e.getOption());assertNotNull(""Matching options null"",e.getMatchingOptions());assertEquals(""Matching options size"",2,e.getMatchingOptions().size());}assertTrue(""Confirm MissingArgumentException caught"",caught);}"
"org.apache.commons.cli.PosixParserTest.testAmbiguousPartialLongOption3",0,"public void testAmbiguousPartialLongOption3()throws Exception {String[]args=new String[]{""--ver=1""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""version"").create());options.addOption(OptionBuilder.withLongOpt(""verbose"").hasOptionalArg().create());boolean caught=false;try {parser.parse(options,args);}catch(AmbiguousOptionException e){caught=true;assertEquals(""Partial option"",""--ver"",e.getOption());assertNotNull(""Matching options null"",e.getMatchingOptions());assertEquals(""Matching options size"",2,e.getMatchingOptions().size());}assertTrue(""Confirm MissingArgumentException caught"",caught);}"
"org.apache.commons.cli.PosixParserTest.testPartialLongOptionSingleDash",0,"public void testPartialLongOptionSingleDash()throws Exception {String[]args=new String[]{""-ver""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""version"").create());options.addOption(OptionBuilder.hasArg().create('v'));CommandLine cl=parser.parse(options,args);assertTrue(""Confirm --version is set"",cl.hasOption(""version""));assertTrue(""Confirm -v is not set"",!cl.hasOption(""v""));}"
"org.apache.commons.cli.PosixParserTest.testWithRequiredOption",0,"public void testWithRequiredOption()throws Exception {String[]args=new String[]{""-b"",""file""};Options options=new Options();options.addOption(""a"",""enable-a"",false,null);options.addOption(OptionBuilder.withLongOpt(""bfile"").hasArg().isRequired().create('b'));CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -a is NOT set"",!cl.hasOption(""a""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""file""));assertTrue(""Confirm NO of extra args"",cl.getArgList().size()== 0);}"
"org.apache.commons.cli.PosixParserTest.testOptionAndRequiredOption",0,"public void testOptionAndRequiredOption()throws Exception {String[]args=new String[]{""-a"",""-b"",""file""};Options options=new Options();options.addOption(""a"",""enable-a"",false,null);options.addOption(OptionBuilder.withLongOpt(""bfile"").hasArg().isRequired().create('b'));CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -a is set"",cl.hasOption(""a""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""file""));assertTrue(""Confirm NO of extra args"",cl.getArgList().size()== 0);}"
"org.apache.commons.cli.PosixParserTest.testMissingRequiredOption",0,"public void testMissingRequiredOption(){String[]args=new String[]{""-a""};Options options=new Options();options.addOption(""a"",""enable-a"",false,null);options.addOption(OptionBuilder.withLongOpt(""bfile"").hasArg().isRequired().create('b'));try {parser.parse(options,args);fail(""exception should have been thrown"");}catch(MissingOptionException e){assertEquals(""Incorrect exception message"",""Missing required option: b"",e.getMessage());assertTrue(e.getMissingOptions().contains(""b""));}catch(ParseException e){fail(""expected to catch MissingOptionException"");}}"
"org.apache.commons.cli.PosixParserTest.testMissingRequiredOptions",0,"public void testMissingRequiredOptions(){String[]args=new String[]{""-a""};Options options=new Options();options.addOption(""a"",""enable-a"",false,null);options.addOption(OptionBuilder.withLongOpt(""bfile"").hasArg().isRequired().create('b'));options.addOption(OptionBuilder.withLongOpt(""cfile"").hasArg().isRequired().create('c'));try {parser.parse(options,args);fail(""exception should have been thrown"");}catch(MissingOptionException e){assertEquals(""Incorrect exception message"",""Missing required options: b,c"",e.getMessage());assertTrue(e.getMissingOptions().contains(""b""));assertTrue(e.getMissingOptions().contains(""c""));}catch(ParseException e){fail(""expected to catch MissingOptionException"");}}"
"org.apache.commons.cli.PosixParserTest.testMissingRequiredGroup",0,"public void testMissingRequiredGroup()throws Exception {OptionGroup group=new OptionGroup();group.addOption(OptionBuilder.create(""a""));group.addOption(OptionBuilder.create(""b""));group.setRequired(true);Options options=new Options();options.addOptionGroup(group);options.addOption(OptionBuilder.isRequired().create(""c""));try {parser.parse(options,new String[]{""-c""});fail(""MissingOptionException not thrown"");}catch(MissingOptionException e){assertEquals(1,e.getMissingOptions().size());assertTrue(e.getMissingOptions().get(0)instanceof OptionGroup);}catch(ParseException e){fail(""Expected to catch MissingOptionException"");}}"
"org.apache.commons.cli.PosixParserTest.testOptionGroup",0,"public void testOptionGroup()throws Exception {OptionGroup group=new OptionGroup();group.addOption(OptionBuilder.create(""a""));group.addOption(OptionBuilder.create(""b""));Options options=new Options();options.addOptionGroup(group);parser.parse(options,new String[]{""-b""});assertEquals(""selected option"",""b"",group.getSelected());}"
"org.apache.commons.cli.PosixParserTest.testOptionGroupLong",0,"public void testOptionGroupLong()throws Exception {OptionGroup group=new OptionGroup();group.addOption(OptionBuilder.withLongOpt(""foo"").create());group.addOption(OptionBuilder.withLongOpt(""bar"").create());Options options=new Options();options.addOptionGroup(group);CommandLine cl=parser.parse(options,new String[]{""--bar""});assertTrue(cl.hasOption(""bar""));assertEquals(""selected option"",""bar"",group.getSelected());}"
"org.apache.commons.cli.PosixParserTest.testReuseOptionsTwice",0,"public void testReuseOptionsTwice()throws Exception {Options opts=new Options();opts.addOption(OptionBuilder.isRequired().create('v'));parser.parse(opts,new String[]{""-v""});try {parser.parse(opts,new String[0]);fail(""MissingOptionException not thrown"");}catch(MissingOptionException e){}}"
"org.apache.commons.cli.PosixParserTest.testBursting",0,"public void testBursting()throws Exception {String[]args=new String[]{""-acbtoast"",""foo"",""bar""};CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -a is set"",cl.hasOption(""a""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm -c is set"",cl.hasOption(""c""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""toast""));assertTrue(""Confirm size of extra args"",cl.getArgList().size()== 2);}"
"org.apache.commons.cli.PosixParserTest.testUnrecognizedOptionWithBursting",0,"public void testUnrecognizedOptionWithBursting()throws Exception {String[]args=new String[]{""-adbtoast"",""foo"",""bar""};try {parser.parse(options,args);fail(""UnrecognizedOptionException wasn't thrown"");}catch(UnrecognizedOptionException e){assertEquals(""-adbtoast"",e.getOption());}}"
"org.apache.commons.cli.PosixParserTest.testMissingArgWithBursting",0,"public void testMissingArgWithBursting()throws Exception {String[]args=new String[]{""-acb""};boolean caught=false;try {parser.parse(options,args);}catch(MissingArgumentException e){caught=true;assertEquals(""option missing an argument"",""b"",e.getOption().getOpt());}assertTrue(""Confirm MissingArgumentException caught"",caught);}"
"org.apache.commons.cli.PosixParserTest.testStopBursting",0,"public void testStopBursting()throws Exception {String[]args=new String[]{""-azc""};CommandLine cl=parser.parse(options,args,true);assertTrue(""Confirm -a is set"",cl.hasOption(""a""));assertFalse(""Confirm -c is not set"",cl.hasOption(""c""));assertTrue(""Confirm  1 extra arg: "" + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue(cl.getArgList().contains(""zc""));}"
"org.apache.commons.cli.PosixParserTest.testStopBursting2",0,"public void testStopBursting2()throws Exception {String[]args=new String[]{""-c"",""foobar"",""-btoast""};CommandLine cl=parser.parse(options,args,true);assertTrue(""Confirm -c is set"",cl.hasOption(""c""));assertTrue(""Confirm  2 extra args: "" + cl.getArgList().size(),cl.getArgList().size()== 2);cl=parser.parse(options,cl.getArgs());assertTrue(""Confirm -c is not set"",!cl.hasOption(""c""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""toast""));assertTrue(""Confirm  1 extra arg: "" + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue(""Confirm  value of extra arg: "" + cl.getArgList().get(0),cl.getArgList().get(0).equals(""foobar""));}"
"org.apache.commons.cli.PosixParserTest.testUnlimitedArgs",0,"public void testUnlimitedArgs()throws Exception {String[]args=new String[]{""-e"",""one"",""two"",""-f"",""alpha""};Options options=new Options();options.addOption(OptionBuilder.hasArgs().create(""e""));options.addOption(OptionBuilder.hasArgs().create(""f""));CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -e is set"",cl.hasOption(""e""));assertEquals(""number of arg for -e"",2,cl.getOptionValues(""e"").length);assertTrue(""Confirm -f is set"",cl.hasOption(""f""));assertEquals(""number of arg for -f"",1,cl.getOptionValues(""f"").length);}"
"org.apache.commons.cli.PosixParserTest.testPropertyOptionSingularValue",0,"public void testPropertyOptionSingularValue()throws Exception {Options opts=new Options();opts.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt(""hide"").create());Properties properties=new Properties();properties.setProperty(""hide"",""seek"");CommandLine cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption(""hide""));assertEquals(""seek"",cmd.getOptionValue(""hide""));assertTrue(!cmd.hasOption(""fake""));}"
"org.apache.commons.cli.PosixParserTest.testPropertyOptionFlags",0,"public void testPropertyOptionFlags()throws Exception {Options opts=new Options();opts.addOption(""a"",false,""toggle -a"");opts.addOption(""c"",""c"",false,""toggle -c"");opts.addOption(OptionBuilder.hasOptionalArg().create('e'));Properties properties=new Properties();properties.setProperty(""a"",""true"");properties.setProperty(""c"",""yes"");properties.setProperty(""e"",""1"");CommandLine cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption(""a""));assertTrue(cmd.hasOption(""c""));assertTrue(cmd.hasOption(""e""));properties=new Properties();properties.setProperty(""a"",""false"");properties.setProperty(""c"",""no"");properties.setProperty(""e"",""0"");cmd=parse(parser,opts,null,properties);assertTrue(!cmd.hasOption(""a""));assertTrue(!cmd.hasOption(""c""));assertTrue(cmd.hasOption(""e""));properties=new Properties();properties.setProperty(""a"",""TRUE"");properties.setProperty(""c"",""nO"");properties.setProperty(""e"",""TrUe"");cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption(""a""));assertTrue(!cmd.hasOption(""c""));assertTrue(cmd.hasOption(""e""));properties=new Properties();properties.setProperty(""a"",""just a string"");properties.setProperty(""e"","""");cmd=parse(parser,opts,null,properties);assertTrue(!cmd.hasOption(""a""));assertTrue(!cmd.hasOption(""c""));assertTrue(cmd.hasOption(""e""));properties=new Properties();properties.setProperty(""a"",""0"");properties.setProperty(""c"",""1"");cmd=parse(parser,opts,null,properties);assertTrue(!cmd.hasOption(""a""));assertTrue(cmd.hasOption(""c""));}"
"org.apache.commons.cli.PosixParserTest.testPropertyOptionMultipleValues",0,"public void testPropertyOptionMultipleValues()throws Exception {Options opts=new Options();opts.addOption(OptionBuilder.hasArgs().withValueSeparator(',').create('k'));Properties properties=new Properties();properties.setProperty(""k"",""one,two"");String[]values=new String[]{""one"",""two""};CommandLine cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption(""k""));assertTrue(Arrays.equals(values,cmd.getOptionValues('k')));}"
"org.apache.commons.cli.PosixParserTest.testPropertyOverrideValues",0,"public void testPropertyOverrideValues()throws Exception {Options opts=new Options();opts.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));opts.addOption(OptionBuilder.hasOptionalArgs().create('j'));String[]args=new String[]{""-j"",""found"",""-i"",""ink""};Properties properties=new Properties();properties.setProperty(""j"",""seek"");CommandLine cmd=parse(parser,opts,args,properties);assertTrue(cmd.hasOption(""j""));assertEquals(""found"",cmd.getOptionValue(""j""));assertTrue(cmd.hasOption(""i""));assertEquals(""ink"",cmd.getOptionValue(""i""));assertTrue(!cmd.hasOption(""fake""));}"
"org.apache.commons.cli.ApplicationTest.testLs",0,"public void testLs()throws Exception {CommandLineParser parser=new PosixParser();Options options=new Options();options.addOption(""a"",""all"",false,""do not hide entries starting with ."");options.addOption(""A"",""almost-all"",false,""do not list implied . and .."");options.addOption(""b"",""escape"",false,""print octal escapes for nongraphic characters"");options.addOption(OptionBuilder.withLongOpt(""block-size"").withDescription(""use SIZE-byte blocks"").hasArg().withArgName(""SIZE"").create());options.addOption(""B"",""ignore-backups"",false,""do not list implied entried ending with ~"");options.addOption(""c"",false,""with -lt: sort by,and show,ctime (time of last modification of file status information)with -l:show ctime and sort by name otherwise: sort by ctime"");options.addOption(""C"",false,""list entries by columns"");String[]args=new String[]{""--block-size=10""};CommandLine line=parser.parse(options,args);assertTrue(line.hasOption(""block-size""));assertEquals(line.getOptionValue(""block-size""),""10"");}"
"org.apache.commons.cli.ApplicationTest.testAnt",0,"/** * Ant test*/public void testAnt()throws Exception {CommandLineParser parser=new GnuParser();Options options=new Options();options.addOption(""help"",false,""print this message"");options.addOption(""projecthelp"",false,""print project help information"");options.addOption(""version"",false,""print the version information and exit"");options.addOption(""quiet"",false,""be extra quiet"");options.addOption(""verbose"",false,""be extra verbose"");options.addOption(""debug"",false,""print debug information"");options.addOption(""logfile"",true,""use given file for log"");options.addOption(""logger"",true,""the class which is to perform the logging"");options.addOption(""listener"",true,""add an instance of a class as a project listener"");options.addOption(""buildfile"",true,""use given buildfile"");options.addOption(OptionBuilder.withDescription(""use value for given property"").hasArgs().withValueSeparator().create('D'));options.addOption(""find"",true,""search for buildfile towards the root of the filesystem and use it"");String[]args=new String[]{""-buildfile"",""mybuild.xml"",""-Dproperty=value"",""-Dproperty1=value1"",""-projecthelp""};CommandLine line=parser.parse(options,args);String[]opts=line.getOptionValues(""D"");assertEquals(""property"",opts[0]);assertEquals(""value"",opts[1]);assertEquals(""property1"",opts[2]);assertEquals(""value1"",opts[3]);assertEquals(line.getOptionValue(""buildfile""),""mybuild.xml"");assertTrue(line.hasOption(""projecthelp""));}"
"org.apache.commons.cli.ApplicationTest.testGroovy",0,"public void testGroovy()throws Exception {Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""define"").withDescription(""define a system property"").hasArg(true).withArgName(""name=value"").create('D'));options.addOption(OptionBuilder.hasArg(false).withDescription(""usage information"").withLongOpt(""help"").create('h'));options.addOption(OptionBuilder.hasArg(false).withDescription(""debug mode will print out full stack traces"").withLongOpt(""debug"").create('d'));options.addOption(OptionBuilder.hasArg(false).withDescription(""display the Groovy and JVM versions"").withLongOpt(""version"").create('v'));options.addOption(OptionBuilder.withArgName(""charset"").hasArg().withDescription(""specify the encoding of the files"").withLongOpt(""encoding"").create('c'));options.addOption(OptionBuilder.withArgName(""script"").hasArg().withDescription(""specify a command line script"").create('e'));options.addOption(OptionBuilder.withArgName(""extension"").hasOptionalArg().withDescription(""modify files in place;create backup if extension is given (e.g. \'.bak\')"").create('i'));options.addOption(OptionBuilder.hasArg(false).withDescription(""process files line by line using implicit 'line' variable"").create('n'));options.addOption(OptionBuilder.hasArg(false).withDescription(""process files line by line and print result (see also -n)"").create('p'));options.addOption(OptionBuilder.withArgName(""port"").hasOptionalArg().withDescription(""listen on a port and process inbound lines"").create('l'));options.addOption(OptionBuilder.withArgName(""splitPattern"").hasOptionalArg().withDescription(""split lines using splitPattern (default '\\s')using implicit 'split' variable"").withLongOpt(""autosplit"").create('a'));Parser parser=new PosixParser();CommandLine line=parser.parse(options,new String[]{""-e"",""println 'hello'""},true);assertTrue(line.hasOption('e'));assertEquals(""println 'hello'"",line.getOptionValue('e'));}"
"org.apache.commons.cli.ApplicationTest.testMan",0,"/** * author Slawek Zachcial*/public void testMan(){String cmdLine=""man [-c|-f|-k|-w|-tZT device][-adlhu7V][-Mpath][-Ppager][-Slist]"" + ""[-msystem][-pstring][-Llocale][-eextension][section]page ..."";Options options=new Options().addOption(""a"",""all"",false,""find all matching manual pages."").addOption(""d"",""debug"",false,""emit debugging messages."").addOption(""e"",""extension"",false,""limit search to extension type 'extension'."").addOption(""f"",""whatis"",false,""equivalent to whatis."").addOption(""k"",""apropos"",false,""equivalent to apropos."").addOption(""w"",""location"",false,""print physical location of man page(s)."").addOption(""l"",""local-file"",false,""interpret 'page' argument(s)as local filename(s)"").addOption(""u"",""update"",false,""force a cache consistency check."").addOption(""r"",""prompt"",true,""provide 'less' pager with prompt."").addOption(""c"",""catman"",false,""used by catman to reformat out of date cat pages."").addOption(""7"",""ascii"",false,""display ASCII translation or certain latin1 chars."").addOption(""t"",""troff"",false,""use troff format pages."").addOption(""T"",""troff-device"",true,""use groff with selected device."").addOption(""Z"",""ditroff"",false,""use groff with selected device."").addOption(""D"",""default"",false,""reset all options to their default values."").addOption(""M"",""manpath"",true,""set search path for manual pages to 'path'."").addOption(""P"",""pager"",true,""use program 'pager' to display output."").addOption(""S"",""sections"",true,""use colon separated section list."").addOption(""m"",""systems"",true,""search for man pages from other unix system(s)."").addOption(""L"",""locale"",true,""define the locale for this particular man search."").addOption(""p"",""preprocessor"",true,""string indicates which preprocessor to run.\n"" + "" e - [n]eqn  p - pic     t - tbl\n"" + "" g - grap    r - refer   v - vgrind"").addOption(""V"",""version"",false,""show version."").addOption(""h"",""help"",false,""show this usage message."");HelpFormatter hf=new HelpFormatter();hf.printHelp(60,cmdLine,null,options,null);}"
"org.apache.commons.cli.ApplicationTest.testNLT",0,"/** * Real world test with long and short options.*/public void testNLT()throws Exception {Option help=new Option(""h"",""help"",false,""print this message"");Option version=new Option(""v"",""version"",false,""print version information"");Option newRun=new Option(""n"",""new"",false,""Create NLT cache entries only for new items"");Option trackerRun=new Option(""t"",""tracker"",false,""Create NLT cache entries only for tracker items"");Option timeLimit=OptionBuilder.withLongOpt(""limit"").hasArg().withValueSeparator().withDescription(""Set time limit for execution,in minutes"").create(""l"");Option age=OptionBuilder.withLongOpt(""age"").hasArg().withValueSeparator().withDescription(""Age (in days)of cache item before being recomputed"").create(""a"");Option server=OptionBuilder.withLongOpt(""server"").hasArg().withValueSeparator().withDescription(""The NLT server address"").create(""s"");Option numResults=OptionBuilder.withLongOpt(""results"").hasArg().withValueSeparator().withDescription(""Number of results per item"").create(""r"");Option configFile=OptionBuilder.withLongOpt(""file"").hasArg().withValueSeparator().withDescription(""Use the specified configuration file"").create();Options options=new Options();options.addOption(help);options.addOption(version);options.addOption(newRun);options.addOption(trackerRun);options.addOption(timeLimit);options.addOption(age);options.addOption(server);options.addOption(numResults);options.addOption(configFile);CommandLineParser parser=new PosixParser();String[]args=new String[]{""-v"",""-l"",""10"",""-age"",""5"",""-file"",""filename""};CommandLine line=parser.parse(options,args);assertTrue(line.hasOption(""v""));assertEquals(line.getOptionValue(""l""),""10"");assertEquals(line.getOptionValue(""limit""),""10"");assertEquals(line.getOptionValue(""a""),""5"");assertEquals(line.getOptionValue(""age""),""5"");assertEquals(line.getOptionValue(""file""),""filename"");}"
"org.apache.commons.cli.ValueTest.testShortNoArg",0,"public void testShortNoArg(){assertTrue(_cl.hasOption(""a""));assertNull(_cl.getOptionValue(""a""));}"
"org.apache.commons.cli.ValueTest.testShortWithArg",0,"public void testShortWithArg(){assertTrue(_cl.hasOption(""b""));assertNotNull(_cl.getOptionValue(""b""));assertEquals(_cl.getOptionValue(""b""),""foo"");}"
"org.apache.commons.cli.ValueTest.testLongNoArg",0,"public void testLongNoArg(){assertTrue(_cl.hasOption(""c""));assertNull(_cl.getOptionValue(""c""));}"
"org.apache.commons.cli.ValueTest.testLongWithArg",0,"public void testLongWithArg(){assertTrue(_cl.hasOption(""d""));assertNotNull(_cl.getOptionValue(""d""));assertEquals(_cl.getOptionValue(""d""),""bar"");}"
"org.apache.commons.cli.ValueTest.testShortOptionalArgNoValue",0,"public void testShortOptionalArgNoValue()throws Exception {String[]args=new String[]{""-e""};Parser parser=new PosixParser();CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption(""e""));assertNull(cmd.getOptionValue(""e""));}"
"org.apache.commons.cli.ValueTest.testShortOptionalArgValue",0,"public void testShortOptionalArgValue()throws Exception {String[]args=new String[]{""-e"",""everything""};Parser parser=new PosixParser();CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption(""e""));assertEquals(""everything"",cmd.getOptionValue(""e""));}"
"org.apache.commons.cli.ValueTest.testLongOptionalNoValue",0,"public void testLongOptionalNoValue()throws Exception {String[]args=new String[]{""--fish""};Parser parser=new PosixParser();CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption(""fish""));assertNull(cmd.getOptionValue(""fish""));}"
"org.apache.commons.cli.ValueTest.testLongOptionalArgValue",0,"public void testLongOptionalArgValue()throws Exception {String[]args=new String[]{""--fish"",""face""};Parser parser=new PosixParser();CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption(""fish""));assertEquals(""face"",cmd.getOptionValue(""fish""));}"
"org.apache.commons.cli.ValueTest.testShortOptionalArgValues",0,"public void testShortOptionalArgValues()throws Exception {String[]args=new String[]{""-j"",""ink"",""idea""};Parser parser=new PosixParser();CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption(""j""));assertEquals(""ink"",cmd.getOptionValue(""j""));assertEquals(""ink"",cmd.getOptionValues(""j"")[0]);assertEquals(""idea"",cmd.getOptionValues(""j"")[1]);assertEquals(cmd.getArgs().length,0);}"
"org.apache.commons.cli.ValueTest.testLongOptionalArgValues",0,"public void testLongOptionalArgValues()throws Exception {String[]args=new String[]{""--gravy"",""gold"",""garden""};Parser parser=new PosixParser();CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption(""gravy""));assertEquals(""gold"",cmd.getOptionValue(""gravy""));assertEquals(""gold"",cmd.getOptionValues(""gravy"")[0]);assertEquals(""garden"",cmd.getOptionValues(""gravy"")[1]);assertEquals(cmd.getArgs().length,0);}"
"org.apache.commons.cli.ValueTest.testShortOptionalNArgValues",0,"public void testShortOptionalNArgValues()throws Exception {String[]args=new String[]{""-i"",""ink"",""idea"",""isotope"",""ice""};Parser parser=new PosixParser();CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption(""i""));assertEquals(""ink"",cmd.getOptionValue(""i""));assertEquals(""ink"",cmd.getOptionValues(""i"")[0]);assertEquals(""idea"",cmd.getOptionValues(""i"")[1]);assertEquals(cmd.getArgs().length,2);assertEquals(""isotope"",cmd.getArgs()[0]);assertEquals(""ice"",cmd.getArgs()[1]);}"
"org.apache.commons.cli.ValueTest.testLongOptionalNArgValues",0,"public void testLongOptionalNArgValues()throws Exception {String[]args=new String[]{""--hide"",""house"",""hair"",""head""};Parser parser=new PosixParser();CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption(""hide""));assertEquals(""house"",cmd.getOptionValue(""hide""));assertEquals(""house"",cmd.getOptionValues(""hide"")[0]);assertEquals(""hair"",cmd.getOptionValues(""hide"")[1]);assertEquals(cmd.getArgs().length,1);assertEquals(""head"",cmd.getArgs()[0]);}"
"org.apache.commons.cli.bug.BugCLI133Test.testOrder",0,"public void testOrder()throws ParseException {Option optionA=new Option(""a"",""first"");Options opts=new Options();opts.addOption(optionA);PosixParser posixParser=new PosixParser();CommandLine line=posixParser.parse(opts,null);assertFalse(line.hasOption(null));}"
"org.apache.commons.cli.bug.BugCLI148Test.testWorkaround1",0,"public void testWorkaround1()throws Exception {CommandLineParser parser=new PosixParser();String[]args=new String[]{""-t-something""};CommandLine commandLine=parser.parse(options,args);assertEquals(""-something"",commandLine.getOptionValue('t'));}"
"org.apache.commons.cli.bug.BugCLI148Test.testWorkaround2",0,"public void testWorkaround2()throws Exception {CommandLineParser parser=new PosixParser();String[]args=new String[]{""-t"",""\""-something\""""};CommandLine commandLine=parser.parse(options,args);assertEquals(""-something"",commandLine.getOptionValue('t'));}"
"org.apache.commons.cli.bug.BugCLI71Test.testBasic",0,"public void testBasic()throws Exception {String[]args=new String[]{""-a"",""Caesar"",""-k"",""A""};CommandLine line=parser.parse(options,args);assertEquals(""Caesar"",line.getOptionValue(""a""));assertEquals(""A"",line.getOptionValue(""k""));}"
"org.apache.commons.cli.bug.BugCLI71Test.testMistakenArgument",0,"public void testMistakenArgument()throws Exception {String[]args=new String[]{""-a"",""Caesar"",""-k"",""A""};CommandLine line=parser.parse(options,args);args=new String[]{""-a"",""Caesar"",""-k"",""a""};line=parser.parse(options,args);assertEquals(""Caesar"",line.getOptionValue(""a""));assertEquals(""a"",line.getOptionValue(""k""));}"
"org.apache.commons.cli.bug.BugCLI71Test.testLackOfError",0,"public void testLackOfError()throws Exception {String[]args=new String[]{""-k"",""-a"",""Caesar""};try {CommandLine line=parser.parse(options,args);fail(""MissingArgumentException expected"");}catch(MissingArgumentException e){assertEquals(""option missing an argument"",""k"",e.getOption().getOpt());}}"
"org.apache.commons.cli.bug.BugCLI71Test.testGetsDefaultIfOptional",0,"public void testGetsDefaultIfOptional()throws Exception {String[]args=new String[]{""-k"",""-a"",""Caesar""};options.getOption(""k"").setOptionalArg(true);CommandLine line=parser.parse(options,args);assertEquals(""Caesar"",line.getOptionValue(""a""));assertEquals(""a"",line.getOptionValue(""k"",""a""));}"
"org.apache.commons.cli.ValuesTest.testShortArgs",0,"public void testShortArgs(){assertTrue(""Option a is not set"",cmd.hasOption(""a""));assertTrue(""Option c is not set"",cmd.hasOption(""c""));assertNull(cmd.getOptionValues(""a""));assertNull(cmd.getOptionValues(""c""));}"
"org.apache.commons.cli.ValuesTest.testShortArgsWithValue",0,"public void testShortArgsWithValue(){assertTrue(""Option b is not set"",cmd.hasOption(""b""));assertTrue(cmd.getOptionValue(""b"").equals(""foo""));assertEquals(1,cmd.getOptionValues(""b"").length);assertTrue(""Option d is not set"",cmd.hasOption(""d""));assertTrue(cmd.getOptionValue(""d"").equals(""bar""));assertEquals(1,cmd.getOptionValues(""d"").length);}"
"org.apache.commons.cli.ValuesTest.testMultipleArgValues",0,"public void testMultipleArgValues(){assertTrue(""Option e is not set"",cmd.hasOption(""e""));ArrayAssert.assertEquals(new String[]{""one"",""two""},cmd.getOptionValues(""e""));}"
"org.apache.commons.cli.ValuesTest.testTwoArgValues",0,"public void testTwoArgValues(){assertTrue(""Option g is not set"",cmd.hasOption(""g""));ArrayAssert.assertEquals(new String[]{""val1"",""val2""},cmd.getOptionValues(""g""));}"
"org.apache.commons.cli.ValuesTest.testComplexValues",0,"public void testComplexValues(){assertTrue(""Option i is not set"",cmd.hasOption(""i""));assertTrue(""Option h is not set"",cmd.hasOption(""h""));ArrayAssert.assertEquals(new String[]{""val1"",""val2""},cmd.getOptionValues(""h""));}"
"org.apache.commons.cli.ValuesTest.testExtraArgs",0,"public void testExtraArgs(){ArrayAssert.assertEquals(""Extra args"",new String[]{""arg1"",""arg2"",""arg3""},cmd.getArgs());}"
"org.apache.commons.cli.ValuesTest.testCharSeparator",0,"public void testCharSeparator(){assertTrue(""Option j is not set"",cmd.hasOption(""j""));assertTrue(""Option j is not set"",cmd.hasOption('j'));ArrayAssert.assertEquals(new String[]{""key"",""value"",""key"",""value""},cmd.getOptionValues(""j""));ArrayAssert.assertEquals(new String[]{""key"",""value"",""key"",""value""},cmd.getOptionValues('j'));assertTrue(""Option k is not set"",cmd.hasOption(""k""));assertTrue(""Option k is not set"",cmd.hasOption('k'));ArrayAssert.assertEquals(new String[]{""key1"",""value1"",""key2"",""value2""},cmd.getOptionValues(""k""));ArrayAssert.assertEquals(new String[]{""key1"",""value1"",""key2"",""value2""},cmd.getOptionValues('k'));assertTrue(""Option m is not set"",cmd.hasOption(""m""));assertTrue(""Option m is not set"",cmd.hasOption('m'));ArrayAssert.assertEquals(new String[]{""key"",""value""},cmd.getOptionValues(""m""));ArrayAssert.assertEquals(new String[]{""key"",""value""},cmd.getOptionValues('m'));}"
"org.apache.commons.cli.BugsTest.test11457",0,"public void test11457()throws Exception {Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""verbose"").create());String[]args=new String[]{""--verbose""};CommandLineParser parser=new PosixParser();CommandLine cmd=parser.parse(options,args);assertTrue(cmd.hasOption(""verbose""));}"
"org.apache.commons.cli.BugsTest.test11458",0,"public void test11458()throws Exception {Options options=new Options();options.addOption(OptionBuilder.withValueSeparator('=').hasArgs().create('D'));options.addOption(OptionBuilder.withValueSeparator(':').hasArgs().create('p'));String[]args=new String[]{""-DJAVA_HOME=/opt/java"",""-pfile1:file2:file3""};CommandLineParser parser=new PosixParser();CommandLine cmd=parser.parse(options,args);String[]values=cmd.getOptionValues('D');assertEquals(values[0],""JAVA_HOME"");assertEquals(values[1],""/opt/java"");values=cmd.getOptionValues('p');assertEquals(values[0],""file1"");assertEquals(values[1],""file2"");assertEquals(values[2],""file3"");Iterator iter=cmd.iterator();while (iter.hasNext()){Option opt=(Option)iter.next();switch (opt.getId()){case 'D':      assertEquals(opt.getValue(0),""JAVA_HOME"");assertEquals(opt.getValue(1),""/opt/java"");break;case 'p':assertEquals(opt.getValue(0),""file1"");assertEquals(opt.getValue(1),""file2"");assertEquals(opt.getValue(2),""file3"");break;default:fail(""-D option not found"");}}}"
"org.apache.commons.cli.BugsTest.test11680",0,"public void test11680()throws Exception {Options options=new Options();options.addOption(""f"",true,""foobar"");options.addOption(""m"",true,""missing"");String[]args=new String[]{""-f"",""foo""};CommandLineParser parser=new PosixParser();CommandLine cmd=parser.parse(options,args);cmd.getOptionValue(""f"",""default f"");cmd.getOptionValue(""m"",""default m"");}"
"org.apache.commons.cli.BugsTest.test11456",0,"public void test11456()throws Exception {Options options=new Options();options.addOption(OptionBuilder.hasOptionalArg().create('a'));options.addOption(OptionBuilder.hasArg().create('b'));String[]args=new String[]{""-a"",""-bvalue""};CommandLineParser parser=new PosixParser();CommandLine cmd=parser.parse(options,args);assertEquals(cmd.getOptionValue('b'),""value"");options=new Options();options.addOption(OptionBuilder.hasOptionalArg().create('a'));options.addOption(OptionBuilder.hasArg().create('b'));args=new String[]{""-a"",""-b"",""value""};parser=new GnuParser();cmd=parser.parse(options,args);assertEquals(cmd.getOptionValue('b'),""value"");}"
"org.apache.commons.cli.BugsTest.test12210",0,"public void test12210()throws Exception {Options mainOptions=new Options();String[]argv=new String[]{""-exec"",""-exec_opt1"",""-exec_opt2""};OptionGroup grp=new OptionGroup();grp.addOption(new Option(""exec"",false,""description for this option""));grp.addOption(new Option(""rep"",false,""description for this option""));mainOptions.addOptionGroup(grp);Options execOptions=new Options();execOptions.addOption(""exec_opt1"",false,"" desc"");execOptions.addOption(""exec_opt2"",false,"" desc"");Options repOptions=new Options();repOptions.addOption(""repopto"",false,""desc"");repOptions.addOption(""repoptt"",false,""desc"");GnuParser parser=new GnuParser();CommandLine cmd=parser.parse(mainOptions,argv,true);argv=cmd.getArgs();if (cmd.hasOption(""exec"")){cmd=parser.parse(execOptions,argv,false);assertTrue(cmd.hasOption(""exec_opt1""));assertTrue(cmd.hasOption(""exec_opt2""));}else   if (cmd.hasOption(""rep"")){cmd=parser.parse(repOptions,argv,false);}else {fail(""exec option not found"");}}"
"org.apache.commons.cli.BugsTest.test13425",0,"public void test13425()throws Exception {Options options=new Options();Option oldpass=OptionBuilder.withLongOpt(""old-password"").withDescription(""Use this option to specify the old password"").hasArg().create('o');Option newpass=OptionBuilder.withLongOpt(""new-password"").withDescription(""Use this option to specify the new password"").hasArg().create('n');String[]args={""-o"",""-n"",""newpassword""};options.addOption(oldpass);options.addOption(newpass);Parser parser=new PosixParser();try {parser.parse(options,args);}catch(Exception exp){assertTrue(exp != null);return;}fail(""MissingArgumentException not caught."");}"
"org.apache.commons.cli.BugsTest.test13666",0,"public void test13666()throws Exception {Options options=new Options();Option dir=OptionBuilder.withDescription(""dir"").hasArg().create('d');options.addOption(dir);final PrintStream oldSystemOut=System.out;try {final ByteArrayOutputStream bytes=new ByteArrayOutputStream();final PrintStream print=new PrintStream(bytes);print.println();final String eol=bytes.toString();bytes.reset();System.setOut(new PrintStream(bytes));HelpFormatter formatter=new HelpFormatter();formatter.printHelp(""dir"",options);assertEquals(""usage: dir"" + eol + "" -d <arg>   dir""+ eol,bytes.toString());}finally {System.setOut(oldSystemOut);}}"
"org.apache.commons.cli.BugsTest.test13935",0,"public void test13935()throws Exception {OptionGroup directions=new OptionGroup();Option left=new Option(""l"",""left"",false,""go left"");Option right=new Option(""r"",""right"",false,""go right"");Option straight=new Option(""s"",""straight"",false,""go straight"");Option forward=new Option(""f"",""forward"",false,""go forward"");forward.setRequired(true);directions.addOption(left);directions.addOption(right);directions.setRequired(true);Options opts=new Options();opts.addOptionGroup(directions);opts.addOption(straight);CommandLineParser parser=new PosixParser();boolean exception=false;String[]args=new String[]{};try {CommandLine line=parser.parse(opts,args);}catch(ParseException exp){exception=true;}if (!exception){fail(""Expected exception not caught."");}exception=false;args=new String[]{""-s""};try {CommandLine line=parser.parse(opts,args);}catch(ParseException exp){exception=true;}if (!exception){fail(""Expected exception not caught."");}exception=false;args=new String[]{""-s"",""-l""};try {parser.parse(opts,args);}catch(ParseException exp){fail(""Unexpected exception: "" + exp.getClass().getName()+ "":""+ exp.getMessage());}opts.addOption(forward);args=new String[]{""-s"",""-l"",""-f""};try {parser.parse(opts,args);}catch(ParseException exp){fail(""Unexpected exception: "" + exp.getClass().getName()+ "":""+ exp.getMessage());}}"
"org.apache.commons.cli.BugsTest.test14786",0,"public void test14786()throws Exception {Option o=OptionBuilder.isRequired().withDescription(""test"").create(""test"");Options opts=new Options();opts.addOption(o);opts.addOption(o);CommandLineParser parser=new GnuParser();String[]args=new String[]{""-test""};CommandLine line=parser.parse(opts,args);assertTrue(line.hasOption(""test""));}"
"org.apache.commons.cli.BugsTest.test15046",0,"public void test15046()throws Exception {CommandLineParser parser=new PosixParser();String[]CLI_ARGS=new String[]{""-z"",""c""};Options options=new Options();options.addOption(new Option(""z"",""timezone"",true,""affected option""));parser.parse(options,CLI_ARGS);options.addOption(""c"",""conflict"",true,""conflict option"");CommandLine line=parser.parse(options,CLI_ARGS);assertEquals(line.getOptionValue('z'),""c"");assertTrue(!line.hasOption(""c""));}"
"org.apache.commons.cli.BugsTest.test15648",0,"public void test15648()throws Exception {CommandLineParser parser=new PosixParser();final String[]args=new String[]{""-m"",""\""Two Words\""""};Option m=OptionBuilder.hasArgs().create(""m"");Options options=new Options();options.addOption(m);CommandLine line=parser.parse(options,args);assertEquals(""Two Words"",line.getOptionValue(""m""));}"
"org.apache.commons.cli.BugsTest.test31148",0,"public void test31148()throws ParseException {Option multiArgOption=new Option(""o"",""option with multiple args"");multiArgOption.setArgs(1);Options options=new Options();options.addOption(multiArgOption);Parser parser=new PosixParser();String[]args=new String[]{};Properties props=new Properties();props.setProperty(""o"",""ovalue"");CommandLine cl=parser.parse(options,args,props);assertTrue(cl.hasOption('o'));assertEquals(""ovalue"",cl.getOptionValue('o'));}"
"org.apache.commons.cli.BugsTest.test27635",0,"public void test27635(){}"
"org.apache.commons.cli.HelpFormatterTest.testFindWrapPos",0,"public void testFindWrapPos()throws Exception {HelpFormatter hf=new HelpFormatter();String text=""This is a test."";assertEquals(""wrap position"",7,hf.findWrapPos(text,8,0));assertEquals(""wrap position 2"",-1,hf.findWrapPos(text,8,8));text=""aaaa aa"";assertEquals(""wrap position 3"",4,hf.findWrapPos(text,3,0));}"
"org.apache.commons.cli.HelpFormatterTest.testPrintWrapped",0,"public void testPrintWrapped()throws Exception {StringBuffer sb=new StringBuffer();HelpFormatter hf=new HelpFormatter();String text=""This is a test."";String expected=""This is a"" + hf.getNewLine()+ ""test."";hf.renderWrappedText(sb,12,0,text);assertEquals(""single line text"",expected,sb.toString());sb.setLength(0);expected=""This is a"" + hf.getNewLine()+ ""    test."";hf.renderWrappedText(sb,12,4,text);assertEquals(""single line padded text"",expected,sb.toString());text=""  -p,--period <PERIOD>  PERIOD is time duration of form "" + ""DATE[-DATE]where DATE has form YYYY[MM[DD]]"";sb.setLength(0);expected=""  -p,--period <PERIOD>  PERIOD is time duration of"" + hf.getNewLine()+ ""                        form DATE[-DATE]where DATE""+ hf.getNewLine()+ ""                        has form YYYY[MM[DD]]"";hf.renderWrappedText(sb,53,24,text);assertEquals(""single line padded text 2"",expected,sb.toString());text=""aaaa aaaa aaaa"" + hf.getNewLine()+ ""aaaaaa""+ hf.getNewLine()+ ""aaaaa"";expected=text;sb.setLength(0);hf.renderWrappedText(sb,16,0,text);assertEquals(""multi line text"",expected,sb.toString());expected=""aaaa aaaa aaaa"" + hf.getNewLine()+ ""    aaaaaa""+ hf.getNewLine()+ ""    aaaaa"";sb.setLength(0);hf.renderWrappedText(sb,16,4,text);assertEquals(""multi-line padded text"",expected,sb.toString());}"
"org.apache.commons.cli.HelpFormatterTest.testPrintOptions",0,"public void testPrintOptions()throws Exception {StringBuffer sb=new StringBuffer();HelpFormatter hf=new HelpFormatter();final int leftPad=1;final int descPad=3;final String lpad=hf.createPadding(leftPad);final String dpad=hf.createPadding(descPad);Options options=null;String expected=null;options=new Options().addOption(""a"",false,""aaaa aaaa aaaa aaaa aaaa"");expected=lpad + ""-a"" + dpad+ ""aaaa aaaa aaaa aaaa aaaa"";hf.renderOptions(sb,60,options,leftPad,descPad);assertEquals(""simple non-wrapped option"",expected,sb.toString());int nextLineTabStop=leftPad + descPad + ""-a"".length();expected=lpad + ""-a"" + dpad+ ""aaaa aaaa aaaa""+ hf.getNewLine()+ hf.createPadding(nextLineTabStop)+ ""aaaa aaaa"";sb.setLength(0);hf.renderOptions(sb,nextLineTabStop + 17,options,leftPad,descPad);assertEquals(""simple wrapped option"",expected,sb.toString());options=new Options().addOption(""a"",""aaa"",false,""dddd dddd dddd dddd"");expected=lpad + ""-a,--aaa"" + dpad+ ""dddd dddd dddd dddd"";sb.setLength(0);hf.renderOptions(sb,60,options,leftPad,descPad);assertEquals(""long non-wrapped option"",expected,sb.toString());nextLineTabStop=leftPad + descPad + ""-a,--aaa"".length();expected=lpad + ""-a,--aaa"" + dpad+ ""dddd dddd""+ hf.getNewLine()+ hf.createPadding(nextLineTabStop)+ ""dddd dddd"";sb.setLength(0);hf.renderOptions(sb,25,options,leftPad,descPad);assertEquals(""long wrapped option"",expected,sb.toString());options=new Options().addOption(""a"",""aaa"",false,""dddd dddd dddd dddd"").addOption(""b"",false,""feeee eeee eeee eeee"");expected=lpad + ""-a,--aaa"" + dpad+ ""dddd dddd""+ hf.getNewLine()+ hf.createPadding(nextLineTabStop)+ ""dddd dddd""+ hf.getNewLine()+ lpad+ ""-b      ""+ dpad+ ""feeee eeee""+ hf.getNewLine()+ hf.createPadding(nextLineTabStop)+ ""eeee eeee"";sb.setLength(0);hf.renderOptions(sb,25,options,leftPad,descPad);assertEquals(""multiple wrapped options"",expected,sb.toString());}"
"org.apache.commons.cli.HelpFormatterTest.testPrintHelpWithEmptySyntax",0,"public void testPrintHelpWithEmptySyntax(){HelpFormatter formatter=new HelpFormatter();try {formatter.printHelp(null,new Options());fail(""null command line syntax should be rejected"");}catch(IllegalArgumentException e){}try {formatter.printHelp("""",new Options());fail(""empty command line syntax should be rejected"");}catch(IllegalArgumentException e){}}"
"org.apache.commons.cli.HelpFormatterTest.testAutomaticUsage",0,"public void testAutomaticUsage()throws Exception {HelpFormatter hf=new HelpFormatter();Options options=null;String expected=""usage: app [-a]"";ByteArrayOutputStream out=new ByteArrayOutputStream();PrintWriter pw=new PrintWriter(out);options=new Options().addOption(""a"",false,""aaaa aaaa aaaa aaaa aaaa"");hf.printUsage(pw,60,""app"",options);pw.flush();assertEquals(""simple auto usage"",expected,out.toString().trim());out.reset();expected=""usage: app [-a][-b]"";options=new Options().addOption(""a"",false,""aaaa aaaa aaaa aaaa aaaa"").addOption(""b"",false,""bbb"");hf.printUsage(pw,60,""app"",options);pw.flush();assertEquals(""simple auto usage"",expected,out.toString().trim());out.reset();}"
"org.apache.commons.cli.HelpFormatterTest.testPrintUsage",0,"public void testPrintUsage(){Option optionA=new Option(""a"",""first"");Option optionB=new Option(""b"",""second"");Option optionC=new Option(""c"",""third"");Options opts=new Options();opts.addOption(optionA);opts.addOption(optionB);opts.addOption(optionC);HelpFormatter helpFormatter=new HelpFormatter();ByteArrayOutputStream bytesOut=new ByteArrayOutputStream();PrintWriter printWriter=new PrintWriter(bytesOut);helpFormatter.printUsage(printWriter,80,""app"",opts);printWriter.close();assertEquals(""usage: app [-a][-b][-c]"" + EOL,bytesOut.toString());}"
"org.apache.commons.cli.HelpFormatterTest.testPrintSortedUsage",0,"public void testPrintSortedUsage(){Options opts=new Options();opts.addOption(new Option(""a"",""first""));opts.addOption(new Option(""b"",""second""));opts.addOption(new Option(""c"",""third""));HelpFormatter helpFormatter=new HelpFormatter();helpFormatter.setOptionComparator(new Comparator(){public int compare(Object o1,Object o2){Option opt1=(Option)o1;Option opt2=(Option)o2;return opt2.getKey().compareToIgnoreCase(opt1.getKey());}});StringWriter out=new StringWriter();helpFormatter.printUsage(new PrintWriter(out),80,""app"",opts);assertEquals(""usage: app [-c][-b][-a]"" + EOL,out.toString());}"
"org.apache.commons.cli.HelpFormatterTest.testPrintSortedUsageWithNullComparator",0,"public void testPrintSortedUsageWithNullComparator(){Options opts=new Options();opts.addOption(new Option(""a"",""first""));opts.addOption(new Option(""b"",""second""));opts.addOption(new Option(""c"",""third""));HelpFormatter helpFormatter=new HelpFormatter();helpFormatter.setOptionComparator(null);StringWriter out=new StringWriter();helpFormatter.printUsage(new PrintWriter(out),80,""app"",opts);assertEquals(""usage: app [-a][-b][-c]"" + EOL,out.toString());}"
"org.apache.commons.cli.HelpFormatterTest.testPrintOptionGroupUsage",0,"public void testPrintOptionGroupUsage(){OptionGroup group=new OptionGroup();group.addOption(OptionBuilder.create(""a""));group.addOption(OptionBuilder.create(""b""));group.addOption(OptionBuilder.create(""c""));Options options=new Options();options.addOptionGroup(group);StringWriter out=new StringWriter();HelpFormatter formatter=new HelpFormatter();formatter.printUsage(new PrintWriter(out),80,""app"",options);assertEquals(""usage: app [-a | -b | -c]"" + EOL,out.toString());}"
"org.apache.commons.cli.HelpFormatterTest.testPrintRequiredOptionGroupUsage",0,"public void testPrintRequiredOptionGroupUsage(){OptionGroup group=new OptionGroup();group.addOption(OptionBuilder.create(""a""));group.addOption(OptionBuilder.create(""b""));group.addOption(OptionBuilder.create(""c""));group.setRequired(true);Options options=new Options();options.addOptionGroup(group);StringWriter out=new StringWriter();HelpFormatter formatter=new HelpFormatter();formatter.printUsage(new PrintWriter(out),80,""app"",options);assertEquals(""usage: app -a | -b | -c"" + EOL,out.toString());}"
"org.apache.commons.cli.HelpFormatterTest.testPrintOptionWithEmptyArgNameUsage",0,"public void testPrintOptionWithEmptyArgNameUsage(){Option option=new Option(""f"",true,null);option.setArgName("""");option.setRequired(true);Options options=new Options();options.addOption(option);StringWriter out=new StringWriter();HelpFormatter formatter=new HelpFormatter();formatter.printUsage(new PrintWriter(out),80,""app"",options);assertEquals(""usage: app -f"" + EOL,out.toString());}"
"org.apache.commons.cli.HelpFormatterTest.testRtrim",0,"public void testRtrim(){HelpFormatter formatter=new HelpFormatter();assertEquals(null,formatter.rtrim(null));assertEquals("""",formatter.rtrim(""""));assertEquals(""  foo"",formatter.rtrim(""  foo  ""));}"
"org.apache.commons.cli.HelpFormatterTest.testAccessors",0,"public void testAccessors(){HelpFormatter formatter=new HelpFormatter();formatter.setArgName(""argname"");assertEquals(""arg name"",""argname"",formatter.getArgName());formatter.setDescPadding(3);assertEquals(""desc padding"",3,formatter.getDescPadding());formatter.setLeftPadding(7);assertEquals(""left padding"",7,formatter.getLeftPadding());formatter.setLongOptPrefix(""~~"");assertEquals(""long opt prefix"",""~~"",formatter.getLongOptPrefix());formatter.setNewLine(""\n"");assertEquals(""new line"",""\n"",formatter.getNewLine());formatter.setOptPrefix(""~"");assertEquals(""opt prefix"",""~"",formatter.getOptPrefix());formatter.setSyntaxPrefix(""-> "");assertEquals(""syntax prefix"",""-> "",formatter.getSyntaxPrefix());formatter.setWidth(80);assertEquals(""width"",80,formatter.getWidth());}"
"org.apache.commons.cli.HelpFormatterTest.testHeaderStartingWithLineSeparator",0,"public void testHeaderStartingWithLineSeparator(){Options options=new Options();HelpFormatter formatter=new HelpFormatter();String header=EOL + ""Header"";String footer=""Footer"";StringWriter out=new StringWriter();formatter.printHelp(new PrintWriter(out),80,""foobar"",header,options,2,2,footer,true);assertEquals(""usage: foobar"" + EOL + """"+ EOL+ ""Header""+ EOL+ """"+ EOL+ ""Footer""+ EOL,out.toString());}"
"org.apache.commons.cli.HelpFormatterTest.testOptionWithoutShortFormat",0,"public void testOptionWithoutShortFormat(){Options options=new Options();options.addOption(new Option(""a"",""aaa"",false,""aaaaaaa""));options.addOption(new Option(null,""bbb"",false,""bbbbbbb""));options.addOption(new Option(""c"",null,false,""ccccccc""));HelpFormatter formatter=new HelpFormatter();StringWriter out=new StringWriter();formatter.printHelp(new PrintWriter(out),80,""foobar"","""",options,2,2,"""",true);assertEquals(""usage: foobar [-a][--bbb][-c]"" + EOL + ""  -a,--aaa  aaaaaaa""+ EOL+ ""     --bbb  bbbbbbb""+ EOL+ ""  -c        ccccccc""+ EOL,out.toString());}"
"org.apache.commons.cli.HelpFormatterTest.testOptionWithoutShortFormat2",0,"public void testOptionWithoutShortFormat2(){Option help=new Option(""h"",""help"",false,""print this message"");Option version=new Option(""v"",""version"",false,""print version information"");Option newRun=new Option(""n"",""new"",false,""Create NLT cache entries only for new items"");Option trackerRun=new Option(""t"",""tracker"",false,""Create NLT cache entries only for tracker items"");Option timeLimit=OptionBuilder.withLongOpt(""limit"").hasArg().withValueSeparator().withDescription(""Set time limit for execution,in mintues"").create(""l"");Option age=OptionBuilder.withLongOpt(""age"").hasArg().withValueSeparator().withDescription(""Age (in days)of cache item before being recomputed"").create(""a"");Option server=OptionBuilder.withLongOpt(""server"").hasArg().withValueSeparator().withDescription(""The NLT server address"").create(""s"");Option numResults=OptionBuilder.withLongOpt(""results"").hasArg().withValueSeparator().withDescription(""Number of results per item"").create(""r"");Option configFile=OptionBuilder.withLongOpt(""config"").hasArg().withValueSeparator().withDescription(""Use the specified configuration file"").create();Options mOptions=new Options();mOptions.addOption(help);mOptions.addOption(version);mOptions.addOption(newRun);mOptions.addOption(trackerRun);mOptions.addOption(timeLimit);mOptions.addOption(age);mOptions.addOption(server);mOptions.addOption(numResults);mOptions.addOption(configFile);HelpFormatter formatter=new HelpFormatter();final String EOL=System.getProperty(""line.separator"");StringWriter out=new StringWriter();formatter.printHelp(new PrintWriter(out),80,""commandline"",""header"",mOptions,2,2,""footer"",true);assertEquals(""usage: commandline [-a <arg>][--config <arg>][-h][-l <arg>][-n][-r <arg>]"" + EOL + ""       [-s <arg>][-t][-v]""+ EOL+ ""header""+ EOL+ ""  -a,--age <arg>      Age (in days)of cache item before being recomputed""+ EOL+ ""     --config <arg>   Use the specified configuration file""+ EOL+ ""  -h,--help           print this message""+ EOL+ ""  -l,--limit <arg>    Set time limit for execution,in mintues""+ EOL+ ""  -n,--new            Create NLT cache entries only for new items""+ EOL+ ""  -r,--results <arg>  Number of results per item""+ EOL+ ""  -s,--server <arg>   The NLT server address""+ EOL+ ""  -t,--tracker        Create NLT cache entries only for tracker items""+ EOL+ ""  -v,--version        print version information""+ EOL+ ""footer""+ EOL,out.toString());}"
"org.apache.commons.cli.HelpFormatterTest.testHelpWithLongOptSeparator",0,"public void testHelpWithLongOptSeparator()throws Exception {Options options=new Options();options.addOption(""f"",true,""the file"");options.addOption(OptionBuilder.withLongOpt(""size"").withDescription(""the size"").hasArg().withArgName(""SIZE"").create('s'));options.addOption(OptionBuilder.withLongOpt(""age"").withDescription(""the age"").hasArg().create());HelpFormatter formatter=new HelpFormatter();assertEquals(HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR,formatter.getLongOptSeparator());formatter.setLongOptSeparator(""="");assertEquals(""="",formatter.getLongOptSeparator());StringWriter out=new StringWriter();formatter.printHelp(new PrintWriter(out),80,""create"",""header"",options,2,2,""footer"");assertEquals(""usage: create"" + EOL + ""header""+ EOL+ ""     --age=<arg>    the age""+ EOL+ ""  -f <arg>          the file""+ EOL+ ""  -s,--size=<SIZE>  the size""+ EOL+ ""footer""+ EOL,out.toString());}"
"org.apache.commons.cli.HelpFormatterTest.testUsageWithLongOptSeparator",0,"public void testUsageWithLongOptSeparator()throws Exception {Options options=new Options();options.addOption(""f"",true,""the file"");options.addOption(OptionBuilder.withLongOpt(""size"").withDescription(""the size"").hasArg().withArgName(""SIZE"").create('s'));options.addOption(OptionBuilder.withLongOpt(""age"").withDescription(""the age"").hasArg().create());HelpFormatter formatter=new HelpFormatter();formatter.setLongOptSeparator(""="");StringWriter out=new StringWriter();formatter.printUsage(new PrintWriter(out),80,""create"",options);assertEquals(""usage: create [--age=<arg>][-f <arg>][-s <SIZE>]"",out.toString().trim());}"
"org.apache.commons.cli.DefaultParserTest.testSimpleShort",0,"public void testSimpleShort()throws Exception {String[]args=new String[]{""-a"",""-b"",""toast"",""foo"",""bar""};CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -a is set"",cl.hasOption(""a""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""toast""));assertTrue(""Confirm size of extra args"",cl.getArgList().size()== 2);}"
"org.apache.commons.cli.DefaultParserTest.testSimpleLong",0,"public void testSimpleLong()throws Exception {String[]args=new String[]{""--enable-a"",""--bfile"",""toast"",""foo"",""bar""};CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -a is set"",cl.hasOption(""a""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""toast""));assertTrue(""Confirm arg of --bfile"",cl.getOptionValue(""bfile"").equals(""toast""));assertTrue(""Confirm size of extra args"",cl.getArgList().size()== 2);}"
"org.apache.commons.cli.DefaultParserTest.testMultiple",0,"public void testMultiple()throws Exception {String[]args=new String[]{""-c"",""foobar"",""-b"",""toast""};CommandLine cl=parser.parse(options,args,true);assertTrue(""Confirm -c is set"",cl.hasOption(""c""));assertTrue(""Confirm  3 extra args: "" + cl.getArgList().size(),cl.getArgList().size()== 3);cl=parser.parse(options,cl.getArgs());assertTrue(""Confirm -c is not set"",!cl.hasOption(""c""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""toast""));assertTrue(""Confirm  1 extra arg: "" + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue(""Confirm  value of extra arg: "" + cl.getArgList().get(0),cl.getArgList().get(0).equals(""foobar""));}"
"org.apache.commons.cli.DefaultParserTest.testMultipleWithLong",0,"public void testMultipleWithLong()throws Exception {String[]args=new String[]{""--copt"",""foobar"",""--bfile"",""toast""};CommandLine cl=parser.parse(options,args,true);assertTrue(""Confirm -c is set"",cl.hasOption(""c""));assertTrue(""Confirm  3 extra args: "" + cl.getArgList().size(),cl.getArgList().size()== 3);cl=parser.parse(options,cl.getArgs());assertTrue(""Confirm -c is not set"",!cl.hasOption(""c""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""toast""));assertTrue(""Confirm  1 extra arg: "" + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue(""Confirm  value of extra arg: "" + cl.getArgList().get(0),cl.getArgList().get(0).equals(""foobar""));}"
"org.apache.commons.cli.DefaultParserTest.testUnrecognizedOption",0,"public void testUnrecognizedOption()throws Exception {String[]args=new String[]{""-a"",""-d"",""-b"",""toast"",""foo"",""bar""};try {parser.parse(options,args);fail(""UnrecognizedOptionException wasn't thrown"");}catch(UnrecognizedOptionException e){assertEquals(""-d"",e.getOption());}}"
"org.apache.commons.cli.DefaultParserTest.testMissingArg",0,"public void testMissingArg()throws Exception {String[]args=new String[]{""-b""};boolean caught=false;try {parser.parse(options,args);}catch(MissingArgumentException e){caught=true;assertEquals(""option missing an argument"",""b"",e.getOption().getOpt());}assertTrue(""Confirm MissingArgumentException caught"",caught);}"
"org.apache.commons.cli.DefaultParserTest.testDoubleDash1",0,"public void testDoubleDash1()throws Exception {String[]args=new String[]{""--copt"",""--"",""-b"",""toast""};CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -c is set"",cl.hasOption(""c""));assertTrue(""Confirm -b is not set"",!cl.hasOption(""b""));assertTrue(""Confirm 2 extra args: "" + cl.getArgList().size(),cl.getArgList().size()== 2);}"
"org.apache.commons.cli.DefaultParserTest.testDoubleDash2",0,"public void testDoubleDash2()throws Exception {Options options=new Options();options.addOption(OptionBuilder.hasArg().create('n'));options.addOption(OptionBuilder.create('m'));try {parser.parse(options,new String[]{""-n"",""--"",""-m""});fail(""MissingArgumentException not thrown for option -n"");}catch(MissingArgumentException e){assertNotNull(""option null"",e.getOption());assertEquals(""n"",e.getOption().getOpt());}}"
"org.apache.commons.cli.DefaultParserTest.testSingleDash",0,"public void testSingleDash()throws Exception {String[]args=new String[]{""--copt"",""-b"",""-"",""-a"",""-""};CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -a is set"",cl.hasOption(""a""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""-""));assertTrue(""Confirm 1 extra arg: "" + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue(""Confirm value of extra arg: "" + cl.getArgList().get(0),cl.getArgList().get(0).equals(""-""));}"
"org.apache.commons.cli.DefaultParserTest.testStopAtUnexpectedArg",0,"public void testStopAtUnexpectedArg()throws Exception {String[]args=new String[]{""-c"",""foober"",""-b"",""toast""};CommandLine cl=parser.parse(options,args,true);assertTrue(""Confirm -c is set"",cl.hasOption(""c""));assertTrue(""Confirm  3 extra args: "" + cl.getArgList().size(),cl.getArgList().size()== 3);}"
"org.apache.commons.cli.DefaultParserTest.testStopAtExpectedArg",0,"public void testStopAtExpectedArg()throws Exception {String[]args=new String[]{""-b"",""foo""};CommandLine cl=parser.parse(options,args,true);assertTrue(""Confirm -b is set"",cl.hasOption('b'));assertEquals(""Confirm -b is set"",""foo"",cl.getOptionValue('b'));assertTrue(""Confirm no extra args: "" + cl.getArgList().size(),cl.getArgList().size()== 0);}"
"org.apache.commons.cli.DefaultParserTest.testStopAtNonOptionShort",0,"public void testStopAtNonOptionShort()throws Exception {String[]args=new String[]{""-z"",""-a"",""-btoast""};CommandLine cl=parser.parse(options,args,true);assertFalse(""Confirm -a is not set"",cl.hasOption(""a""));assertTrue(""Confirm  3 extra args: "" + cl.getArgList().size(),cl.getArgList().size()== 3);}"
"org.apache.commons.cli.DefaultParserTest.testStopAtNonOptionLong",0,"public void testStopAtNonOptionLong()throws Exception {String[]args=new String[]{""--zop==1"",""-abtoast"",""--b=bar""};CommandLine cl=parser.parse(options,args,true);assertFalse(""Confirm -a is not set"",cl.hasOption(""a""));assertFalse(""Confirm -b is not set"",cl.hasOption(""b""));assertTrue(""Confirm  3 extra args: "" + cl.getArgList().size(),cl.getArgList().size()== 3);}"
"org.apache.commons.cli.DefaultParserTest.testNegativeArgument",0,"public void testNegativeArgument()throws Exception {String[]args=new String[]{""-b"",""-1""};CommandLine cl=parser.parse(options,args);assertEquals(""-1"",cl.getOptionValue(""b""));}"
"org.apache.commons.cli.DefaultParserTest.testNegativeOption",0,"public void testNegativeOption()throws Exception {String[]args=new String[]{""-b"",""-1""};options.addOption(""1"",false,null);CommandLine cl=parser.parse(options,args);assertEquals(""-1"",cl.getOptionValue(""b""));}"
"org.apache.commons.cli.DefaultParserTest.testArgumentStartingWithHyphen",0,"public void testArgumentStartingWithHyphen()throws Exception {String[]args=new String[]{""-b"",""-foo""};CommandLine cl=parser.parse(options,args);assertEquals(""-foo"",cl.getOptionValue(""b""));}"
"org.apache.commons.cli.DefaultParserTest.testShortWithEqual",0,"public void testShortWithEqual()throws Exception {String[]args=new String[]{""-f=bar""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""foo"").hasArg().create('f'));CommandLine cl=parser.parse(options,args);assertEquals(""bar"",cl.getOptionValue(""foo""));}"
"org.apache.commons.cli.DefaultParserTest.testShortWithoutEqual",0,"public void testShortWithoutEqual()throws Exception {String[]args=new String[]{""-fbar""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""foo"").hasArg().create('f'));CommandLine cl=parser.parse(options,args);assertEquals(""bar"",cl.getOptionValue(""foo""));}"
"org.apache.commons.cli.DefaultParserTest.testLongWithEqualDoubleDash",0,"public void testLongWithEqualDoubleDash()throws Exception {String[]args=new String[]{""--foo=bar""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""foo"").hasArg().create('f'));CommandLine cl=parser.parse(options,args);assertEquals(""bar"",cl.getOptionValue(""foo""));}"
"org.apache.commons.cli.DefaultParserTest.testLongWithEqualSingleDash",0,"public void testLongWithEqualSingleDash()throws Exception {String[]args=new String[]{""-foo=bar""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""foo"").hasArg().create('f'));CommandLine cl=parser.parse(options,args);assertEquals(""bar"",cl.getOptionValue(""foo""));}"
"org.apache.commons.cli.DefaultParserTest.testLongWithoutEqualSingleDash",0,"public void testLongWithoutEqualSingleDash()throws Exception {String[]args=new String[]{""-foobar""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""foo"").hasArg().create('f'));CommandLine cl=parser.parse(options,args);assertEquals(""bar"",cl.getOptionValue(""foo""));}"
"org.apache.commons.cli.DefaultParserTest.testAmbiguousLongWithoutEqualSingleDash",0,"public void testAmbiguousLongWithoutEqualSingleDash()throws Exception {String[]args=new String[]{""-b"",""-foobar""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""foo"").hasOptionalArg().create('f'));options.addOption(OptionBuilder.withLongOpt(""bar"").hasOptionalArg().create('b'));CommandLine cl=parser.parse(options,args);assertTrue(cl.hasOption(""b""));assertTrue(cl.hasOption(""f""));assertEquals(""bar"",cl.getOptionValue(""foo""));}"
"org.apache.commons.cli.DefaultParserTest.testLongWithoutEqualDoubleDash",0,"public void testLongWithoutEqualDoubleDash()throws Exception {String[]args=new String[]{""--foobar""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""foo"").hasArg().create('f'));CommandLine cl=parser.parse(options,args,true);assertFalse(cl.hasOption(""foo""));}"
"org.apache.commons.cli.DefaultParserTest.testLongWithUnexpectedArgument1",0,"public void testLongWithUnexpectedArgument1()throws Exception {String[]args=new String[]{""--foo=bar""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""foo"").create('f'));try {parser.parse(options,args);}catch(UnrecognizedOptionException e){assertEquals(""--foo=bar"",e.getOption());return;}fail(""UnrecognizedOptionException not thrown"");}"
"org.apache.commons.cli.DefaultParserTest.testLongWithUnexpectedArgument2",0,"public void testLongWithUnexpectedArgument2()throws Exception {String[]args=new String[]{""-foobar""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""foo"").create('f'));try {parser.parse(options,args);}catch(UnrecognizedOptionException e){assertEquals(""-foobar"",e.getOption());return;}fail(""UnrecognizedOptionException not thrown"");}"
"org.apache.commons.cli.DefaultParserTest.testShortWithUnexpectedArgument",0,"public void testShortWithUnexpectedArgument()throws Exception {String[]args=new String[]{""-f=bar""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""foo"").create('f'));try {parser.parse(options,args);}catch(UnrecognizedOptionException e){assertEquals(""-f=bar"",e.getOption());return;}fail(""UnrecognizedOptionException not thrown"");}"
"org.apache.commons.cli.DefaultParserTest.testPropertiesOption1",0,"public void testPropertiesOption1()throws Exception {String[]args=new String[]{""-Jsource=1.5"",""-J"",""target"",""1.5"",""foo""};Options options=new Options();options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).create('J'));CommandLine cl=parser.parse(options,args);List values=Arrays.asList(cl.getOptionValues(""J""));assertNotNull(""null values"",values);assertEquals(""number of values"",4,values.size());assertEquals(""value 1"",""source"",values.get(0));assertEquals(""value 2"",""1.5"",values.get(1));assertEquals(""value 3"",""target"",values.get(2));assertEquals(""value 4"",""1.5"",values.get(3));List argsleft=cl.getArgList();assertEquals(""Should be 1 arg left"",1,argsleft.size());assertEquals(""Expecting foo"",""foo"",argsleft.get(0));}"
"org.apache.commons.cli.DefaultParserTest.testPropertiesOption2",0,"public void testPropertiesOption2()throws Exception {String[]args=new String[]{""-Dparam1"",""-Dparam2=value2"",""-D""};Options options=new Options();options.addOption(OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D'));CommandLine cl=parser.parse(options,args);Properties props=cl.getOptionProperties(""D"");assertNotNull(""null properties"",props);assertEquals(""number of properties in "" + props,2,props.size());assertEquals(""property 1"",""true"",props.getProperty(""param1""));assertEquals(""property 2"",""value2"",props.getProperty(""param2""));List argsleft=cl.getArgList();assertEquals(""Should be no arg left"",0,argsleft.size());}"
"org.apache.commons.cli.DefaultParserTest.testUnambiguousPartialLongOption1",0,"public void testUnambiguousPartialLongOption1()throws Exception {String[]args=new String[]{""--ver""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""version"").create());options.addOption(OptionBuilder.withLongOpt(""help"").create());CommandLine cl=parser.parse(options,args);assertTrue(""Confirm --version is set"",cl.hasOption(""version""));}"
"org.apache.commons.cli.DefaultParserTest.testUnambiguousPartialLongOption2",0,"public void testUnambiguousPartialLongOption2()throws Exception {String[]args=new String[]{""-ver""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""version"").create());options.addOption(OptionBuilder.withLongOpt(""help"").create());CommandLine cl=parser.parse(options,args);assertTrue(""Confirm --version is set"",cl.hasOption(""version""));}"
"org.apache.commons.cli.DefaultParserTest.testUnambiguousPartialLongOption3",0,"public void testUnambiguousPartialLongOption3()throws Exception {String[]args=new String[]{""--ver=1""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""verbose"").hasOptionalArg().create());options.addOption(OptionBuilder.withLongOpt(""help"").create());CommandLine cl=parser.parse(options,args);assertTrue(""Confirm --verbose is set"",cl.hasOption(""verbose""));assertEquals(""1"",cl.getOptionValue(""verbose""));}"
"org.apache.commons.cli.DefaultParserTest.testUnambiguousPartialLongOption4",0,"public void testUnambiguousPartialLongOption4()throws Exception {String[]args=new String[]{""-ver=1""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""verbose"").hasOptionalArg().create());options.addOption(OptionBuilder.withLongOpt(""help"").create());CommandLine cl=parser.parse(options,args);assertTrue(""Confirm --verbose is set"",cl.hasOption(""verbose""));assertEquals(""1"",cl.getOptionValue(""verbose""));}"
"org.apache.commons.cli.DefaultParserTest.testAmbiguousPartialLongOption1",0,"public void testAmbiguousPartialLongOption1()throws Exception {String[]args=new String[]{""--ver""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""version"").create());options.addOption(OptionBuilder.withLongOpt(""verbose"").create());boolean caught=false;try {parser.parse(options,args);}catch(AmbiguousOptionException e){caught=true;assertEquals(""Partial option"",""--ver"",e.getOption());assertNotNull(""Matching options null"",e.getMatchingOptions());assertEquals(""Matching options size"",2,e.getMatchingOptions().size());}assertTrue(""Confirm MissingArgumentException caught"",caught);}"
"org.apache.commons.cli.DefaultParserTest.testAmbiguousPartialLongOption2",0,"public void testAmbiguousPartialLongOption2()throws Exception {String[]args=new String[]{""-ver""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""version"").create());options.addOption(OptionBuilder.withLongOpt(""verbose"").create());boolean caught=false;try {parser.parse(options,args);}catch(AmbiguousOptionException e){caught=true;assertEquals(""Partial option"",""-ver"",e.getOption());assertNotNull(""Matching options null"",e.getMatchingOptions());assertEquals(""Matching options size"",2,e.getMatchingOptions().size());}assertTrue(""Confirm MissingArgumentException caught"",caught);}"
"org.apache.commons.cli.DefaultParserTest.testAmbiguousPartialLongOption3",0,"public void testAmbiguousPartialLongOption3()throws Exception {String[]args=new String[]{""--ver=1""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""version"").create());options.addOption(OptionBuilder.withLongOpt(""verbose"").hasOptionalArg().create());boolean caught=false;try {parser.parse(options,args);}catch(AmbiguousOptionException e){caught=true;assertEquals(""Partial option"",""--ver"",e.getOption());assertNotNull(""Matching options null"",e.getMatchingOptions());assertEquals(""Matching options size"",2,e.getMatchingOptions().size());}assertTrue(""Confirm MissingArgumentException caught"",caught);}"
"org.apache.commons.cli.DefaultParserTest.testAmbiguousPartialLongOption4",0,"public void testAmbiguousPartialLongOption4()throws Exception {String[]args=new String[]{""-ver=1""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""version"").create());options.addOption(OptionBuilder.withLongOpt(""verbose"").hasOptionalArg().create());boolean caught=false;try {parser.parse(options,args);}catch(AmbiguousOptionException e){caught=true;assertEquals(""Partial option"",""-ver"",e.getOption());assertNotNull(""Matching options null"",e.getMatchingOptions());assertEquals(""Matching options size"",2,e.getMatchingOptions().size());}assertTrue(""Confirm MissingArgumentException caught"",caught);}"
"org.apache.commons.cli.DefaultParserTest.testPartialLongOptionSingleDash",0,"public void testPartialLongOptionSingleDash()throws Exception {String[]args=new String[]{""-ver""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""version"").create());options.addOption(OptionBuilder.hasArg().create('v'));CommandLine cl=parser.parse(options,args);assertTrue(""Confirm --version is set"",cl.hasOption(""version""));assertTrue(""Confirm -v is not set"",!cl.hasOption(""v""));}"
"org.apache.commons.cli.DefaultParserTest.testWithRequiredOption",0,"public void testWithRequiredOption()throws Exception {String[]args=new String[]{""-b"",""file""};Options options=new Options();options.addOption(""a"",""enable-a"",false,null);options.addOption(OptionBuilder.withLongOpt(""bfile"").hasArg().isRequired().create('b'));CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -a is NOT set"",!cl.hasOption(""a""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""file""));assertTrue(""Confirm NO of extra args"",cl.getArgList().size()== 0);}"
"org.apache.commons.cli.DefaultParserTest.testOptionAndRequiredOption",0,"public void testOptionAndRequiredOption()throws Exception {String[]args=new String[]{""-a"",""-b"",""file""};Options options=new Options();options.addOption(""a"",""enable-a"",false,null);options.addOption(OptionBuilder.withLongOpt(""bfile"").hasArg().isRequired().create('b'));CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -a is set"",cl.hasOption(""a""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""file""));assertTrue(""Confirm NO of extra args"",cl.getArgList().size()== 0);}"
"org.apache.commons.cli.DefaultParserTest.testMissingRequiredOption",0,"public void testMissingRequiredOption(){String[]args=new String[]{""-a""};Options options=new Options();options.addOption(""a"",""enable-a"",false,null);options.addOption(OptionBuilder.withLongOpt(""bfile"").hasArg().isRequired().create('b'));try {parser.parse(options,args);fail(""exception should have been thrown"");}catch(MissingOptionException e){assertEquals(""Incorrect exception message"",""Missing required option: b"",e.getMessage());assertTrue(e.getMissingOptions().contains(""b""));}catch(ParseException e){fail(""expected to catch MissingOptionException"");}}"
"org.apache.commons.cli.DefaultParserTest.testMissingRequiredOptions",0,"public void testMissingRequiredOptions(){String[]args=new String[]{""-a""};Options options=new Options();options.addOption(""a"",""enable-a"",false,null);options.addOption(OptionBuilder.withLongOpt(""bfile"").hasArg().isRequired().create('b'));options.addOption(OptionBuilder.withLongOpt(""cfile"").hasArg().isRequired().create('c'));try {parser.parse(options,args);fail(""exception should have been thrown"");}catch(MissingOptionException e){assertEquals(""Incorrect exception message"",""Missing required options: b,c"",e.getMessage());assertTrue(e.getMissingOptions().contains(""b""));assertTrue(e.getMissingOptions().contains(""c""));}catch(ParseException e){fail(""expected to catch MissingOptionException"");}}"
"org.apache.commons.cli.DefaultParserTest.testMissingRequiredGroup",0,"public void testMissingRequiredGroup()throws Exception {OptionGroup group=new OptionGroup();group.addOption(OptionBuilder.create(""a""));group.addOption(OptionBuilder.create(""b""));group.setRequired(true);Options options=new Options();options.addOptionGroup(group);options.addOption(OptionBuilder.isRequired().create(""c""));try {parser.parse(options,new String[]{""-c""});fail(""MissingOptionException not thrown"");}catch(MissingOptionException e){assertEquals(1,e.getMissingOptions().size());assertTrue(e.getMissingOptions().get(0)instanceof OptionGroup);}catch(ParseException e){fail(""Expected to catch MissingOptionException"");}}"
"org.apache.commons.cli.DefaultParserTest.testOptionGroup",0,"public void testOptionGroup()throws Exception {OptionGroup group=new OptionGroup();group.addOption(OptionBuilder.create(""a""));group.addOption(OptionBuilder.create(""b""));Options options=new Options();options.addOptionGroup(group);parser.parse(options,new String[]{""-b""});assertEquals(""selected option"",""b"",group.getSelected());}"
"org.apache.commons.cli.DefaultParserTest.testOptionGroupLong",0,"public void testOptionGroupLong()throws Exception {OptionGroup group=new OptionGroup();group.addOption(OptionBuilder.withLongOpt(""foo"").create());group.addOption(OptionBuilder.withLongOpt(""bar"").create());Options options=new Options();options.addOptionGroup(group);CommandLine cl=parser.parse(options,new String[]{""--bar""});assertTrue(cl.hasOption(""bar""));assertEquals(""selected option"",""bar"",group.getSelected());}"
"org.apache.commons.cli.DefaultParserTest.testReuseOptionsTwice",0,"public void testReuseOptionsTwice()throws Exception {Options opts=new Options();opts.addOption(OptionBuilder.isRequired().create('v'));parser.parse(opts,new String[]{""-v""});try {parser.parse(opts,new String[0]);fail(""MissingOptionException not thrown"");}catch(MissingOptionException e){}}"
"org.apache.commons.cli.DefaultParserTest.testBursting",0,"public void testBursting()throws Exception {String[]args=new String[]{""-acbtoast"",""foo"",""bar""};CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -a is set"",cl.hasOption(""a""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm -c is set"",cl.hasOption(""c""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""toast""));assertTrue(""Confirm size of extra args"",cl.getArgList().size()== 2);}"
"org.apache.commons.cli.DefaultParserTest.testUnrecognizedOptionWithBursting",0,"public void testUnrecognizedOptionWithBursting()throws Exception {String[]args=new String[]{""-adbtoast"",""foo"",""bar""};try {parser.parse(options,args);fail(""UnrecognizedOptionException wasn't thrown"");}catch(UnrecognizedOptionException e){assertEquals(""-adbtoast"",e.getOption());}}"
"org.apache.commons.cli.DefaultParserTest.testMissingArgWithBursting",0,"public void testMissingArgWithBursting()throws Exception {String[]args=new String[]{""-acb""};boolean caught=false;try {parser.parse(options,args);}catch(MissingArgumentException e){caught=true;assertEquals(""option missing an argument"",""b"",e.getOption().getOpt());}assertTrue(""Confirm MissingArgumentException caught"",caught);}"
"org.apache.commons.cli.DefaultParserTest.testStopBursting",0,"public void testStopBursting()throws Exception {String[]args=new String[]{""-azc""};CommandLine cl=parser.parse(options,args,true);assertTrue(""Confirm -a is set"",cl.hasOption(""a""));assertFalse(""Confirm -c is not set"",cl.hasOption(""c""));assertTrue(""Confirm  1 extra arg: "" + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue(cl.getArgList().contains(""zc""));}"
"org.apache.commons.cli.DefaultParserTest.testStopBursting2",0,"public void testStopBursting2()throws Exception {String[]args=new String[]{""-c"",""foobar"",""-btoast""};CommandLine cl=parser.parse(options,args,true);assertTrue(""Confirm -c is set"",cl.hasOption(""c""));assertTrue(""Confirm  2 extra args: "" + cl.getArgList().size(),cl.getArgList().size()== 2);cl=parser.parse(options,cl.getArgs());assertTrue(""Confirm -c is not set"",!cl.hasOption(""c""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""toast""));assertTrue(""Confirm  1 extra arg: "" + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue(""Confirm  value of extra arg: "" + cl.getArgList().get(0),cl.getArgList().get(0).equals(""foobar""));}"
"org.apache.commons.cli.DefaultParserTest.testUnlimitedArgs",0,"public void testUnlimitedArgs()throws Exception {String[]args=new String[]{""-e"",""one"",""two"",""-f"",""alpha""};Options options=new Options();options.addOption(OptionBuilder.hasArgs().create(""e""));options.addOption(OptionBuilder.hasArgs().create(""f""));CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -e is set"",cl.hasOption(""e""));assertEquals(""number of arg for -e"",2,cl.getOptionValues(""e"").length);assertTrue(""Confirm -f is set"",cl.hasOption(""f""));assertEquals(""number of arg for -f"",1,cl.getOptionValues(""f"").length);}"
"org.apache.commons.cli.DefaultParserTest.testPropertyOptionSingularValue",0,"public void testPropertyOptionSingularValue()throws Exception {Options opts=new Options();opts.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt(""hide"").create());Properties properties=new Properties();properties.setProperty(""hide"",""seek"");CommandLine cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption(""hide""));assertEquals(""seek"",cmd.getOptionValue(""hide""));assertTrue(!cmd.hasOption(""fake""));}"
"org.apache.commons.cli.DefaultParserTest.testPropertyOptionFlags",0,"public void testPropertyOptionFlags()throws Exception {Options opts=new Options();opts.addOption(""a"",false,""toggle -a"");opts.addOption(""c"",""c"",false,""toggle -c"");opts.addOption(OptionBuilder.hasOptionalArg().create('e'));Properties properties=new Properties();properties.setProperty(""a"",""true"");properties.setProperty(""c"",""yes"");properties.setProperty(""e"",""1"");CommandLine cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption(""a""));assertTrue(cmd.hasOption(""c""));assertTrue(cmd.hasOption(""e""));properties=new Properties();properties.setProperty(""a"",""false"");properties.setProperty(""c"",""no"");properties.setProperty(""e"",""0"");cmd=parse(parser,opts,null,properties);assertTrue(!cmd.hasOption(""a""));assertTrue(!cmd.hasOption(""c""));assertTrue(cmd.hasOption(""e""));properties=new Properties();properties.setProperty(""a"",""TRUE"");properties.setProperty(""c"",""nO"");properties.setProperty(""e"",""TrUe"");cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption(""a""));assertTrue(!cmd.hasOption(""c""));assertTrue(cmd.hasOption(""e""));properties=new Properties();properties.setProperty(""a"",""just a string"");properties.setProperty(""e"","""");cmd=parse(parser,opts,null,properties);assertTrue(!cmd.hasOption(""a""));assertTrue(!cmd.hasOption(""c""));assertTrue(cmd.hasOption(""e""));properties=new Properties();properties.setProperty(""a"",""0"");properties.setProperty(""c"",""1"");cmd=parse(parser,opts,null,properties);assertTrue(!cmd.hasOption(""a""));assertTrue(cmd.hasOption(""c""));}"
"org.apache.commons.cli.DefaultParserTest.testPropertyOptionMultipleValues",0,"public void testPropertyOptionMultipleValues()throws Exception {Options opts=new Options();opts.addOption(OptionBuilder.hasArgs().withValueSeparator(',').create('k'));Properties properties=new Properties();properties.setProperty(""k"",""one,two"");String[]values=new String[]{""one"",""two""};CommandLine cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption(""k""));assertTrue(Arrays.equals(values,cmd.getOptionValues('k')));}"
"org.apache.commons.cli.DefaultParserTest.testPropertyOverrideValues",0,"public void testPropertyOverrideValues()throws Exception {Options opts=new Options();opts.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));opts.addOption(OptionBuilder.hasOptionalArgs().create('j'));String[]args=new String[]{""-j"",""found"",""-i"",""ink""};Properties properties=new Properties();properties.setProperty(""j"",""seek"");CommandLine cmd=parse(parser,opts,args,properties);assertTrue(cmd.hasOption(""j""));assertEquals(""found"",cmd.getOptionValue(""j""));assertTrue(cmd.hasOption(""i""));assertEquals(""ink"",cmd.getOptionValue(""i""));assertTrue(!cmd.hasOption(""fake""));}"
"org.apache.commons.cli.OptionsTest.testSimple",0,"public void testSimple(){Options opts=new Options();opts.addOption(""a"",false,""toggle -a"");opts.addOption(""b"",true,""toggle -b"");assertTrue(opts.hasOption(""a""));assertTrue(opts.hasOption(""b""));}"
"org.apache.commons.cli.OptionsTest.testDuplicateSimple",0,"public void testDuplicateSimple(){Options opts=new Options();opts.addOption(""a"",false,""toggle -a"");opts.addOption(""a"",true,""toggle -a*"");assertEquals(""last one in wins"",""toggle -a*"",opts.getOption(""a"").getDescription());}"
"org.apache.commons.cli.OptionsTest.testLong",0,"public void testLong(){Options opts=new Options();opts.addOption(""a"",""--a"",false,""toggle -a"");opts.addOption(""b"",""--b"",true,""set -b"");assertTrue(opts.hasOption(""a""));assertTrue(opts.hasOption(""b""));}"
"org.apache.commons.cli.OptionsTest.testDuplicateLong",0,"public void testDuplicateLong(){Options opts=new Options();opts.addOption(""a"",""--a"",false,""toggle -a"");opts.addOption(""a"",""--a"",false,""toggle -a*"");assertEquals(""last one in wins"",""toggle -a*"",opts.getOption(""a"").getDescription());}"
"org.apache.commons.cli.OptionsTest.testHelpOptions",0,"public void testHelpOptions(){Option longOnly1=OptionBuilder.withLongOpt(""long-only1"").create();Option longOnly2=OptionBuilder.withLongOpt(""long-only2"").create();Option shortOnly1=OptionBuilder.create(""1"");Option shortOnly2=OptionBuilder.create(""2"");Option bothA=OptionBuilder.withLongOpt(""bothA"").create(""a"");Option bothB=OptionBuilder.withLongOpt(""bothB"").create(""b"");Options options=new Options();options.addOption(longOnly1);options.addOption(longOnly2);options.addOption(shortOnly1);options.addOption(shortOnly2);options.addOption(bothA);options.addOption(bothB);Collection allOptions=new ArrayList();allOptions.add(longOnly1);allOptions.add(longOnly2);allOptions.add(shortOnly1);allOptions.add(shortOnly2);allOptions.add(bothA);allOptions.add(bothB);Collection helpOptions=options.helpOptions();assertTrue(""Everything in all should be in help"",helpOptions.containsAll(allOptions));assertTrue(""Everything in help should be in all"",allOptions.containsAll(helpOptions));}"
"org.apache.commons.cli.OptionsTest.testMissingOptionException",0,"public void testMissingOptionException()throws ParseException {Options options=new Options();options.addOption(OptionBuilder.isRequired().create(""f""));try {new PosixParser().parse(options,new String[0]);fail(""Expected MissingOptionException to be thrown"");}catch(MissingOptionException e){assertEquals(""Missing required option: f"",e.getMessage());}}"
"org.apache.commons.cli.OptionsTest.testMissingOptionsException",0,"public void testMissingOptionsException()throws ParseException {Options options=new Options();options.addOption(OptionBuilder.isRequired().create(""f""));options.addOption(OptionBuilder.isRequired().create(""x""));try {new PosixParser().parse(options,new String[0]);fail(""Expected MissingOptionException to be thrown"");}catch(MissingOptionException e){assertEquals(""Missing required options: f,x"",e.getMessage());}}"
"org.apache.commons.cli.OptionsTest.testToString",0,"public void testToString(){Options options=new Options();options.addOption(""f"",""foo"",true,""Foo"");options.addOption(""b"",""bar"",false,""Bar"");String s=options.toString();assertNotNull(""null string returned"",s);assertTrue(""foo option missing"",s.toLowerCase().indexOf(""foo"")!= -1);assertTrue(""bar option missing"",s.toLowerCase().indexOf(""bar"")!= -1);}"
"org.apache.commons.cli.OptionsTest.testGetOptionsGroups",0,"public void testGetOptionsGroups(){Options options=new Options();OptionGroup group1=new OptionGroup();group1.addOption(OptionBuilder.create('a'));group1.addOption(OptionBuilder.create('b'));OptionGroup group2=new OptionGroup();group2.addOption(OptionBuilder.create('x'));group2.addOption(OptionBuilder.create('y'));options.addOptionGroup(group1);options.addOptionGroup(group2);assertNotNull(options.getOptionGroups());assertEquals(2,options.getOptionGroups().size());}"
"org.apache.commons.cli.OptionsTest.testGetMatchingOpts",0,"public void testGetMatchingOpts(){Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""version"").create());options.addOption(OptionBuilder.withLongOpt(""verbose"").create());assertTrue(options.getMatchingOptions(""foo"").isEmpty());assertEquals(1,options.getMatchingOptions(""version"").size());assertEquals(2,options.getMatchingOptions(""ver"").size());}"
"org.apache.commons.cli.OptionGroupTest.testSingleOptionFromGroup",0,"public void testSingleOptionFromGroup()throws Exception {String[]args=new String[]{""-f""};CommandLine cl=parser.parse(_options,args);assertTrue(""Confirm -r is NOT set"",!cl.hasOption(""r""));assertTrue(""Confirm -f is set"",cl.hasOption(""f""));assertTrue(""Confirm -d is NOT set"",!cl.hasOption(""d""));assertTrue(""Confirm -s is NOT set"",!cl.hasOption(""s""));assertTrue(""Confirm -c is NOT set"",!cl.hasOption(""c""));assertTrue(""Confirm no extra args"",cl.getArgList().size()== 0);}"
"org.apache.commons.cli.OptionGroupTest.testSingleOption",0,"public void testSingleOption()throws Exception {String[]args=new String[]{""-r""};CommandLine cl=parser.parse(_options,args);assertTrue(""Confirm -r is set"",cl.hasOption(""r""));assertTrue(""Confirm -f is NOT set"",!cl.hasOption(""f""));assertTrue(""Confirm -d is NOT set"",!cl.hasOption(""d""));assertTrue(""Confirm -s is NOT set"",!cl.hasOption(""s""));assertTrue(""Confirm -c is NOT set"",!cl.hasOption(""c""));assertTrue(""Confirm no extra args"",cl.getArgList().size()== 0);}"
"org.apache.commons.cli.OptionGroupTest.testTwoValidOptions",0,"public void testTwoValidOptions()throws Exception {String[]args=new String[]{""-r"",""-f""};CommandLine cl=parser.parse(_options,args);assertTrue(""Confirm -r is set"",cl.hasOption(""r""));assertTrue(""Confirm -f is set"",cl.hasOption(""f""));assertTrue(""Confirm -d is NOT set"",!cl.hasOption(""d""));assertTrue(""Confirm -s is NOT set"",!cl.hasOption(""s""));assertTrue(""Confirm -c is NOT set"",!cl.hasOption(""c""));assertTrue(""Confirm no extra args"",cl.getArgList().size()== 0);}"
"org.apache.commons.cli.OptionGroupTest.testSingleLongOption",0,"public void testSingleLongOption()throws Exception {String[]args=new String[]{""--file""};CommandLine cl=parser.parse(_options,args);assertTrue(""Confirm -r is NOT set"",!cl.hasOption(""r""));assertTrue(""Confirm -f is set"",cl.hasOption(""f""));assertTrue(""Confirm -d is NOT set"",!cl.hasOption(""d""));assertTrue(""Confirm -s is NOT set"",!cl.hasOption(""s""));assertTrue(""Confirm -c is NOT set"",!cl.hasOption(""c""));assertTrue(""Confirm no extra args"",cl.getArgList().size()== 0);}"
"org.apache.commons.cli.OptionGroupTest.testTwoValidLongOptions",0,"public void testTwoValidLongOptions()throws Exception {String[]args=new String[]{""--revision"",""--file""};CommandLine cl=parser.parse(_options,args);assertTrue(""Confirm -r is set"",cl.hasOption(""r""));assertTrue(""Confirm -f is set"",cl.hasOption(""f""));assertTrue(""Confirm -d is NOT set"",!cl.hasOption(""d""));assertTrue(""Confirm -s is NOT set"",!cl.hasOption(""s""));assertTrue(""Confirm -c is NOT set"",!cl.hasOption(""c""));assertTrue(""Confirm no extra args"",cl.getArgList().size()== 0);}"
"org.apache.commons.cli.OptionGroupTest.testNoOptionsExtraArgs",0,"public void testNoOptionsExtraArgs()throws Exception {String[]args=new String[]{""arg1"",""arg2""};CommandLine cl=parser.parse(_options,args);assertTrue(""Confirm -r is NOT set"",!cl.hasOption(""r""));assertTrue(""Confirm -f is NOT set"",!cl.hasOption(""f""));assertTrue(""Confirm -d is NOT set"",!cl.hasOption(""d""));assertTrue(""Confirm -s is NOT set"",!cl.hasOption(""s""));assertTrue(""Confirm -c is NOT set"",!cl.hasOption(""c""));assertTrue(""Confirm TWO extra args"",cl.getArgList().size()== 2);}"
"org.apache.commons.cli.OptionGroupTest.testTwoOptionsFromGroup",0,"public void testTwoOptionsFromGroup()throws Exception {String[]args=new String[]{""-f"",""-d""};try {parser.parse(_options,args);fail(""two arguments from group not allowed"");}catch(AlreadySelectedException e){assertNotNull(""null option group"",e.getOptionGroup());assertEquals(""selected option"",""f"",e.getOptionGroup().getSelected());assertEquals(""option"",""d"",e.getOption().getOpt());}}"
"org.apache.commons.cli.OptionGroupTest.testTwoLongOptionsFromGroup",0,"public void testTwoLongOptionsFromGroup()throws Exception {String[]args=new String[]{""--file"",""--directory""};try {parser.parse(_options,args);fail(""two arguments from group not allowed"");}catch(AlreadySelectedException e){assertNotNull(""null option group"",e.getOptionGroup());assertEquals(""selected option"",""f"",e.getOptionGroup().getSelected());assertEquals(""option"",""d"",e.getOption().getOpt());}}"
"org.apache.commons.cli.OptionGroupTest.testTwoOptionsFromDifferentGroup",0,"public void testTwoOptionsFromDifferentGroup()throws Exception {String[]args=new String[]{""-f"",""-s""};CommandLine cl=parser.parse(_options,args);assertTrue(""Confirm -r is NOT set"",!cl.hasOption(""r""));assertTrue(""Confirm -f is set"",cl.hasOption(""f""));assertTrue(""Confirm -d is NOT set"",!cl.hasOption(""d""));assertTrue(""Confirm -s is set"",cl.hasOption(""s""));assertTrue(""Confirm -c is NOT set"",!cl.hasOption(""c""));assertTrue(""Confirm NO extra args"",cl.getArgList().size()== 0);}"
"org.apache.commons.cli.OptionGroupTest.testValidLongOnlyOptions",0,"public void testValidLongOnlyOptions()throws Exception {CommandLine cl1=parser.parse(_options,new String[]{""--export""});assertTrue(""Confirm --export is set"",cl1.hasOption(""export""));CommandLine cl2=parser.parse(_options,new String[]{""--import""});assertTrue(""Confirm --import is set"",cl2.hasOption(""import""));}"
"org.apache.commons.cli.OptionGroupTest.testToString",0,"public void testToString(){OptionGroup group1=new OptionGroup();group1.addOption(new Option(null,""foo"",false,""Foo""));group1.addOption(new Option(null,""bar"",false,""Bar""));if (!""[--bar Bar,--foo Foo]"".equals(group1.toString())){assertEquals(""[--foo Foo,--bar Bar]"",group1.toString());}OptionGroup group2=new OptionGroup();group2.addOption(new Option(""f"",""foo"",false,""Foo""));group2.addOption(new Option(""b"",""bar"",false,""Bar""));if (!""[-b Bar,-f Foo]"".equals(group2.toString())){assertEquals(""[-f Foo,-b Bar]"",group2.toString());}}"
"org.apache.commons.cli.OptionGroupTest.testGetNames",0,"public void testGetNames(){OptionGroup group=new OptionGroup();group.addOption(OptionBuilder.create('a'));group.addOption(OptionBuilder.create('b'));assertNotNull(""null names"",group.getNames());assertEquals(2,group.getNames().size());assertTrue(group.getNames().contains(""a""));assertTrue(group.getNames().contains(""b""));}"
"org.apache.commons.cli.GnuParserTest.testDoubleDash2",0,"public void testDoubleDash2()throws Exception {}"
"org.apache.commons.cli.GnuParserTest.testLongWithoutEqualSingleDash",0,"public void testLongWithoutEqualSingleDash()throws Exception {}"
"org.apache.commons.cli.GnuParserTest.testAmbiguousLongWithoutEqualSingleDash",0,"public void testAmbiguousLongWithoutEqualSingleDash()throws Exception {}"
"org.apache.commons.cli.GnuParserTest.testNegativeOption",0,"public void testNegativeOption()throws Exception {}"
"org.apache.commons.cli.GnuParserTest.testLongWithUnexpectedArgument1",0,"public void testLongWithUnexpectedArgument1()throws Exception {}"
"org.apache.commons.cli.GnuParserTest.testLongWithUnexpectedArgument2",0,"public void testLongWithUnexpectedArgument2()throws Exception {}"
"org.apache.commons.cli.GnuParserTest.testShortWithUnexpectedArgument",0,"public void testShortWithUnexpectedArgument()throws Exception {}"
"org.apache.commons.cli.GnuParserTest.testUnambiguousPartialLongOption1",0,"public void testUnambiguousPartialLongOption1()throws Exception {}"
"org.apache.commons.cli.GnuParserTest.testUnambiguousPartialLongOption2",0,"public void testUnambiguousPartialLongOption2()throws Exception {}"
"org.apache.commons.cli.GnuParserTest.testUnambiguousPartialLongOption3",0,"public void testUnambiguousPartialLongOption3()throws Exception {}"
"org.apache.commons.cli.GnuParserTest.testUnambiguousPartialLongOption4",0,"public void testUnambiguousPartialLongOption4()throws Exception {}"
"org.apache.commons.cli.GnuParserTest.testAmbiguousPartialLongOption1",0,"public void testAmbiguousPartialLongOption1()throws Exception {}"
"org.apache.commons.cli.GnuParserTest.testAmbiguousPartialLongOption2",0,"public void testAmbiguousPartialLongOption2()throws Exception {}"
"org.apache.commons.cli.GnuParserTest.testAmbiguousPartialLongOption3",0,"public void testAmbiguousPartialLongOption3()throws Exception {}"
"org.apache.commons.cli.GnuParserTest.testAmbiguousPartialLongOption4",0,"public void testAmbiguousPartialLongOption4()throws Exception {}"
"org.apache.commons.cli.GnuParserTest.testPartialLongOptionSingleDash",0,"public void testPartialLongOptionSingleDash()throws Exception {}"
"org.apache.commons.cli.GnuParserTest.testBursting",0,"public void testBursting()throws Exception {}"
"org.apache.commons.cli.GnuParserTest.testUnrecognizedOptionWithBursting",0,"public void testUnrecognizedOptionWithBursting()throws Exception {}"
"org.apache.commons.cli.GnuParserTest.testMissingArgWithBursting",0,"public void testMissingArgWithBursting()throws Exception {}"
"org.apache.commons.cli.GnuParserTest.testStopBursting",0,"public void testStopBursting()throws Exception {}"
"org.apache.commons.cli.GnuParserTest.testStopBursting2",0,"public void testStopBursting2()throws Exception {}"
"org.apache.commons.cli.GnuParserTest.testSimpleShort",0,"public void testSimpleShort()throws Exception {String[]args=new String[]{""-a"",""-b"",""toast"",""foo"",""bar""};CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -a is set"",cl.hasOption(""a""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""toast""));assertTrue(""Confirm size of extra args"",cl.getArgList().size()== 2);}"
"org.apache.commons.cli.GnuParserTest.testSimpleLong",0,"public void testSimpleLong()throws Exception {String[]args=new String[]{""--enable-a"",""--bfile"",""toast"",""foo"",""bar""};CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -a is set"",cl.hasOption(""a""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""toast""));assertTrue(""Confirm arg of --bfile"",cl.getOptionValue(""bfile"").equals(""toast""));assertTrue(""Confirm size of extra args"",cl.getArgList().size()== 2);}"
"org.apache.commons.cli.GnuParserTest.testMultiple",0,"public void testMultiple()throws Exception {String[]args=new String[]{""-c"",""foobar"",""-b"",""toast""};CommandLine cl=parser.parse(options,args,true);assertTrue(""Confirm -c is set"",cl.hasOption(""c""));assertTrue(""Confirm  3 extra args: "" + cl.getArgList().size(),cl.getArgList().size()== 3);cl=parser.parse(options,cl.getArgs());assertTrue(""Confirm -c is not set"",!cl.hasOption(""c""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""toast""));assertTrue(""Confirm  1 extra arg: "" + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue(""Confirm  value of extra arg: "" + cl.getArgList().get(0),cl.getArgList().get(0).equals(""foobar""));}"
"org.apache.commons.cli.GnuParserTest.testMultipleWithLong",0,"public void testMultipleWithLong()throws Exception {String[]args=new String[]{""--copt"",""foobar"",""--bfile"",""toast""};CommandLine cl=parser.parse(options,args,true);assertTrue(""Confirm -c is set"",cl.hasOption(""c""));assertTrue(""Confirm  3 extra args: "" + cl.getArgList().size(),cl.getArgList().size()== 3);cl=parser.parse(options,cl.getArgs());assertTrue(""Confirm -c is not set"",!cl.hasOption(""c""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""toast""));assertTrue(""Confirm  1 extra arg: "" + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue(""Confirm  value of extra arg: "" + cl.getArgList().get(0),cl.getArgList().get(0).equals(""foobar""));}"
"org.apache.commons.cli.GnuParserTest.testUnrecognizedOption",0,"public void testUnrecognizedOption()throws Exception {String[]args=new String[]{""-a"",""-d"",""-b"",""toast"",""foo"",""bar""};try {parser.parse(options,args);fail(""UnrecognizedOptionException wasn't thrown"");}catch(UnrecognizedOptionException e){assertEquals(""-d"",e.getOption());}}"
"org.apache.commons.cli.GnuParserTest.testMissingArg",0,"public void testMissingArg()throws Exception {String[]args=new String[]{""-b""};boolean caught=false;try {parser.parse(options,args);}catch(MissingArgumentException e){caught=true;assertEquals(""option missing an argument"",""b"",e.getOption().getOpt());}assertTrue(""Confirm MissingArgumentException caught"",caught);}"
"org.apache.commons.cli.GnuParserTest.testDoubleDash1",0,"public void testDoubleDash1()throws Exception {String[]args=new String[]{""--copt"",""--"",""-b"",""toast""};CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -c is set"",cl.hasOption(""c""));assertTrue(""Confirm -b is not set"",!cl.hasOption(""b""));assertTrue(""Confirm 2 extra args: "" + cl.getArgList().size(),cl.getArgList().size()== 2);}"
"org.apache.commons.cli.GnuParserTest.testSingleDash",0,"public void testSingleDash()throws Exception {String[]args=new String[]{""--copt"",""-b"",""-"",""-a"",""-""};CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -a is set"",cl.hasOption(""a""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""-""));assertTrue(""Confirm 1 extra arg: "" + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue(""Confirm value of extra arg: "" + cl.getArgList().get(0),cl.getArgList().get(0).equals(""-""));}"
"org.apache.commons.cli.GnuParserTest.testStopAtUnexpectedArg",0,"public void testStopAtUnexpectedArg()throws Exception {String[]args=new String[]{""-c"",""foober"",""-b"",""toast""};CommandLine cl=parser.parse(options,args,true);assertTrue(""Confirm -c is set"",cl.hasOption(""c""));assertTrue(""Confirm  3 extra args: "" + cl.getArgList().size(),cl.getArgList().size()== 3);}"
"org.apache.commons.cli.GnuParserTest.testStopAtExpectedArg",0,"public void testStopAtExpectedArg()throws Exception {String[]args=new String[]{""-b"",""foo""};CommandLine cl=parser.parse(options,args,true);assertTrue(""Confirm -b is set"",cl.hasOption('b'));assertEquals(""Confirm -b is set"",""foo"",cl.getOptionValue('b'));assertTrue(""Confirm no extra args: "" + cl.getArgList().size(),cl.getArgList().size()== 0);}"
"org.apache.commons.cli.GnuParserTest.testStopAtNonOptionShort",0,"public void testStopAtNonOptionShort()throws Exception {String[]args=new String[]{""-z"",""-a"",""-btoast""};CommandLine cl=parser.parse(options,args,true);assertFalse(""Confirm -a is not set"",cl.hasOption(""a""));assertTrue(""Confirm  3 extra args: "" + cl.getArgList().size(),cl.getArgList().size()== 3);}"
"org.apache.commons.cli.GnuParserTest.testStopAtNonOptionLong",0,"public void testStopAtNonOptionLong()throws Exception {String[]args=new String[]{""--zop==1"",""-abtoast"",""--b=bar""};CommandLine cl=parser.parse(options,args,true);assertFalse(""Confirm -a is not set"",cl.hasOption(""a""));assertFalse(""Confirm -b is not set"",cl.hasOption(""b""));assertTrue(""Confirm  3 extra args: "" + cl.getArgList().size(),cl.getArgList().size()== 3);}"
"org.apache.commons.cli.GnuParserTest.testNegativeArgument",0,"public void testNegativeArgument()throws Exception {String[]args=new String[]{""-b"",""-1""};CommandLine cl=parser.parse(options,args);assertEquals(""-1"",cl.getOptionValue(""b""));}"
"org.apache.commons.cli.GnuParserTest.testArgumentStartingWithHyphen",0,"public void testArgumentStartingWithHyphen()throws Exception {String[]args=new String[]{""-b"",""-foo""};CommandLine cl=parser.parse(options,args);assertEquals(""-foo"",cl.getOptionValue(""b""));}"
"org.apache.commons.cli.GnuParserTest.testShortWithEqual",0,"public void testShortWithEqual()throws Exception {String[]args=new String[]{""-f=bar""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""foo"").hasArg().create('f'));CommandLine cl=parser.parse(options,args);assertEquals(""bar"",cl.getOptionValue(""foo""));}"
"org.apache.commons.cli.GnuParserTest.testShortWithoutEqual",0,"public void testShortWithoutEqual()throws Exception {String[]args=new String[]{""-fbar""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""foo"").hasArg().create('f'));CommandLine cl=parser.parse(options,args);assertEquals(""bar"",cl.getOptionValue(""foo""));}"
"org.apache.commons.cli.GnuParserTest.testLongWithEqualDoubleDash",0,"public void testLongWithEqualDoubleDash()throws Exception {String[]args=new String[]{""--foo=bar""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""foo"").hasArg().create('f'));CommandLine cl=parser.parse(options,args);assertEquals(""bar"",cl.getOptionValue(""foo""));}"
"org.apache.commons.cli.GnuParserTest.testLongWithEqualSingleDash",0,"public void testLongWithEqualSingleDash()throws Exception {String[]args=new String[]{""-foo=bar""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""foo"").hasArg().create('f'));CommandLine cl=parser.parse(options,args);assertEquals(""bar"",cl.getOptionValue(""foo""));}"
"org.apache.commons.cli.GnuParserTest.testLongWithoutEqualDoubleDash",0,"public void testLongWithoutEqualDoubleDash()throws Exception {String[]args=new String[]{""--foobar""};Options options=new Options();options.addOption(OptionBuilder.withLongOpt(""foo"").hasArg().create('f'));CommandLine cl=parser.parse(options,args,true);assertFalse(cl.hasOption(""foo""));}"
"org.apache.commons.cli.GnuParserTest.testPropertiesOption1",0,"public void testPropertiesOption1()throws Exception {String[]args=new String[]{""-Jsource=1.5"",""-J"",""target"",""1.5"",""foo""};Options options=new Options();options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).create('J'));CommandLine cl=parser.parse(options,args);List values=Arrays.asList(cl.getOptionValues(""J""));assertNotNull(""null values"",values);assertEquals(""number of values"",4,values.size());assertEquals(""value 1"",""source"",values.get(0));assertEquals(""value 2"",""1.5"",values.get(1));assertEquals(""value 3"",""target"",values.get(2));assertEquals(""value 4"",""1.5"",values.get(3));List argsleft=cl.getArgList();assertEquals(""Should be 1 arg left"",1,argsleft.size());assertEquals(""Expecting foo"",""foo"",argsleft.get(0));}"
"org.apache.commons.cli.GnuParserTest.testPropertiesOption2",0,"public void testPropertiesOption2()throws Exception {String[]args=new String[]{""-Dparam1"",""-Dparam2=value2"",""-D""};Options options=new Options();options.addOption(OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D'));CommandLine cl=parser.parse(options,args);Properties props=cl.getOptionProperties(""D"");assertNotNull(""null properties"",props);assertEquals(""number of properties in "" + props,2,props.size());assertEquals(""property 1"",""true"",props.getProperty(""param1""));assertEquals(""property 2"",""value2"",props.getProperty(""param2""));List argsleft=cl.getArgList();assertEquals(""Should be no arg left"",0,argsleft.size());}"
"org.apache.commons.cli.GnuParserTest.testWithRequiredOption",0,"public void testWithRequiredOption()throws Exception {String[]args=new String[]{""-b"",""file""};Options options=new Options();options.addOption(""a"",""enable-a"",false,null);options.addOption(OptionBuilder.withLongOpt(""bfile"").hasArg().isRequired().create('b'));CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -a is NOT set"",!cl.hasOption(""a""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""file""));assertTrue(""Confirm NO of extra args"",cl.getArgList().size()== 0);}"
"org.apache.commons.cli.GnuParserTest.testOptionAndRequiredOption",0,"public void testOptionAndRequiredOption()throws Exception {String[]args=new String[]{""-a"",""-b"",""file""};Options options=new Options();options.addOption(""a"",""enable-a"",false,null);options.addOption(OptionBuilder.withLongOpt(""bfile"").hasArg().isRequired().create('b'));CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -a is set"",cl.hasOption(""a""));assertTrue(""Confirm -b is set"",cl.hasOption(""b""));assertTrue(""Confirm arg of -b"",cl.getOptionValue(""b"").equals(""file""));assertTrue(""Confirm NO of extra args"",cl.getArgList().size()== 0);}"
"org.apache.commons.cli.GnuParserTest.testMissingRequiredOption",0,"public void testMissingRequiredOption(){String[]args=new String[]{""-a""};Options options=new Options();options.addOption(""a"",""enable-a"",false,null);options.addOption(OptionBuilder.withLongOpt(""bfile"").hasArg().isRequired().create('b'));try {parser.parse(options,args);fail(""exception should have been thrown"");}catch(MissingOptionException e){assertEquals(""Incorrect exception message"",""Missing required option: b"",e.getMessage());assertTrue(e.getMissingOptions().contains(""b""));}catch(ParseException e){fail(""expected to catch MissingOptionException"");}}"
"org.apache.commons.cli.GnuParserTest.testMissingRequiredOptions",0,"public void testMissingRequiredOptions(){String[]args=new String[]{""-a""};Options options=new Options();options.addOption(""a"",""enable-a"",false,null);options.addOption(OptionBuilder.withLongOpt(""bfile"").hasArg().isRequired().create('b'));options.addOption(OptionBuilder.withLongOpt(""cfile"").hasArg().isRequired().create('c'));try {parser.parse(options,args);fail(""exception should have been thrown"");}catch(MissingOptionException e){assertEquals(""Incorrect exception message"",""Missing required options: b,c"",e.getMessage());assertTrue(e.getMissingOptions().contains(""b""));assertTrue(e.getMissingOptions().contains(""c""));}catch(ParseException e){fail(""expected to catch MissingOptionException"");}}"
"org.apache.commons.cli.GnuParserTest.testMissingRequiredGroup",0,"public void testMissingRequiredGroup()throws Exception {OptionGroup group=new OptionGroup();group.addOption(OptionBuilder.create(""a""));group.addOption(OptionBuilder.create(""b""));group.setRequired(true);Options options=new Options();options.addOptionGroup(group);options.addOption(OptionBuilder.isRequired().create(""c""));try {parser.parse(options,new String[]{""-c""});fail(""MissingOptionException not thrown"");}catch(MissingOptionException e){assertEquals(1,e.getMissingOptions().size());assertTrue(e.getMissingOptions().get(0)instanceof OptionGroup);}catch(ParseException e){fail(""Expected to catch MissingOptionException"");}}"
"org.apache.commons.cli.GnuParserTest.testOptionGroup",0,"public void testOptionGroup()throws Exception {OptionGroup group=new OptionGroup();group.addOption(OptionBuilder.create(""a""));group.addOption(OptionBuilder.create(""b""));Options options=new Options();options.addOptionGroup(group);parser.parse(options,new String[]{""-b""});assertEquals(""selected option"",""b"",group.getSelected());}"
"org.apache.commons.cli.GnuParserTest.testOptionGroupLong",0,"public void testOptionGroupLong()throws Exception {OptionGroup group=new OptionGroup();group.addOption(OptionBuilder.withLongOpt(""foo"").create());group.addOption(OptionBuilder.withLongOpt(""bar"").create());Options options=new Options();options.addOptionGroup(group);CommandLine cl=parser.parse(options,new String[]{""--bar""});assertTrue(cl.hasOption(""bar""));assertEquals(""selected option"",""bar"",group.getSelected());}"
"org.apache.commons.cli.GnuParserTest.testReuseOptionsTwice",0,"public void testReuseOptionsTwice()throws Exception {Options opts=new Options();opts.addOption(OptionBuilder.isRequired().create('v'));parser.parse(opts,new String[]{""-v""});try {parser.parse(opts,new String[0]);fail(""MissingOptionException not thrown"");}catch(MissingOptionException e){}}"
"org.apache.commons.cli.GnuParserTest.testUnlimitedArgs",0,"public void testUnlimitedArgs()throws Exception {String[]args=new String[]{""-e"",""one"",""two"",""-f"",""alpha""};Options options=new Options();options.addOption(OptionBuilder.hasArgs().create(""e""));options.addOption(OptionBuilder.hasArgs().create(""f""));CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -e is set"",cl.hasOption(""e""));assertEquals(""number of arg for -e"",2,cl.getOptionValues(""e"").length);assertTrue(""Confirm -f is set"",cl.hasOption(""f""));assertEquals(""number of arg for -f"",1,cl.getOptionValues(""f"").length);}"
"org.apache.commons.cli.GnuParserTest.testPropertyOptionSingularValue",0,"public void testPropertyOptionSingularValue()throws Exception {Options opts=new Options();opts.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt(""hide"").create());Properties properties=new Properties();properties.setProperty(""hide"",""seek"");CommandLine cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption(""hide""));assertEquals(""seek"",cmd.getOptionValue(""hide""));assertTrue(!cmd.hasOption(""fake""));}"
"org.apache.commons.cli.GnuParserTest.testPropertyOptionFlags",0,"public void testPropertyOptionFlags()throws Exception {Options opts=new Options();opts.addOption(""a"",false,""toggle -a"");opts.addOption(""c"",""c"",false,""toggle -c"");opts.addOption(OptionBuilder.hasOptionalArg().create('e'));Properties properties=new Properties();properties.setProperty(""a"",""true"");properties.setProperty(""c"",""yes"");properties.setProperty(""e"",""1"");CommandLine cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption(""a""));assertTrue(cmd.hasOption(""c""));assertTrue(cmd.hasOption(""e""));properties=new Properties();properties.setProperty(""a"",""false"");properties.setProperty(""c"",""no"");properties.setProperty(""e"",""0"");cmd=parse(parser,opts,null,properties);assertTrue(!cmd.hasOption(""a""));assertTrue(!cmd.hasOption(""c""));assertTrue(cmd.hasOption(""e""));properties=new Properties();properties.setProperty(""a"",""TRUE"");properties.setProperty(""c"",""nO"");properties.setProperty(""e"",""TrUe"");cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption(""a""));assertTrue(!cmd.hasOption(""c""));assertTrue(cmd.hasOption(""e""));properties=new Properties();properties.setProperty(""a"",""just a string"");properties.setProperty(""e"","""");cmd=parse(parser,opts,null,properties);assertTrue(!cmd.hasOption(""a""));assertTrue(!cmd.hasOption(""c""));assertTrue(cmd.hasOption(""e""));properties=new Properties();properties.setProperty(""a"",""0"");properties.setProperty(""c"",""1"");cmd=parse(parser,opts,null,properties);assertTrue(!cmd.hasOption(""a""));assertTrue(cmd.hasOption(""c""));}"
"org.apache.commons.cli.GnuParserTest.testPropertyOptionMultipleValues",0,"public void testPropertyOptionMultipleValues()throws Exception {Options opts=new Options();opts.addOption(OptionBuilder.hasArgs().withValueSeparator(',').create('k'));Properties properties=new Properties();properties.setProperty(""k"",""one,two"");String[]values=new String[]{""one"",""two""};CommandLine cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption(""k""));assertTrue(Arrays.equals(values,cmd.getOptionValues('k')));}"
"org.apache.commons.cli.GnuParserTest.testPropertyOverrideValues",0,"public void testPropertyOverrideValues()throws Exception {Options opts=new Options();opts.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));opts.addOption(OptionBuilder.hasOptionalArgs().create('j'));String[]args=new String[]{""-j"",""found"",""-i"",""ink""};Properties properties=new Properties();properties.setProperty(""j"",""seek"");CommandLine cmd=parse(parser,opts,args,properties);assertTrue(cmd.hasOption(""j""));assertEquals(""found"",cmd.getOptionValue(""j""));assertTrue(cmd.hasOption(""i""));assertEquals(""ink"",cmd.getOptionValue(""i""));assertTrue(!cmd.hasOption(""fake""));}"
"org.apache.commons.cli.UtilTest.testStripLeadingHyphens",0,"public void testStripLeadingHyphens(){assertEquals(""f"",Util.stripLeadingHyphens(""-f""));assertEquals(""foo"",Util.stripLeadingHyphens(""--foo""));assertEquals(""-foo"",Util.stripLeadingHyphens(""---foo""));assertNull(Util.stripLeadingHyphens(null));}"
"org.apache.commons.cli.UtilTest.testStripLeadingAndTrailingQuotes",1,"public void testStripLeadingAndTrailingQuotes(){assertEquals(""foo"",Util.stripLeadingAndTrailingQuotes(""\""foo\""""));assertEquals(""foo \""bar\"""",Util.stripLeadingAndTrailingQuotes(""foo \""bar\""""));assertEquals(""\""foo\"" bar"",Util.stripLeadingAndTrailingQuotes(""\""foo\"" bar""));assertEquals(""\""foo\"" and \""bar\"""",Util.stripLeadingAndTrailingQuotes(""\""foo\"" and \""bar\""""));assertEquals(""\"""",Util.stripLeadingAndTrailingQuotes(""\""""));}"
"org.apache.commons.cli.ArgumentIsOptionTest.testOptionAndOptionWithArgument",0,"public void testOptionAndOptionWithArgument()throws Exception {String[]args=new String[]{""-p"",""-attr"",""p""};CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -p is set"",cl.hasOption(""p""));assertTrue(""Confirm -attr is set"",cl.hasOption(""attr""));assertTrue(""Confirm arg of -attr"",cl.getOptionValue(""attr"").equals(""p""));assertTrue(""Confirm all arguments recognized"",cl.getArgs().length == 0);}"
"org.apache.commons.cli.ArgumentIsOptionTest.testOptionWithArgument",0,"public void testOptionWithArgument()throws Exception {String[]args=new String[]{""-attr"",""p""};CommandLine cl=parser.parse(options,args);assertFalse(""Confirm -p is set"",cl.hasOption(""p""));assertTrue(""Confirm -attr is set"",cl.hasOption(""attr""));assertTrue(""Confirm arg of -attr"",cl.getOptionValue(""attr"").equals(""p""));assertTrue(""Confirm all arguments recognized"",cl.getArgs().length == 0);}"
"org.apache.commons.cli.ArgumentIsOptionTest.testOption",0,"public void testOption()throws Exception {String[]args=new String[]{""-p""};CommandLine cl=parser.parse(options,args);assertTrue(""Confirm -p is set"",cl.hasOption(""p""));assertFalse(""Confirm -attr is not set"",cl.hasOption(""attr""));assertTrue(""Confirm all arguments recognized"",cl.getArgs().length == 0);}"
"org.apache.commons.cli.PatternOptionBuilderTest.testSimplePattern",0,"public void testSimplePattern()throws Exception {Options options=PatternOptionBuilder.parsePattern(""a:b@cde>f+n%t/m*z#"");String[]args=new String[]{""-c"",""-a"",""foo"",""-b"",""java.util.Vector"",""-e"",""build.xml"",""-f"",""java.util.Calendar"",""-n"",""4.5"",""-t"",""http://commons.apache.org"",""-z"",""Thu Jun 06 17:48:57 EDT 2002"",""-m"",""test*""};CommandLineParser parser=new PosixParser();CommandLine line=parser.parse(options,args);assertEquals(""flag a"",""foo"",line.getOptionValue(""a""));assertEquals(""string flag a"",""foo"",line.getOptionObject(""a""));assertEquals(""object flag b"",new Vector(),line.getOptionObject(""b""));assertTrue(""boolean true flag c"",line.hasOption(""c""));assertFalse(""boolean false flag d"",line.hasOption(""d""));assertEquals(""file flag e"",new File(""build.xml""),line.getOptionObject(""e""));assertEquals(""class flag f"",Calendar.class,line.getOptionObject(""f""));assertEquals(""number flag n"",new Double(4.5),line.getOptionObject(""n""));assertEquals(""url flag t"",new URL(""http://commons.apache.org""),line.getOptionObject(""t""));assertEquals(""flag a"",""foo"",line.getOptionValue('a'));assertEquals(""string flag a"",""foo"",line.getOptionObject('a'));assertEquals(""object flag b"",new Vector(),line.getOptionObject('b'));assertTrue(""boolean true flag c"",line.hasOption('c'));assertFalse(""boolean false flag d"",line.hasOption('d'));assertEquals(""file flag e"",new File(""build.xml""),line.getOptionObject('e'));assertEquals(""class flag f"",Calendar.class,line.getOptionObject('f'));assertEquals(""number flag n"",new Double(4.5),line.getOptionObject('n'));assertEquals(""url flag t"",new URL(""http://commons.apache.org""),line.getOptionObject('t'));try {assertEquals(""files flag m"",new File[0],line.getOptionObject('m'));fail(""Multiple files are not supported yet,should have failed"");}catch(UnsupportedOperationException uoe){}try {assertEquals(""date flag z"",new Date(1023400137276L),line.getOptionObject('z'));fail(""Date is not supported yet,should have failed"");}catch(UnsupportedOperationException uoe){}}"
"org.apache.commons.cli.PatternOptionBuilderTest.testEmptyPattern",0,"public void testEmptyPattern()throws Exception {Options options=PatternOptionBuilder.parsePattern("""");assertTrue(options.getOptions().isEmpty());}"
"org.apache.commons.cli.PatternOptionBuilderTest.testUntypedPattern",0,"public void testUntypedPattern()throws Exception {Options options=PatternOptionBuilder.parsePattern(""abc"");CommandLineParser parser=new PosixParser();CommandLine line=parser.parse(options,new String[]{""-abc""});assertTrue(line.hasOption('a'));assertNull(""value a"",line.getOptionObject('a'));assertTrue(line.hasOption('b'));assertNull(""value b"",line.getOptionObject('b'));assertTrue(line.hasOption('c'));assertNull(""value c"",line.getOptionObject('c'));}"
"org.apache.commons.cli.PatternOptionBuilderTest.testNumberPattern",0,"public void testNumberPattern()throws Exception {Options options=PatternOptionBuilder.parsePattern(""n%d%x%"");CommandLineParser parser=new PosixParser();CommandLine line=parser.parse(options,new String[]{""-n"",""1"",""-d"",""2.1"",""-x"",""3,5""});assertEquals(""n object class"",Long.class,line.getOptionObject(""n"").getClass());assertEquals(""n value"",new Long(1),line.getOptionObject(""n""));assertEquals(""d object class"",Double.class,line.getOptionObject(""d"").getClass());assertEquals(""d value"",new Double(2.1),line.getOptionObject(""d""));assertNull(""x object"",line.getOptionObject(""x""));}"
"org.apache.commons.cli.PatternOptionBuilderTest.testClassPattern",0,"public void testClassPattern()throws Exception {Options options=PatternOptionBuilder.parsePattern(""c+d+"");CommandLineParser parser=new PosixParser();CommandLine line=parser.parse(options,new String[]{""-c"",""java.util.Calendar"",""-d"",""System.DateTime""});assertEquals(""c value"",Calendar.class,line.getOptionObject(""c""));assertNull(""d value"",line.getOptionObject(""d""));}"
"org.apache.commons.cli.PatternOptionBuilderTest.testObjectPattern",0,"public void testObjectPattern()throws Exception {Options options=PatternOptionBuilder.parsePattern(""o@i@n@"");CommandLineParser parser=new PosixParser();CommandLine line=parser.parse(options,new String[]{""-o"",""java.lang.String"",""-i"",""java.util.Calendar"",""-n"",""System.DateTime""});assertEquals(""o value"","""",line.getOptionObject(""o""));assertNull(""i value"",line.getOptionObject(""i""));assertNull(""n value"",line.getOptionObject(""n""));}"
"org.apache.commons.cli.PatternOptionBuilderTest.testURLPattern",0,"public void testURLPattern()throws Exception {Options options=PatternOptionBuilder.parsePattern(""u/v/"");CommandLineParser parser=new PosixParser();CommandLine line=parser.parse(options,new String[]{""-u"",""http://commons.apache.org"",""-v"",""foo://commons.apache.org""});assertEquals(""u value"",new URL(""http://commons.apache.org""),line.getOptionObject(""u""));assertNull(""v value"",line.getOptionObject(""v""));}"
"org.apache.commons.cli.PatternOptionBuilderTest.testExistingFilePattern",0,"public void testExistingFilePattern()throws Exception {Options options=PatternOptionBuilder.parsePattern(""f<"");CommandLineParser parser=new PosixParser();CommandLine line=parser.parse(options,new String[]{""-f"",""test.properties""});assertEquals(""f value"",new File(""test.properties""),line.getOptionObject(""f""));}"
"org.apache.commons.cli.PatternOptionBuilderTest.testRequiredOption",0,"public void testRequiredOption()throws Exception {Options options=PatternOptionBuilder.parsePattern(""!n%m%"");CommandLineParser parser=new PosixParser();try {parser.parse(options,new String[]{""""});fail(""MissingOptionException wasn't thrown"");}catch(MissingOptionException e){assertEquals(1,e.getMissingOptions().size());assertTrue(e.getMissingOptions().contains(""n""));}}"
"org.apache.commons.cli.bug.BugCLI18Test.testCLI18",0,"public void testCLI18(){Options options=new Options();options.addOption(new Option(""a"",""aaa"",false,""aaaaaaa""));options.addOption(new Option(null,""bbb"",false,""bbbbbbb dksh fkshd fkhs dkfhsdk fhskd hksdks dhfowehfsdhfkjshf skfhkshf sf jkshfk sfh skfh skf f""));options.addOption(new Option(""c"",null,false,""ccccccc""));HelpFormatter formatter=new HelpFormatter();StringWriter out=new StringWriter();formatter.printHelp(new PrintWriter(out),80,""foobar"",""dsfkfsh kdh hsd hsdh fkshdf ksdh fskdh fsdh fkshfk sfdkjhskjh fkjh fkjsh khsdkj hfskdhf skjdfh ksf khf s"",options,2,2,""blort j jgj j jg jhghjghjgjhgjhg jgjhgj jhg jhg hjg jgjhghjg jhg hjg jhgjg jgjhghjg jg jgjhgjgjg jhg jhgjh"" + '\r' + '\n'+ ""rarrr"",true);}"
"org.apache.commons.cli.bug.BugCLI13Test.testCLI13",0,"public void testCLI13()throws ParseException {final String debugOpt=""debug"";Option debug=OptionBuilder.withArgName(debugOpt).withDescription(""turn on debugging"").withLongOpt(debugOpt).hasArg().create('d');Options options=new Options();options.addOption(debug);CommandLine commandLine=new PosixParser().parse(options,new String[]{""-d"",""true""});assertEquals(""true"",commandLine.getOptionValue(debugOpt));assertEquals(""true"",commandLine.getOptionValue('d'));assertTrue(commandLine.hasOption('d'));assertTrue(commandLine.hasOption(debugOpt));}"
"org.apache.commons.cli.bug.BugCLI162Test.testInfiniteLoop",0,"public void testInfiniteLoop(){Options options=new Options();options.addOption(""h"",""help"",false,""This is a looooong description"");HelpFormatter formatter=new HelpFormatter();formatter.setWidth(20);formatter.printHelp(""app"",options);}"
"org.apache.commons.cli.bug.BugCLI162Test.testPrintHelpLongLines",0,"public void testPrintHelpLongLines()throws ParseException,IOException {final String OPT=""-"";final String OPT_COLUMN_NAMES=""l"";final String OPT_CONNECTION=""c"";final String OPT_DESCRIPTION=""e"";final String OPT_DRIVER=""d"";final String OPT_DRIVER_INFO=""n"";final String OPT_FILE_BINDING=""b"";final String OPT_FILE_JDBC=""j"";final String OPT_FILE_SFMD=""f"";final String OPT_HELP=""h"";final String OPT_HELP_=""help"";final String OPT_INTERACTIVE=""i"";final String OPT_JDBC_TO_SFMD=""2"";final String OPT_JDBC_TO_SFMD_L=""jdbc2sfmd"";final String OPT_METADATA=""m"";final String OPT_PARAM_MODES_INT=""o"";final String OPT_PARAM_MODES_NAME=""O"";final String OPT_PARAM_NAMES=""a"";final String OPT_PARAM_TYPES_INT=""y"";final String OPT_PARAM_TYPES_NAME=""Y"";final String OPT_PASSWORD=""p"";final String OPT_PASSWORD_L=""password"";final String OPT_SQL=""s"";final String OPT_SQL_L=""sql"";final String OPT_SQL_SPLIT_DEFAULT=""###"";final String OPT_SQL_SPLIT_L=""splitSql"";final String OPT_STACK_TRACE=""t"";final String OPT_TIMING=""g"";final String OPT_TRIM_L=""trim"";final String OPT_USER=""u"";final String OPT_WRITE_TO_FILE=""w"";final String _PMODE_IN=""IN"";final String _PMODE_INOUT=""INOUT"";final String _PMODE_OUT=""OUT"";final String _PMODE_UNK=""Unknown"";final String PMODES=_PMODE_IN + "","" + _PMODE_INOUT+ "",""+ _PMODE_OUT+ "",""+ _PMODE_UNK;Options commandLineOptions;commandLineOptions=new Options();commandLineOptions.addOption(OPT_HELP,OPT_HELP_,false,""Prints help and quits"");commandLineOptions.addOption(OPT_DRIVER,""driver"",true,""JDBC driver class name"");commandLineOptions.addOption(OPT_DRIVER_INFO,""info"",false,""Prints driver information and properties. If "" + OPT + OPT_CONNECTION+ "" is not specified,all drivers on the classpath are displayed."");commandLineOptions.addOption(OPT_CONNECTION,""url"",true,""Connection URL"");commandLineOptions.addOption(OPT_USER,""user"",true,""A database user name"");commandLineOptions.addOption(OPT_PASSWORD,OPT_PASSWORD_L,true,""The database password for the user specified with the "" + OPT + OPT_USER+ "" option. You can obfuscate the password with org.mortbay.jetty.security.Password,see http://docs.codehaus.org/display/JETTY/Securing+Passwords"");commandLineOptions.addOption(OPT_SQL,OPT_SQL_L,true,""Runs SQL or {call stored_procedure(?,?)}or {?=call function(?,?)}"");commandLineOptions.addOption(OPT_FILE_SFMD,""sfmd"",true,""Writes a SFMD file for the given SQL"");commandLineOptions.addOption(OPT_FILE_BINDING,""jdbc"",true,""Writes a JDBC binding node file for the given SQL"");commandLineOptions.addOption(OPT_FILE_JDBC,""node"",true,""Writes a JDBC node file for the given SQL (internal debugging)"");commandLineOptions.addOption(OPT_WRITE_TO_FILE,""outfile"",true,""Writes the SQL output to the given file"");commandLineOptions.addOption(OPT_DESCRIPTION,""description"",true,""SFMD description. A default description is used if omited. Example: "" + OPT + OPT_DESCRIPTION+ "" \""Runs such and such\"""");commandLineOptions.addOption(OPT_INTERACTIVE,""interactive"",false,""Runs in interactive mode,reading and writing from the console,'go' or '/' sends a statement"");commandLineOptions.addOption(OPT_TIMING,""printTiming"",false,""Prints timing information"");commandLineOptions.addOption(OPT_METADATA,""printMetaData"",false,""Prints metadata information"");commandLineOptions.addOption(OPT_STACK_TRACE,""printStack"",false,""Prints stack traces on errors"");Option option=new Option(OPT_COLUMN_NAMES,""columnNames"",true,""Column XML names;default names column labels. Example: "" + OPT + OPT_COLUMN_NAMES+ "" \""cname1 cname2\"""");commandLineOptions.addOption(option);option=new Option(OPT_PARAM_NAMES,""paramNames"",true,""Parameter XML names;default names are param1,param2,etc. Example: "" + OPT + OPT_PARAM_NAMES+ "" \""pname1 pname2\"""");commandLineOptions.addOption(option);OptionGroup pOutTypesOptionGroup=new OptionGroup();String pOutTypesOptionGroupDoc=OPT + OPT_PARAM_TYPES_INT + "" and ""+ OPT+ OPT_PARAM_TYPES_NAME+ "" are mutually exclusive."";final String typesClassName=Types.class.getName();option=new Option(OPT_PARAM_TYPES_INT,""paramTypes"",true,""Parameter types from "" + typesClassName + "". ""+ pOutTypesOptionGroupDoc+ "" Example: ""+ OPT+ OPT_PARAM_TYPES_INT+ "" \""-10 12\"""");commandLineOptions.addOption(option);option=new Option(OPT_PARAM_TYPES_NAME,""paramTypeNames"",true,""Parameter "" + typesClassName + "" names. ""+ pOutTypesOptionGroupDoc+ "" Example: ""+ OPT+ OPT_PARAM_TYPES_NAME+ "" \""CURSOR VARCHAR\"""");commandLineOptions.addOption(option);commandLineOptions.addOptionGroup(pOutTypesOptionGroup);OptionGroup modesOptionGroup=new OptionGroup();String modesOptionGroupDoc=OPT + OPT_PARAM_MODES_INT + "" and ""+ OPT+ OPT_PARAM_MODES_NAME+ "" are mutually exclusive."";option=new Option(OPT_PARAM_MODES_INT,""paramModes"",true,""Parameters modes ("" + ParameterMetaData.parameterModeIn + ""=IN,""+ ParameterMetaData.parameterModeInOut+ ""=INOUT,""+ ParameterMetaData.parameterModeOut+ ""=OUT,""+ ParameterMetaData.parameterModeUnknown+ ""=Unknown""+ ""). ""+ modesOptionGroupDoc+ "" Example for 2 parameters,OUT and IN: ""+ OPT+ OPT_PARAM_MODES_INT+ "" \""""+ ParameterMetaData.parameterModeOut+ "" ""+ ParameterMetaData.parameterModeIn+ ""\"""");modesOptionGroup.addOption(option);option=new Option(OPT_PARAM_MODES_NAME,""paramModeNames"",true,""Parameters mode names ("" + PMODES + ""). ""+ modesOptionGroupDoc+ "" Example for 2 parameters,OUT and IN: ""+ OPT+ OPT_PARAM_MODES_NAME+ "" \""""+ _PMODE_OUT+ "" ""+ _PMODE_IN+ ""\"""");modesOptionGroup.addOption(option);commandLineOptions.addOptionGroup(modesOptionGroup);option=new Option(null,OPT_TRIM_L,true,""Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim."");option.setOptionalArg(true);commandLineOptions.addOption(option);option=new Option(OPT_JDBC_TO_SFMD,OPT_JDBC_TO_SFMD_L,true,""Converts the JDBC file in the first argument to an SMFD file specified in the second argument."");option.setArgs(2);commandLineOptions.addOption(option);new HelpFormatter().printHelp(this.getClass().getName(),commandLineOptions);}"
"org.apache.commons.cli.bug.BugCLI162Test.testLongLineChunking",0,"public void testLongLineChunking()throws ParseException,IOException {Options options=new Options();options.addOption(""x"",""extralongarg"",false,""This description has ReallyLongValuesThatAreLongerThanTheWidthOfTheColumns "" + ""and also other ReallyLongValuesThatAreHugerAndBiggerThanTheWidthOfTheColumnsBob,"" + ""yes. "");HelpFormatter formatter=new HelpFormatter();StringWriter sw=new StringWriter();formatter.printHelp(new PrintWriter(sw),35,this.getClass().getName(),""Header"",options,0,5,""Footer"");String expected=""usage:"" + CR + ""       org.apache.commons.cli.bug.B""+ CR+ ""       ugCLI162Test""+ CR+ ""Header""+ CR+ ""-x,--extralongarg     This""+ CR+ ""                      description""+ CR+ ""                      has""+ CR+ ""                      ReallyLongVal""+ CR+ ""                      uesThatAreLon""+ CR+ ""                      gerThanTheWid""+ CR+ ""                      thOfTheColumn""+ CR+ ""                      s and also""+ CR+ ""                      other""+ CR+ ""                      ReallyLongVal""+ CR+ ""                      uesThatAreHug""+ CR+ ""                      erAndBiggerTh""+ CR+ ""                      anTheWidthOfT""+ CR+ ""                      heColumnsBob,""+ CR+ ""                      yes.""+ CR+ ""Footer""+ CR;assertEquals(""Long arguments did not split as expected"",expected,sw.toString());}"
"org.apache.commons.cli.bug.BugCLI162Test.testLongLineChunkingIndentIgnored",0,"public void testLongLineChunkingIndentIgnored()throws ParseException,IOException {Options options=new Options();options.addOption(""x"",""extralongarg"",false,""This description is Long."");HelpFormatter formatter=new HelpFormatter();StringWriter sw=new StringWriter();formatter.printHelp(new PrintWriter(sw),22,this.getClass().getName(),""Header"",options,0,5,""Footer"");System.err.println(sw.toString());String expected=""usage:"" + CR + ""       org.apache.comm""+ CR+ ""       ons.cli.bug.Bug""+ CR+ ""       CLI162Test""+ CR+ ""Header""+ CR+ ""-x,--extralongarg""+ CR+ "" This description is""+ CR+ "" Long.""+ CR+ ""Footer""+ CR;assertEquals(""Long arguments did not split as expected"",expected,sw.toString());}"
"org.apache.commons.cli.OptionBuilderTest.testCompleteOption",0,"public void testCompleteOption(){Option simple=OptionBuilder.withLongOpt(""simple option"").hasArg().isRequired().hasArgs().withType(new Float(10)).withDescription(""this is a simple option"").create('s');assertEquals(""s"",simple.getOpt());assertEquals(""simple option"",simple.getLongOpt());assertEquals(""this is a simple option"",simple.getDescription());assertEquals(simple.getType().getClass(),Float.class);assertTrue(simple.hasArg());assertTrue(simple.isRequired());assertTrue(simple.hasArgs());}"
"org.apache.commons.cli.OptionBuilderTest.testTwoCompleteOptions",0,"public void testTwoCompleteOptions(){Option simple=OptionBuilder.withLongOpt(""simple option"").hasArg().isRequired().hasArgs().withType(new Float(10)).withDescription(""this is a simple option"").create('s');assertEquals(""s"",simple.getOpt());assertEquals(""simple option"",simple.getLongOpt());assertEquals(""this is a simple option"",simple.getDescription());assertEquals(simple.getType().getClass(),Float.class);assertTrue(simple.hasArg());assertTrue(simple.isRequired());assertTrue(simple.hasArgs());simple=OptionBuilder.withLongOpt(""dimple option"").hasArg().withDescription(""this is a dimple option"").create('d');assertEquals(""d"",simple.getOpt());assertEquals(""dimple option"",simple.getLongOpt());assertEquals(""this is a dimple option"",simple.getDescription());assertNull(simple.getType());assertTrue(simple.hasArg());assertTrue(!simple.isRequired());assertTrue(!simple.hasArgs());}"
"org.apache.commons.cli.OptionBuilderTest.testBaseOptionCharOpt",0,"public void testBaseOptionCharOpt(){Option base=OptionBuilder.withDescription(""option description"").create('o');assertEquals(""o"",base.getOpt());assertEquals(""option description"",base.getDescription());assertTrue(!base.hasArg());}"
"org.apache.commons.cli.OptionBuilderTest.testBaseOptionStringOpt",0,"public void testBaseOptionStringOpt(){Option base=OptionBuilder.withDescription(""option description"").create(""o"");assertEquals(""o"",base.getOpt());assertEquals(""option description"",base.getDescription());assertTrue(!base.hasArg());}"
"org.apache.commons.cli.OptionBuilderTest.testSpecialOptChars",0,"public void testSpecialOptChars()throws Exception {Option opt1=OptionBuilder.withDescription(""help options"").create('?');assertEquals(""?"",opt1.getOpt());Option opt2=OptionBuilder.withDescription(""read from stdin"").create('@');assertEquals(""@"",opt2.getOpt());}"
"org.apache.commons.cli.OptionBuilderTest.testOptionArgNumbers",0,"public void testOptionArgNumbers(){Option opt=OptionBuilder.withDescription(""option description"").hasArgs(2).create('o');assertEquals(2,opt.getArgs());}"
"org.apache.commons.cli.OptionBuilderTest.testIllegalOptions",0,"public void testIllegalOptions(){try {OptionBuilder.withDescription(""option description"").create('""');fail(""IllegalArgumentException not caught"");}catch(IllegalArgumentException exp){}try {Option opt=OptionBuilder.create(""opt`"");fail(""IllegalArgumentException not caught"");}catch(IllegalArgumentException exp){}try {Option opt=OptionBuilder.create(""opt"");}catch(IllegalArgumentException exp){fail(""IllegalArgumentException caught"");}}"
"org.apache.commons.cli.OptionBuilderTest.testCreateIncompleteOption",0,"public void testCreateIncompleteOption(){try {OptionBuilder.hasArg().create();fail(""Incomplete option should be rejected"");}catch(IllegalArgumentException e){OptionBuilder.create(""opt"");}}"
"org.apache.commons.cli.OptionBuilderTest.testBuilderIsResettedAlways",0,"public void testBuilderIsResettedAlways(){try {OptionBuilder.withDescription(""JUnit"").create('""');fail(""IllegalArgumentException expected"");}catch(IllegalArgumentException e){}assertNull(""we inherited a description"",OptionBuilder.create('x').getDescription());try {OptionBuilder.withDescription(""JUnit"").create();fail(""IllegalArgumentException expected"");}catch(IllegalArgumentException e){}assertNull(""we inherited a description"",OptionBuilder.create('x').getDescription());}"
