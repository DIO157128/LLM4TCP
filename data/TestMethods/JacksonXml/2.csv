test_case,faulty,test_code
"com.fasterxml.jackson.dataformat.xml.VersionInfoTest.testMapperVersions",0,"public void testMapperVersions(){assertVersion(new XmlMapper());assertVersion(new XmlFactory());}"
"com.fasterxml.jackson.dataformat.xml.VersionInfoTest.testMapperCopy",0,"public void testMapperCopy(){XmlMapper mapper1=new XmlMapper();mapper1.setXMLTextElementName(""foo"");mapper1.configure(ToXmlGenerator.Feature.WRITE_XML_DECLARATION,true);XmlMapper mapper2=mapper1.copy();assertNotSame(mapper1,mapper2);XmlFactory xf1=mapper1.getFactory();XmlFactory xf2=mapper2.getFactory();assertNotSame(xf1,xf2);assertEquals(XmlFactory.class,xf2.getClass());assertEquals(xf1.getXMLTextElementName(),xf2.getXMLTextElementName());assertEquals(xf1._xmlGeneratorFeatures,xf2._xmlGeneratorFeatures);assertEquals(xf1._xmlParserFeatures,xf2._xmlParserFeatures);}"
"com.fasterxml.jackson.dataformat.xml.VersionInfoTest.testMapperSerialization",0,"public void testMapperSerialization()throws Exception {XmlMapper mapper1=new XmlMapper();mapper1.setXMLTextElementName(""foo"");assertEquals(""foo"",mapper1.getFactory().getXMLTextElementName());ByteArrayOutputStream bytes=new ByteArrayOutputStream();ObjectOutputStream objectStream=new ObjectOutputStream(bytes);objectStream.writeObject(mapper1);objectStream.close();ObjectInputStream input=new ObjectInputStream(new ByteArrayInputStream(bytes.toByteArray()));XmlMapper mapper2=(XmlMapper)input.readObject();input.close();assertEquals(""foo"",mapper2.getFactory().getXMLTextElementName());}"
"com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleElement",0,"public void testSimpleElement()throws Exception {XmlFactory f=new XmlFactory();StringWriter out=new StringWriter();ToXmlGenerator gen=f.createGenerator(out);gen.setNextName(new QName(""root""));gen.writeStartObject();gen.writeFieldName(""elem"");gen.writeString(""value"");gen.writeEndObject();gen.close();String xml=out.toString();xml=removeSjsxpNamespace(xml);assertEquals(""<root><elem>value</elem></root>"",xml);}"
"com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleAttribute",0,"public void testSimpleAttribute()throws Exception {XmlFactory f=new XmlFactory();StringWriter out=new StringWriter();ToXmlGenerator gen=f.createGenerator(out);gen.setNextName(new QName(""root""));gen.writeStartObject();gen.setNextIsAttribute(true);gen.writeFieldName(""attr"");gen.writeString(""value"");gen.writeEndObject();gen.close();String xml=out.toString();xml=removeSjsxpNamespace(xml);assertEquals(""<root attr=\""value\""/>"",xml);}"
"com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSecondLevelAttribute",0,"public void testSecondLevelAttribute()throws Exception {XmlFactory f=new XmlFactory();StringWriter out=new StringWriter();ToXmlGenerator gen=f.createGenerator(out);gen.setNextName(new QName(""root""));gen.writeStartObject();gen.writeFieldName(""elem"");gen.writeStartObject();gen.setNextIsAttribute(true);gen.writeFieldName(""attr"");gen.writeString(""value"");gen.writeEndObject();gen.writeEndObject();gen.close();String xml=out.toString();xml=removeSjsxpNamespace(xml);assertEquals(""<root><elem attr=\""value\""/></root>"",xml);}"
"com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testAttrAndElem",0,"public void testAttrAndElem()throws Exception {XmlFactory f=new XmlFactory();StringWriter out=new StringWriter();ToXmlGenerator gen=f.createGenerator(out);gen.setNextName(new QName(""root""));gen.writeStartObject();gen.writeFieldName(""attr"");gen.setNextIsAttribute(true);gen.writeNumber(-3);gen.setNextIsAttribute(false);gen.writeFieldName(""elem"");gen.writeNumber(13);gen.writeEndObject();gen.close();String xml=removeSjsxpNamespace(out.toString());assertEquals(""<root attr=\""-3\""><elem>13</elem></root>"",xml);}"
"com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testWriteToFile",0,"public void testWriteToFile()throws Exception {ObjectMapper mapper=new XmlMapper();File f=File.createTempFile(""test"","".tst"");mapper.writeValue(f,new IntWrapper(42));String xml=readAll(f).trim();assertEquals(""<IntWrapper><i>42</i></IntWrapper>"",xml);f.delete();}"
"com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testSimpleNsAttr",0,"public void testSimpleNsAttr()throws IOException {String xml=_xmlMapper.writeValueAsString(new NsAttrBean());xml=removeSjsxpNamespace(xml);assertEquals(""<NsAttrBean xmlns:wstxns1=\""http://foo\"" wstxns1:attr=\""3\""/>"",xml);}"
"com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue19",0,"public void testIssue19()throws IOException {String xml=_xmlMapper.writeValueAsString(new Issue19Bean());xml=removeSjsxpNamespace(xml);xml=xml.replaceAll(""\"""",""'"");assertEquals(""<test xmlns='http://root' id='abc'>"" + ""<wstxns1:booleanA xmlns:wstxns1='http://my.ns'>true</wstxns1:booleanA></test>"",xml);}"
"com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue6",0,"public void testIssue6()throws IOException {assertEquals(""<Jurisdiction name=\""Foo\"" value=\""13\""/>"",_xmlMapper.writeValueAsString(new Jurisdiction()));}"
"com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue117AnySetterAttrs",0,"public void testIssue117AnySetterAttrs()throws IOException {Map<String,String> values=new HashMap<String,String>();values.put(""prop1"",""val1"");String xml=_xmlMapper.writeValueAsString(new DynaBean(values));assertEquals(""<dynaBean class=\""TestSerializationAttr$DynaBean\""><prop1>val1</prop1></dynaBean>"",removeSjsxpNamespace(xml));}"
"com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.testEmptyList",0,"public void testEmptyList()throws Exception {Config r=MAPPER.readValue(""<Config id='123'>\n"" + ""  <entry id='foo'> </entry>\n"" + ""</Config>\n"",Config.class);assertNotNull(r);assertEquals(""123"",r.id);assertNotNull(r.entry);assertEquals(1,r.entry.size());assertEquals(""foo"",r.entry.get(0).id);}"
"com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testRootName",0,"/** * Unit test for verifying that root element name can be overridden with  {@link XmlRootElement}annotation.*/public void testRootName()throws Exception {RootBean bean=new RootBean();assertEquals(""<RootBean><value>text</value></RootBean>"",_nonJaxbMapper.writeValueAsString(bean));assertEquals(""<bean><value>text</value></bean>"",_jaxbMapper.writeValueAsString(bean));}"
"com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testSerializeAsAttr",0,"/** * Unit test for verifying that a property defaults to being written as element,but can be redefined with  {@link XmlAttribute}annotation.*/public void testSerializeAsAttr()throws Exception {AttrBean bean=new AttrBean();assertEquals(""<AttrBean><attr>3</attr></AttrBean>"",_nonJaxbMapper.writeValueAsString(bean));assertEquals(""<AttrBean attr=\""3\""/>"",_jaxbMapper.writeValueAsString(bean));}"
"com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testAsTextWithJAXB",0,"/** * Unit test for verifying correct handling of {@link XmlValue}annotation.*/public void testAsTextWithJAXB()throws IOException {String xml=_jaxbMapper.writeValueAsString(new WithXmlValue());assertEquals(""<Simple a=\""13\"">something</Simple>"",xml);WithXmlValue result=_jaxbMapper.readValue(""<Simple a='99'>else</Simple>"",WithXmlValue.class);assertEquals(99,result.a);assertEquals(""else"",result.text);}"
"com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testPersonAsXml",0,"public void testPersonAsXml()throws Exception {MyPerson person=new MyPerson();person.id=Long.valueOf(1L);person.firstName=""Jay"";person.lastName=""Unit"";String json=_jaxbMapper.writeValueAsString(person);String expected=""<Individual identifier=\""1\""><givenName>Jay</givenName>"" + ""<surName>Unit</surName></Individual>"";assertEquals(expected,json);}"
"com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest.testEmptyList",0,"public void testEmptyList()throws Exception {String xml=MAPPER.writeValueAsString(new Order());assertEquals(""<Order/>"",xml);}"
"com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testRootName",0,"public void testRootName()throws IOException {String xml=_xmlMapper.writeValueAsString(new StringBean());if (!xml.startsWith(""<StringBean"")){fail(""Expected root name of 'StringBean';but XML document is ["" + xml + ""]"");}xml=_xmlMapper.writeValueAsString(new RootBean());assertEquals(""<root><value>123</value></root>"",xml);xml=_xmlMapper.writeValueAsString(new NsRootBean());if (xml.indexOf(""nsRoot"")< 0){fail(""Expected root name of 'nsRoot';but XML document is ["" + xml + ""]"");}if (xml.indexOf(""http://foo"")< 0){fail(""Expected NS declaration for 'http://foo',not found,XML document is ["" + xml + ""]"");}}"
"com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleAttribute",0,"public void testSimpleAttribute()throws IOException {String xml=_xmlMapper.writeValueAsString(new AttributeBean());xml=removeSjsxpNamespace(xml);assertEquals(""<AttributeBean attr=\""something\""/>"",xml);}"
"com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleAttrAndElem",0,"public void testSimpleAttrAndElem()throws IOException {String xml=_xmlMapper.writeValueAsString(new AttrAndElem());xml=removeSjsxpNamespace(xml);assertEquals(""<AttrAndElem id=\""42\""><elem>whatever</elem></AttrAndElem>"",xml);}"
"com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleNsElem",0,"public void testSimpleNsElem()throws IOException {String xml=_xmlMapper.writeValueAsString(new NsElemBean());xml=removeSjsxpNamespace(xml);assertEquals(""<NsElemBean><wstxns1:text xmlns:wstxns1=\""http://foo\"">blah</wstxns1:text></NsElemBean>"",xml);}"
"com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testMap",0,"@SuppressWarnings(""boxing"")public void testMap()throws IOException {LinkedHashMap<String,Integer> map=new LinkedHashMap<String,Integer>();map.put(""a"",1);map.put(""b"",2);String xml;xml=_xmlMapper.writeValueAsString(new WrapperBean<Map<?,?>>(map));assertEquals(""<WrapperBean><value>"" + ""<a>1</a>"" + ""<b>2</b>""+ ""</value></WrapperBean>"",xml);xml=_xmlMapper.writeValueAsString(new MapBean(map));assertEquals(""<MapBean><map>"" + ""<a>1</a>"" + ""<b>2</b>""+ ""</map></MapBean>"",xml);}"
"com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testNakedMap",0,"public void testNakedMap()throws IOException {CustomMap input=new CustomMap();input.put(""a"",123);input.put(""b"",456);String xml=_xmlMapper.writeValueAsString(input);CustomMap result=_xmlMapper.readValue(xml,CustomMap.class);assertEquals(2,result.size());assertEquals(Integer.valueOf(456),result.get(""b""));}"
"com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCDataString",0,"public void testCDataString()throws IOException {String xml=_xmlMapper.writeValueAsString(new CDataStringBean());xml=removeSjsxpNamespace(xml);assertEquals(""<CDataStringBean><value><![CDATA[<some<data\""]]></value></CDataStringBean>"",xml);}"
"com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCDataStringArray",0,"public void testCDataStringArray()throws IOException {String xml=_xmlMapper.writeValueAsString(new CDataStringArrayBean());xml=removeSjsxpNamespace(xml);assertEquals(""<CDataStringArrayBean><value><value><![CDATA[<some<data\""]]></value><value><![CDATA[abc]]></value></value></CDataStringArrayBean>"",xml);}"
"com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCustomSerializer",0,"public void testCustomSerializer()throws Exception {JacksonXmlModule module=new JacksonXmlModule();module.addSerializer(String.class,new CustomSerializer());XmlMapper xml=new XmlMapper(module);assertEquals(""<String>custom:foo</String>"",xml.writeValueAsString(""foo""));}"
"com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test.testListWithEmptyCData",0,"public void testListWithEmptyCData()throws Exception {_testListWithEmptyCData("" "");_testListWithEmptyCData("""");}"
"com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.testAnnotationSharing",0,"public void testAnnotationSharing()throws Exception {Wrapper input=new Wrapper();input.points.add(new Point(1,2));String xml=MAPPER.writeValueAsString(input);assertEquals(""<Wrapper><Points><Point><x>1</x><y>2</y></Point></Points></Wrapper>"",xml);Wrapper result=MAPPER.readValue(xml,Wrapper.class);assertEquals(1,result.points.size());}"
"com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2",0,"public void testNested1_2()throws Exception {final String XML=""<ServiceDelivery>\n"" + ""  <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\n"" + ""  <VehicleMonitoringDelivery>\n""+ ""    <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\n""+ ""    <ValidUntil>2012-09-12T09:29:17.213-04:00</ValidUntil>\n""+ ""    <VehicleActivity>\n""+ ""      <RecordedAtTime>2012-09-12T09:28:07.536-04:00</RecordedAtTime>\n""+ ""    </VehicleActivity>\n""+ ""    <VehicleActivity>\n""+ ""      <RecordedAtTime>2013-09-12T09:29:07.536-04:00</RecordedAtTime>\n""+ ""    </VehicleActivity>\n""+ ""  </VehicleMonitoringDelivery>\n""+ ""</ServiceDelivery>\n"";ServiceDelivery svc=_xmlMapper.readValue(XML,ServiceDelivery.class);assertNotNull(svc);assertNotNull(svc.vehicleMonitoringDelivery);assertEquals(1,svc.vehicleMonitoringDelivery.size());VehicleMonitoringDelivery del=svc.vehicleMonitoringDelivery.get(0);assertEquals(""2012-09-12T09:28:17.213-04:00"",del.responseTimestamp);assertNotNull(del);assertNotNull(del.vehicleActivity);assertEquals(2,del.vehicleActivity.size());VehicleActivity act=del.vehicleActivity.get(1);assertNotNull(act);assertEquals(""2013-09-12T09:29:07.536-04:00"",act.recordedAtTime);}"
"com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty",0,"public void testNestedWithEmpty()throws Exception {final String XML=""<ServiceDelivery>\n"" + ""  <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\n"" + ""  <VehicleMonitoringDelivery>\n""+ ""  </VehicleMonitoringDelivery>\n""+ ""</ServiceDelivery>\n"";ServiceDelivery svc=_xmlMapper.readValue(XML,ServiceDelivery.class);assertNotNull(svc);assertNotNull(svc.vehicleMonitoringDelivery);assertEquals(1,svc.vehicleMonitoringDelivery.size());}"
"com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty2",0,"public void testNestedWithEmpty2()throws Exception {final String XML=""<ServiceDelivery>\n"" + ""  <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\n"" + ""  <VehicleMonitoringDelivery>\n""+ ""    <VehicleActivity>\n""+ ""    </VehicleActivity>\n""+ ""  </VehicleMonitoringDelivery>\n""+ ""</ServiceDelivery>\n"";ServiceDelivery svc=_xmlMapper.readValue(XML,ServiceDelivery.class);assertNotNull(svc);assertNotNull(svc.vehicleMonitoringDelivery);assertEquals(1,svc.vehicleMonitoringDelivery.size());VehicleMonitoringDelivery del=svc.vehicleMonitoringDelivery.get(0);assertNotNull(del.vehicleActivity);assertEquals(1,del.vehicleActivity.size());}"
"com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2b",0,"public void testNested1_2b()throws Exception {final String XML=""<ServiceDelivery>\n"" + ""  <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\n"" + ""  <VehicleMonitoringDelivery>\n""+ ""    <VehicleActivity>\n""+ ""      <RecordedAtTime>2012-09-12T09:28:07.536-04:00</RecordedAtTime>\n""+ ""    </VehicleActivity>\n""+ ""    <VehicleActivity>\n""+ ""      <RecordedAtTime>2013-09-12T09:29:07.536-04:00</RecordedAtTime>\n""+ ""    </VehicleActivity>\n""+ ""    <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\n""+ ""    <ValidUntil>2012-09-12T09:29:17.213-04:00</ValidUntil>\n""+ ""  </VehicleMonitoringDelivery>\n""+ ""</ServiceDelivery>\n"";ServiceDelivery svc=_xmlMapper.readValue(XML,ServiceDelivery.class);assertNotNull(svc);assertEquals(""2012-09-12T09:28:17.213-04:00"",svc.responseTimestamp);assertNotNull(svc.vehicleMonitoringDelivery);assertEquals(1,svc.vehicleMonitoringDelivery.size());VehicleMonitoringDelivery del=svc.vehicleMonitoringDelivery.get(0);assertEquals(""2012-09-12T09:29:17.213-04:00"",del.validUntil);assertNotNull(del);assertNotNull(del.vehicleActivity);assertEquals(2,del.vehicleActivity.size());VehicleActivity act=del.vehicleActivity.get(1);assertNotNull(act);assertEquals(""2013-09-12T09:29:07.536-04:00"",act.recordedAtTime);}"
"com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested2_1",0,"public void testNested2_1()throws Exception {final String XML=""<ServiceDelivery>\n"" + ""  <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\n"" + ""  <VehicleMonitoringDelivery>\n""+ ""    <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\n""+ ""    <ValidUntil>2012-09-12T09:29:17.213-04:00</ValidUntil>\n""+ ""    <VehicleActivity>\n""+ ""      <RecordedAtTime>2012-09-12T09:28:07.536-04:00</RecordedAtTime>\n""+ ""    </VehicleActivity>\n""+ ""  </VehicleMonitoringDelivery>\n""+ ""  <VehicleMonitoringDelivery>\n""+ ""    <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\n""+ ""    <ValidUntil>2012-09-12T09:29:17.213-04:00</ValidUntil>\n""+ ""    <VehicleActivity>\n""+ ""      <RecordedAtTime>2012-09-12T09:28:07.536-04:00</RecordedAtTime>\n""+ ""    </VehicleActivity>\n""+ ""  </VehicleMonitoringDelivery>\n""+ ""</ServiceDelivery>\n"";ServiceDelivery svc=_xmlMapper.readValue(XML,ServiceDelivery.class);assertNotNull(svc);assertEquals(""2012-09-12T09:28:17.213-04:00"",svc.responseTimestamp);assertNotNull(svc.vehicleMonitoringDelivery);assertEquals(2,svc.vehicleMonitoringDelivery.size());VehicleMonitoringDelivery del=svc.vehicleMonitoringDelivery.get(1);assertNotNull(del);assertNotNull(del.vehicleActivity);assertEquals(1,del.vehicleActivity.size());assertEquals(""2012-09-12T09:28:07.536-04:00"",del.vehicleActivity.get(0).recordedAtTime);}"
"com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testRoundTripWithJacksonExample",0,"/** * Unit test to ensure that we can successfully also round trip example Bean used in Jackson tutorial*/public void testRoundTripWithJacksonExample()throws Exception {FiveMinuteUser user=new FiveMinuteUser(""Joe"",""Sixpack"",true,FiveMinuteUser.Gender.MALE,new byte[]{1,2,3,4,5});String xml=MAPPER.writeValueAsString(user);FiveMinuteUser result=MAPPER.readValue(xml,FiveMinuteUser.class);assertEquals(user,result);}"
"com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testFromAttribute",0,"public void testFromAttribute()throws Exception {AttributeBean bean=MAPPER.readValue(""<AttributeBean attr=\""abc\""></AttributeBean>"",AttributeBean.class);assertNotNull(bean);assertEquals(""abc"",bean.text);}"
"com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testMapWithAttr",0,"public void testMapWithAttr()throws Exception {final String xml=""<order><person lang='en'>John Smith</person></order>"";Map<?,?> map=MAPPER.readValue(xml,Map.class);assertNotNull(map);}"
"com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testOptionalAttr",0,"public void testOptionalAttr()throws Exception {Optional ob=MAPPER.readValue(""<Optional type='work'>123-456-7890</Optional>"",Optional.class);assertNotNull(ob);assertEquals(""123-456-7890"",ob.number);assertEquals(""work"",ob.type);}"
"com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testMissingOptionalAttr",0,"public void testMissingOptionalAttr()throws Exception {Optional ob=MAPPER.readValue(""<Optional>123-456-7890</Optional>"",Optional.class);assertNotNull(ob);assertEquals(""123-456-7890"",ob.number);assertEquals(""NOT SET"",ob.type);}"
"com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testXmlTextWithSuppressedValue",0,"public void testXmlTextWithSuppressedValue()throws Exception {final XmlMapper mapper=new XmlMapper();mapper.setSerializationInclusion(Include.NON_EMPTY);String xml=mapper.writeValueAsString(new Data("""",""second""));String expectedXml=""<Data><second>second</second></Data>"";assertEquals(expectedXml,xml);}"
"com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testMixedContent",1,"public void testMixedContent()throws Exception {WindSpeed result=MAPPER.readValue(""<windSpeed units='kt'> 27 <radius>20</radius></windSpeed>"",WindSpeed.class);assertEquals(27,result.value);assertNotNull(result.radius);assertEquals(20,result.radius.value);}"
"com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testSimple198",0,"public void testSimple198()throws Exception {String xml=MAPPER.writeValueAsString(new Phone());Phone result=MAPPER.readValue(xml,Phone.class);assertNotNull(result);}"
"com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.testTwoAttributes",0,"public void testTwoAttributes()throws IOException {XmlMapper mapper=new XmlMapper();mapper.setAnnotationIntrospector(new JaxbAnnotationIntrospector(TypeFactory.defaultInstance()));String xml=mapper.writeValueAsString(new Jurisdiction());assertEquals(""<Jurisdiction name=\""Foo\"" value=\""13\""/>"",xml);}"
"com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.testAttributeAndElement",0,"public void testAttributeAndElement()throws IOException {XmlMapper mapper=new XmlMapper();mapper.setAnnotationIntrospector(new JaxbAnnotationIntrospector(TypeFactory.defaultInstance()));String xml=mapper.writeValueAsString(new Problem(""x"",""Stuff""));assertEquals(""<problem id=\""x\""><description>Stuff</description></problem>"",xml);}"
"com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.testSimple",0,"public void testSimple()throws Exception {StringWriter strw=new StringWriter();XMLStreamWriter sw=MAPPER.getFactory().getXMLOutputFactory().createXMLStreamWriter(strw);sw.writeStartElement(""root"");MAPPER.writeValue(sw,new NameBean(13,""Grizabella"",""Glamour""));MAPPER.writeValue(sw,new NameBean(17,""Growl"",""Tiger""));sw.writeEndElement();sw.writeEndDocument();sw.close();String xml=strw.toString().trim();assertEquals(""<root>"" + ""<NameBean age=\""13\""><first>Grizabella</first><last>Glamour</last></NameBean>"" + ""<NameBean age=\""17\""><first>Growl</first><last>Tiger</last></NameBean></root>"",xml);}"
"com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedList",0,"public void testWrappedList()throws Exception {Person p=new Person(""Name"",30);p.notes.add(""note 1"");p.notes.add(""note 2"");String xml=MAPPER.writeValueAsString(p);Person result=MAPPER.readValue(xml,Person.class);assertNotNull(result);assertEquals(""Name"",result.name);assertEquals(30,result.age);assertEquals(2,result.notes.size());assertEquals(""note 1"",result.notes.get(0));assertEquals(""note 2"",result.notes.get(1));}"
"com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithGetters",0,"public void testWrappedListWithGetters()throws Exception {PersonWithGetters p=new PersonWithGetters(""abc"");p._notes.add(""note 1"");p._notes.add(""note 2"");String xml=MAPPER.writeValueAsString(p);PersonWithGetters result=MAPPER.readValue(xml,PersonWithGetters.class);assertNotNull(result);assertEquals(""abc"",result.id);assertEquals(2,result._notes.size());assertEquals(""note 1"",result._notes.get(0));assertEquals(""note 2"",result._notes.get(1));}"
"com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListBeanDeser",0,"public void testWrappedListBeanDeser()throws Exception {ListBeanWrapped bean=MAPPER.readValue(""<ListBeanWrapped><values><values>1</values><values>2</values><values>3</values></values></ListBeanWrapped>"",ListBeanWrapped.class);assertNotNull(bean);assertNotNull(bean.values);assertEquals(3,bean.values.size());assertEquals(Integer.valueOf(1),bean.values.get(0));assertEquals(Integer.valueOf(2),bean.values.get(1));assertEquals(Integer.valueOf(3),bean.values.get(2));}"
"com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithAttribute",0,"public void testWrappedListWithAttribute()throws Exception {ListBeanWrapped bean=MAPPER.readValue(""<ListBeanWrapped><values id='123'><values>1</values><values>2</values></values></ListBeanWrapped>"",ListBeanWrapped.class);assertNotNull(bean);assertNotNull(bean.values);if (bean.values.size()< 2){fail(""List should have 2 entries,had "" + bean.values.size());}assertEquals(Integer.valueOf(1),bean.values.get(0));assertEquals(Integer.valueOf(2),bean.values.get(1));assertEquals(2,bean.values.size());}"
"com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testUnwrappedListBeanDeser",0,"public void testUnwrappedListBeanDeser()throws Exception {ListBeanUnwrapped bean=MAPPER.readValue(""<ListBeanUnwrapped><values>1</values><values>2</values><values>3</values></ListBeanUnwrapped>"",ListBeanUnwrapped.class);assertNotNull(bean);assertNotNull(bean.values);assertEquals(3,bean.values.size());assertEquals(Integer.valueOf(1),bean.values.get(0));assertEquals(Integer.valueOf(2),bean.values.get(1));assertEquals(Integer.valueOf(3),bean.values.get(2));}"
"com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.testPolyIdList178",0,"public void testPolyIdList178()throws Exception {Company input=new Company();input.add(new DesktopComputer().with(""1"",""http://foo.com""));final String LOC2=""http://bar.com"";input.add(new DesktopComputer().with(""2"",LOC2));String xml=MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(input);Company result=MAPPER.readValue(xml,Company.class);assertNotNull(result.computers);assertEquals(2,result.computers.size());Computer comp=result.computers.get(1);assertNotNull(comp);assertEquals(DesktopComputer.class,comp.getClass());DesktopComputer dt=(DesktopComputer)comp;assertEquals(LOC2,dt.location);}"
"com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testElementWrapper",0,"public void testElementWrapper()throws Exception {XmlMapper _jaxbMapper=new XmlMapper();AnnotationIntrospector intr=XmlAnnotationIntrospector.Pair.instance(new XmlJaxbAnnotationIntrospector(TypeFactory.defaultInstance()),new JacksonAnnotationIntrospector());_jaxbMapper.setAnnotationIntrospector(intr);MyPerson person=new MyPerson();person.name=""Jay"";MyPerson child=new MyPerson();child.name=""Junior"";person.children.add(child);String xml=_jaxbMapper.writer().writeValueAsString(person);String expected=""<Individual><name>Jay</name>"" + ""<offspring><kid><name>Junior</name><offspring/></kid></offspring></Individual>"";assertEquals(expected,xml);}"
"com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testNoElementWrapper",0,"public void testNoElementWrapper()throws Exception {XmlMapper jaxbMapper=new XmlMapper();jaxbMapper.setAnnotationIntrospector(new XmlJaxbAnnotationIntrospector(TypeFactory.defaultInstance()));MyPerson2 person=new MyPerson2();person.name=""Jay"";MyPerson2 child=new MyPerson2();child.name=""Junior"";person.child.add(child);String xml=jaxbMapper.writeValueAsString(person);String expected=""<p><name>Jay</name><child><name>Junior</name></child></p>"";assertEquals(expected,xml);}"
"com.fasterxml.jackson.dataformat.xml.deser.TestStringValues.testSimpleStringElement",0,"public void testSimpleStringElement()throws Exception {StringBean bean=MAPPER.readValue(""<StringBean><text>text!</text></StringBean>"",StringBean.class);assertNotNull(bean);assertEquals(""text!"",bean.text);}"
"com.fasterxml.jackson.dataformat.xml.deser.TestStringValues.testMissingString",0,"public void testMissingString()throws Exception {StringBean baseline=new StringBean();StringBean bean=MAPPER.readValue(""<StringBean />"",StringBean.class);assertNotNull(bean);assertEquals(baseline.text,bean.text);}"
"com.fasterxml.jackson.dataformat.xml.deser.TestStringValues.testStringWithAttribute",0,"public void testStringWithAttribute()throws Exception {StringBean bean=MAPPER.readValue(""<StringBean><text xml:lang='fi'>Pulla</text></StringBean>"",StringBean.class);assertNotNull(bean);assertEquals(""Pulla"",bean.text);}"
"com.fasterxml.jackson.dataformat.xml.deser.TestStringValues.testStringsWithAttribute",0,"public void testStringsWithAttribute()throws Exception {Bean2 bean=MAPPER.readValue(""<Bean2>\n"" + ""<a xml:lang='fi'>abc</a>"" + ""<b xml:lang='en'>def</b>""+ ""</Bean2>\n"",Bean2.class);assertNotNull(bean);assertEquals(""abc"",bean.a);assertEquals(""def"",bean.b);}"
"com.fasterxml.jackson.dataformat.xml.deser.TestStringValues.testStringArrayWithAttribute",0,"public void testStringArrayWithAttribute()throws Exception {StringBean[]beans=MAPPER.readValue(""<StringBean>\n"" + ""<StringBean><text xml:lang='fi'>Pulla</text></StringBean>"" + ""<StringBean><text xml:lang='se'>Bulla</text></StringBean>""+ ""<StringBean><text xml:lang='en'>Good stuff</text></StringBean>""+ ""</StringBean>"",StringBean[].class);assertNotNull(beans);assertEquals(3,beans.length);assertEquals(""Pulla"",beans[0].text);assertEquals(""Bulla"",beans[1].text);assertEquals(""Good stuff"",beans[2].text);}"
"com.fasterxml.jackson.dataformat.xml.deser.TestStringValues.testEmptyElementToString",0,"public void testEmptyElementToString()throws Exception {final String XML=""<a xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>\n"" + ""<d xsi:nil='true'/>\n"" + ""</a>\n"";Issue167Bean result=MAPPER.readValue(XML,Issue167Bean.class);assertNotNull(result);assertEquals("""",result.d);}"
"com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testWrappedLists",0,"public void testWrappedLists()throws Exception {XmlMapper mapper=new XmlMapper();WrappedList list=new WrappedList();list.value=new Value[]{new Value(""a""),new Value(""b"")};String json=mapper.writeValueAsString(list);assertEquals(""<list><WRAP><value><v>a</v></value><value><v>b</v></value></WRAP></list>"",json);WrappedList output=mapper.readValue(json,WrappedList.class);assertNotNull(output);assertNotNull(output.value);assertEquals(2,output.value.length);}"
"com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testUnwrappedLists",0,"public void testUnwrappedLists()throws Exception {XmlMapper mapper=new XmlMapper();UnwrappedList list=new UnwrappedList();list.value=new Value[]{new Value(""c""),new Value(""d"")};String json=mapper.writeValueAsString(list);assertEquals(""<list><value><v>c</v></value><value><v>d</v></value></list>"",json);UnwrappedList output=mapper.readValue(json,UnwrappedList.class);assertNotNull(output);assertNotNull(output.value);assertEquals(2,output.value.length);}"
"com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrapping",0,"/** * Test to verify that default wrapping setting is used*/public void testDefaultWrapping()throws Exception {XmlMapper mapper=new XmlMapper();DefaultList input=new DefaultList();input.value=new Value[]{new Value(""a""),new Value(""b"")};String json=mapper.writeValueAsString(input);assertEquals(""<DefaultList><value><value><v>a</v></value><value><v>b</v></value></value></DefaultList>"",json);DefaultList output=mapper.readValue(json,DefaultList.class);assertNotNull(output.value);assertEquals(2,output.value.length);JacksonXmlModule module=new JacksonXmlModule();module.setDefaultUseWrapper(false);mapper=new XmlMapper(module);json=mapper.writeValueAsString(input);assertEquals(""<DefaultList><value><v>a</v></value><value><v>b</v></value></DefaultList>"",json);output=mapper.readValue(json,DefaultList.class);assertNotNull(output.value);assertEquals(2,output.value.length);}"
"com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrappingWithEmptyLists",0,"public void testDefaultWrappingWithEmptyLists()throws Exception {XmlMapper mapper=new XmlMapper();String json=""<DefaultList><value><value></value></value></DefaultList>"";DefaultList output=mapper.readValue(json,DefaultList.class);assertNotNull(output.value);assertEquals(1,output.value.length);JacksonXmlModule module=new JacksonXmlModule();module.setDefaultUseWrapper(false);mapper=new XmlMapper(module);json=""<DefaultList><value></value></DefaultList>"";output=mapper.readValue(json,DefaultList.class);assertNotNull(output.value);assertEquals(1,output.value.length);}"
"com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testOptionalsWithMissingType",0,"public void testOptionalsWithMissingType()throws Exception {XmlMapper mapper=new XmlMapper();Optionals ob=mapper.readValue(""<MultiOptional><optional>123-456-7890</optional></MultiOptional>"",Optionals.class);assertNotNull(ob);assertNotNull(ob.optional);assertEquals(1,ob.optional.size());Optional opt=ob.optional.get(0);assertEquals(""123-456-7890"",opt.number);assertEquals(""NOT SET"",opt.type);}"
"com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces.testRootNamespace",0,"public void testRootNamespace()throws Exception {Person person=new Person();person.setName(""hello"");XmlMapper xmlMapper=new XmlMapper();String xml=xmlMapper.writeValueAsString(person);final String PREFIX=""<person xmlns="";if (!xml.startsWith(PREFIX)){fail(""Expected XML to begin with '"" + PREFIX + ""',instead got: ""+ xml);}}"
"com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.testSimpleCollectionDeserWithForwardRefs",0,"public void testSimpleCollectionDeserWithForwardRefs()throws Exception {IdWrapper result=MAPPER.readValue(""<IdWrapper><node><value><value>7</value></value><next><node>1</node></next><id>1</id></node></IdWrapper>"",IdWrapper.class);assertEquals(7,(int)result.node.value.get(0));assertSame(result.node,result.node.next.node);}"
"com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testParentListRoundtrip",0,"public void testParentListRoundtrip()throws Exception {Parents root=new Parents();Parent parent1=new Parent(""a"",""First"");root.parent.add(parent1);parent1.prop.add(new Prop(""width"",""13""));parent1.prop.add(new Prop(""height"",""10""));Parent parent2=new Parent(""b"",""Second"");parent2.prop.add(new Prop(""x"",""1""));parent2.prop.add(new Prop(""y"",""2""));root.parent.add(parent2);String xml=MAPPER.writeValueAsString(root);assertNotNull(xml);Parents result=MAPPER.readValue(xml,Parents.class);assertNotNull(result.parent);assertEquals(2,result.parent.size());Parent p2=result.parent.get(1);assertNotNull(p2);assertEquals(""b"",p2.name);assertEquals(""Second"",p2.description);assertEquals(2,p2.prop.size());Prop prop2=p2.prop.get(1);assertNotNull(prop2);assertEquals(""2"",prop2.value);}"
"com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testListWithAttrOnlyValues",0,"public void testListWithAttrOnlyValues()throws Exception {PointContainer obj=new PointContainer();obj.points=new ArrayList<Point>();obj.points.add(new Point(1,2));obj.points.add(new Point(3,4));obj.points.add(new Point(5,6));String xml=MAPPER.writeValueAsString(obj);PointContainer converted=MAPPER.readValue(xml,PointContainer.class);assertEquals(3,converted.points.size());assertNotNull(converted.points.get(0));assertNotNull(converted.points.get(1));assertNotNull(converted.points.get(2));assertEquals(2,converted.points.get(0).y);assertEquals(4,converted.points.get(1).y);assertEquals(6,converted.points.get(2).y);}"
"com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testOptionals",0,"public void testOptionals()throws Exception {Optionals ob=MAPPER.readValue(""<MultiOptional><optional type='work'>123-456-7890</optional></MultiOptional>"",Optionals.class);assertNotNull(ob);assertNotNull(ob.optional);assertEquals(1,ob.optional.size());Optional opt=ob.optional.get(0);assertEquals(""123-456-7890"",opt.number);assertEquals(""work"",opt.type);}"
"com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.testSimpleWrappedList",0,"public void testSimpleWrappedList()throws IOException {String xml=MAPPER.writeValueAsString(new ListBean(1,2,3));xml=removeSjsxpNamespace(xml);assertEquals(""<ListBean><values><values>1</values><values>2</values><values>3</values></values></ListBean>"",xml);}"
"com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.testStringList",0,"public void testStringList()throws IOException {StringListBean list=new StringListBean(""a"",""b"",""c"");String xml=MAPPER.writeValueAsString(list);xml=removeSjsxpNamespace(xml);assertEquals(""<StringListBean><stringList>"" + ""<strings><text>a</text></strings>"" + ""<strings><text>b</text></strings>""+ ""<strings><text>c</text></strings>""+ ""</stringList></StringListBean>"",xml);}"
"com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.testIssue42",0,"public void testIssue42()throws Exception {XmlMapper xmlMapper=new XmlMapper();SimpleModule m=new SimpleModule(""module"",new Version(1,0,0,null,null,null));m.addSerializer(Item.class,new ItemSerializer());m.addDeserializer(Item.class,new ItemDeserializer());xmlMapper.registerModule(m);Item value=new Item(""itemName"",new Foo(""fooName""));String xml=xmlMapper.writeValueAsString(value);Item result=xmlMapper.readValue(xml,Item.class);assertNotNull(result);assertEquals(""itemName"",result.name);assertNotNull(result.obj);assertEquals(""fooName"",result.obj.name);}"
"com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest.testEmpty",0,"public void testEmpty()throws Exception {String xml=MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(new Data(""Foobar""));final Data data=MAPPER.readValue(xml,Data.class);assertNotNull(data);}"
"com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.testNestedUnwrappedLists180",0,"public void testNestedUnwrappedLists180()throws Exception {String xml=""<Records>\n"" + ""<records></records>\n"" + ""  <records>\n""+ ""   <fields name='b'/>\n""+ ""  </records>\n""+ ""</Records>\n"";Records result=MAPPER.readValue(xml,Records.class);assertNotNull(result.records);assertEquals(2,result.records.size());assertNotNull(result.records.get(1));assertEquals(1,result.records.get(1).fields.size());assertEquals(""b"",result.records.get(1).fields.get(0).name);assertNotNull(result.records.get(0));}"
"com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration.testXml10Declaration",0,"public void testXml10Declaration()throws Exception {XmlMapper mapper=new XmlMapper();mapper.configure(ToXmlGenerator.Feature.WRITE_XML_DECLARATION,true);String xml=mapper.writeValueAsString(new StringBean(""123""));assertEquals(xml,""<?xml version='1.0' encoding='UTF-8'?><StringBean><text>123</text></StringBean>"");}"
"com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration.testXml11Declaration",0,"public void testXml11Declaration()throws Exception {XmlMapper mapper=new XmlMapper();mapper.configure(ToXmlGenerator.Feature.WRITE_XML_1_1,true);String xml=mapper.writeValueAsString(new StringBean(""abcd""));assertEquals(xml,""<?xml version='1.1' encoding='UTF-8'?><StringBean><text>abcd</text></StringBean>"");}"
"com.fasterxml.jackson.dataformat.xml.deser.TestEnums.testEnum",0,"public void testEnum()throws Exception {String xml=MAPPER.writeValueAsString(new EnumBean(TestEnum.B));EnumBean result=MAPPER.readValue(xml,EnumBean.class);assertNotNull(result);assertEquals(TestEnum.B,result.value);}"
"com.fasterxml.jackson.dataformat.xml.stream.XmlTokenStreamTest.testSimple",0,"public void testSimple()throws Exception {String XML=""<root><leaf id='123'>abc</leaf></root>"";XMLStreamReader sr=XMLInputFactory.newInstance().createXMLStreamReader(new StringReader(XML));sr.nextTag();XmlTokenStream tokens=new XmlTokenStream(sr,XML);assertEquals(XmlTokenStream.XML_START_ELEMENT,tokens.getCurrentToken());assertEquals(""root"",tokens.getLocalName());assertEquals(XmlTokenStream.XML_START_ELEMENT,tokens.next());assertEquals(""leaf"",tokens.getLocalName());assertEquals(XmlTokenStream.XML_ATTRIBUTE_NAME,tokens.next());assertEquals(""id"",tokens.getLocalName());assertEquals(XmlTokenStream.XML_ATTRIBUTE_VALUE,tokens.next());assertEquals(""123"",tokens.getText());assertEquals(XmlTokenStream.XML_TEXT,tokens.next());assertEquals(""abc"",tokens.getText());assertEquals(XmlTokenStream.XML_END_ELEMENT,tokens.next());assertEquals(XmlTokenStream.XML_END_ELEMENT,tokens.next());assertEquals(XmlTokenStream.XML_END,tokens.next());}"
"com.fasterxml.jackson.dataformat.xml.stream.XmlTokenStreamTest.testRootAttributes",0,"public void testRootAttributes()throws Exception {String XML=""<root id='x' />"";XMLStreamReader sr=XMLInputFactory.newInstance().createXMLStreamReader(new StringReader(XML));sr.nextTag();XmlTokenStream tokens=new XmlTokenStream(sr,XML);assertEquals(XmlTokenStream.XML_START_ELEMENT,tokens.getCurrentToken());assertEquals(""root"",tokens.getLocalName());assertEquals(XmlTokenStream.XML_ATTRIBUTE_NAME,tokens.next());assertEquals(""id"",tokens.getLocalName());assertEquals(XmlTokenStream.XML_ATTRIBUTE_VALUE,tokens.next());assertEquals(""x"",tokens.getText());assertEquals(XmlTokenStream.XML_END_ELEMENT,tokens.next());assertEquals(XmlTokenStream.XML_END,tokens.next());}"
"com.fasterxml.jackson.dataformat.xml.stream.XmlTokenStreamTest.testEmptyTags",0,"public void testEmptyTags()throws Exception {String XML=""<root><leaf /></root>"";XMLStreamReader sr=XMLInputFactory.newInstance().createXMLStreamReader(new StringReader(XML));sr.nextTag();XmlTokenStream tokens=new XmlTokenStream(sr,XML);assertEquals(XmlTokenStream.XML_START_ELEMENT,tokens.getCurrentToken());assertEquals(""root"",tokens.getLocalName());assertEquals(XmlTokenStream.XML_START_ELEMENT,tokens.next());assertEquals(""leaf"",tokens.getLocalName());assertEquals(XmlTokenStream.XML_END_ELEMENT,tokens.next());assertEquals(XmlTokenStream.XML_END_ELEMENT,tokens.next());assertEquals(XmlTokenStream.XML_END,tokens.next());}"
"com.fasterxml.jackson.dataformat.xml.stream.XmlTokenStreamTest.testNested",0,"public void testNested()throws Exception {String XML=""<root><a><b><c>abc</c></b></a></root>"";XMLStreamReader sr=XMLInputFactory.newInstance().createXMLStreamReader(new StringReader(XML));sr.nextTag();XmlTokenStream tokens=new XmlTokenStream(sr,XML);assertEquals(XmlTokenStream.XML_START_ELEMENT,tokens.getCurrentToken());assertEquals(""root"",tokens.getLocalName());assertEquals(XmlTokenStream.XML_START_ELEMENT,tokens.next());assertEquals(""a"",tokens.getLocalName());assertEquals(XmlTokenStream.XML_START_ELEMENT,tokens.next());assertEquals(""b"",tokens.getLocalName());assertEquals(XmlTokenStream.XML_START_ELEMENT,tokens.next());assertEquals(""c"",tokens.getLocalName());assertEquals(XmlTokenStream.XML_TEXT,tokens.next());assertEquals(""abc"",tokens.getText());assertEquals(XmlTokenStream.XML_END_ELEMENT,tokens.next());assertEquals(XmlTokenStream.XML_END_ELEMENT,tokens.next());assertEquals(XmlTokenStream.XML_END_ELEMENT,tokens.next());assertEquals(XmlTokenStream.XML_END_ELEMENT,tokens.next());assertEquals(XmlTokenStream.XML_END,tokens.next());}"
"com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.testRoundtrip",0,"public void testRoundtrip()throws Exception {MediaItem.Content content=new MediaItem.Content();content.setTitle(""content"");content.addPerson(""William"");content.addPerson(""Robert"");MediaItem input=new MediaItem(content);input.addPhoto(new MediaItem.Photo(""http://a"",""title1"",200,100,MediaItem.Size.LARGE));input.addPhoto(new MediaItem.Photo(""http://b"",""title2"",640,480,MediaItem.Size.SMALL));ObjectWriter w=MAPPER.writerFor(MediaItem.class);_verifyRoundtrip(w.writeValueAsString(input),input);_verifyRoundtrip(w.withDefaultPrettyPrinter().writeValueAsString(input),input);}"
"com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassProperty",0,"public void testAsClassProperty()throws Exception {String xml=_xmlMapper.writeValueAsString(new SubTypeWithClassProperty(""Foobar""));final String exp=""<SubTypeWithClassProperty _class=\""com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest..SubTypeWithClassProperty\"">"" + ""<name>Foobar</name></SubTypeWithClassProperty>"";assertEquals(exp,xml);Object result=_xmlMapper.readValue(xml,BaseTypeWithClassProperty.class);assertNotNull(result);assertEquals(SubTypeWithClassProperty.class,result.getClass());assertEquals(""Foobar"",((SubTypeWithClassProperty)result).name);}"
"com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassObject",0,"public void testAsClassObject()throws Exception {String xml=_xmlMapper.writeValueAsString(new SubTypeWithClassObject(""Foobar""));Object result=_xmlMapper.readValue(xml,BaseTypeWithClassObject.class);assertNotNull(result);assertEquals(SubTypeWithClassObject.class,result.getClass());assertEquals(""Foobar"",((SubTypeWithClassObject)result).name);}"
"com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsPropertyWithObjectId",0,"/** * Test for [dataformat-xml#81]*/public void testAsPropertyWithObjectId()throws Exception {List<TypeWithClassPropertyAndObjectId> data=new ArrayList<PolymorphicTypesTest.TypeWithClassPropertyAndObjectId>();TypeWithClassPropertyAndObjectId object=new TypeWithClassPropertyAndObjectId(""Foobar"");data.add(object);data.add(object);String xml=_xmlMapper.writeValueAsString(new Wrapper(data));Wrapper result=_xmlMapper.readValue(xml,Wrapper.class);assertNotNull(result);assertSame(result.data.get(0),result.data.get(1));assertEquals(""Foobar"",result.data.get(0).id);}"
"com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute.testEmptyStringFromElemAndAttr",0,"public void testEmptyStringFromElemAndAttr()throws Exception {final XmlMapper MAPPER=new XmlMapper();String xml=""<response><wrapper><item id=\""1\""><a>x</a><b>y</b></item><item id=\""2\""><a>y</a><b>x</b></item></wrapper></response>"";Response res=MAPPER.readValue(xml,Response.class);assertNotNull(res.items);assertNotNull(res.items.get(0));assertNotNull(res.items.get(0).id);}"
"com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.testSimpleRead",0,"public void testSimpleRead()throws Exception {final String XML=""<?xml version='1.0'?><root>"" + ""<NameBean age=\""13\""><first>Grizabella</first><last>Glamour</last></NameBean>"" + ""<NameBean age=\""17\""><first>Growl</first><last>Tiger</last></NameBean></root>"";XMLStreamReader sr=MAPPER.getFactory().getXMLInputFactory().createXMLStreamReader(new StringReader(XML));assertEquals(sr.next(),XMLStreamConstants.START_ELEMENT);assertEquals(""root"",sr.getLocalName());assertEquals(sr.next(),XMLStreamConstants.START_ELEMENT);assertEquals(""NameBean"",sr.getLocalName());NameBean bean1=MAPPER.readValue(sr,NameBean.class);assertNotNull(bean1);assertEquals(sr.getEventType(),XMLStreamConstants.END_ELEMENT);assertEquals(""NameBean"",sr.getLocalName());assertEquals(sr.next(),XMLStreamConstants.START_ELEMENT);assertEquals(""NameBean"",sr.getLocalName());NameBean bean2=MAPPER.readValue(sr,NameBean.class);assertNotNull(bean2);assertEquals(sr.getEventType(),XMLStreamConstants.END_ELEMENT);assertEquals(""NameBean"",sr.getLocalName());assertEquals(sr.next(),XMLStreamConstants.END_ELEMENT);assertEquals(""root"",sr.getLocalName());sr.close();}"
"com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue7",0,"public void testIssue7()throws Exception {Foo foo=new Foo();foo.restrictedFooProperty=""test"";Bar bar1=new Bar();bar1.restrictedBarProperty=10;Bar bar2=new Bar();bar2.restrictedBarProperty=11;foo.bars=new Bar[]{bar1,bar2};ObjectMapper xmlMapper=new XmlMapper();xmlMapper.configure(MapperFeature.AUTO_DETECT_FIELDS,false);xmlMapper.configure(MapperFeature.AUTO_DETECT_GETTERS,false);xmlMapper.configure(MapperFeature.AUTO_DETECT_IS_GETTERS,false);xmlMapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION,false);String xml=xmlMapper.writerWithView(RestrictedView.class).writeValueAsString(foo);Foo result=xmlMapper.readValue(xml,Foo.class);assertEquals(""test"",result.restrictedFooProperty);assertNotNull(result.bars);assertEquals(2,result.bars.length);assertEquals(10,result.bars[0].restrictedBarProperty);assertEquals(11,result.bars[1].restrictedBarProperty);}"
"com.fasterxml.jackson.dataformat.xml.deser.TestViews.testNullSuppression",0,"public void testNullSuppression()throws Exception {String xml=_xmlMapper.writeValueAsString(new NonNullBean());assertEquals(""<NonNullBean><name>Bob</name></NonNullBean>"",xml);}"
"com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue44",0,"public void testIssue44()throws IOException {String exp=""<Issue44Bean first=\""abc\""><second>13</second></Issue44Bean>"";Issue44Bean bean=new Issue44Bean();FilterProvider prov=new SimpleFilterProvider().addFilter(""filter44"",SimpleBeanPropertyFilter.serializeAllExcept(""filterMe""));ObjectWriter writer=_xmlMapper.writer(prov);assertEquals(exp,writer.writeValueAsString(bean));}"
"com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData.testTwoBinaryProps",0,"public void testTwoBinaryProps()throws Exception {final ObjectMapper jsonMapper=new ObjectMapper();String BIN1=jsonMapper.convertValue(""Hello"".getBytes(""UTF-8""),String.class);String BIN2=jsonMapper.convertValue(""world!!"".getBytes(""UTF-8""),String.class);String xml=""<TwoData>"" + ""<data1><bytes>"" + BIN1 + ""</bytes></data1>""+ ""<data2><bytes>""+ BIN2+ ""</bytes></data2>""+ ""</TwoData>"";TwoData two=new XmlMapper().readValue(xml,TwoData.class);assertEquals(""Hello"",new String(two.data1.bytes,""UTF-8""));assertEquals(""world!!"",new String(two.data2.bytes,""UTF-8""));}"
"com.fasterxml.jackson.dataformat.xml.misc.NodeTest.testMixed",0,"public void testMixed()throws Exception {final XmlMapper xmlMapper=new XmlMapper();final ObjectMapper jsonMapper=new ObjectMapper();JsonNode root=xmlMapper.readTree(""<root>first<child>4</child>second</root>"");String json=jsonMapper.writeValueAsString(root);System.out.println(""-> "" + json);}"
"com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54",0,"public void testIssue54()throws Exception {XmlMapper xmlMapper=new XmlMapper();xmlMapper.enable(ToXmlGenerator.Feature.WRITE_XML_DECLARATION);StringWriter sw=new StringWriter();ToXmlGenerator generator=(ToXmlGenerator)xmlMapper.getFactory().createGenerator(sw);generator.initGenerator();generator.setNextName(new QName(""items""));generator.writeStartObject();ArrayList<Value> values=new ArrayList<Value>();values.add(new Value(13));values.add(new Value(456));for(Value value : values){generator.writeFieldName(""foo"");generator.setNextName(new QName(""item""));generator.writeObject(value);}generator.writeEndObject();generator.close();String xml=sw.toString();assertTrue(xml.startsWith(""<?xml version""));int ix=xml.indexOf(""?>"");xml=xml.substring(ix + 2).trim();assertEquals(""<items><item><num>13</num></item><item><num>456</num></item></items>"",xml);}"
"com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test.testListDeser",0,"public void testListDeser()throws Exception {ObjectMapper mapper=new XmlMapper();final String XML=""<TestList>\n"" + ""    <items>\n"" + ""        <item name='Item1'/>\n""+ ""        <item name='Item2'> </item>\n""+ ""        <item name='Item3'/>\n""+ ""    </items>\n""+ ""</TestList>"";TestList testList=mapper.readValue(XML,TestList.class);assertNotNull(testList);assertNotNull(testList.items);assertEquals(3,testList.items.size());}"
"com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testSerializeAsText",0,"public void testSerializeAsText()throws IOException {String xml=MAPPER.writeValueAsString(new Simple());assertEquals(""<Simple a=\""13\"">something</Simple>"",xml);xml=MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(new Simple());assertEquals(""<Simple a=\""13\"">something</Simple>\n"",xml);}"
"com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testDeserializeAsText",0,"public void testDeserializeAsText()throws IOException {Simple result=MAPPER.readValue(""<Simple a='99'>else</Simple>"",Simple.class);assertEquals(99,result.a);assertEquals(""else"",result.text);}"
"com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue24",0,"public void testIssue24()throws Exception {final String TEXT=""+/null/this is a long string"";final String XML=""<main>\n"" + ""<com.test.stack name='stack1'>\n"" + ""<com.test.stack.slot height='0' id='0' name='slot0' width='0'>"" + TEXT + ""</com.test.stack.slot>\n""+ ""</com.test.stack>\n""+ ""</main>"";Main main=MAPPER.readValue(XML,Main.class);assertNotNull(main.stack);assertNotNull(main.stack.slot);assertEquals(TEXT,main.stack.slot.value);}"
"com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testAlternateTextElementName",0,"public void testAlternateTextElementName()throws IOException {final String XML=""<JAXBStyle>foo</JAXBStyle>"";try {MAPPER.readValue(XML,JAXBStyle.class);fail(""Should have failed"");}catch(JsonProcessingException e){verifyException(e,""Unrecognized"");}JacksonXmlModule module=new JacksonXmlModule();module.setXMLTextElementName(""value"");XmlMapper mapper=new XmlMapper(module);JAXBStyle pojo=mapper.readValue(XML,JAXBStyle.class);assertEquals(""foo"",pojo.value);}"
"com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue66",0,"public void testIssue66()throws Exception {JacksonXmlModule module=new JacksonXmlModule();module.setDefaultUseWrapper(false);XmlMapper mapper=new XmlMapper(module);final String XML=""<Issue66Bean id=\""id\"">text</Issue66Bean>"";Issue66Bean node=mapper.readValue(XML,Issue66Bean.class);assertEquals(""id"",node.id);assertEquals(""text"",node.textValue);String json=mapper.writeValueAsString(node);assertEquals(XML,json);}"
"com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testTextOnlyPojo",0,"public void testTextOnlyPojo()throws Exception {XmlMapper mapper=xmlMapper(true);TextOnlyWrapper input=new TextOnlyWrapper(""foo"",""bar"");String xml=mapper.writeValueAsString(input);assertEquals(""<TextOnlyWrapper><a>foo</a><b>bar</b></TextOnlyWrapper>"",xml);TextOnlyWrapper result=mapper.readValue(xml,TextOnlyWrapper.class);assertNotNull(result);assertEquals(""foo"",result.a.textValue);assertEquals(""bar"",result.b.textValue);}"
"com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering.testOrdering",0,"public void testOrdering()throws Exception {XmlMapper xmlMapper=new XmlMapper();String xml=xmlMapper.writeValueAsString(new Bean91(""1"",""2"",""3""));assertEquals(""<Bean91 b=\""2\""><a>1</a><c>3</c></Bean91>"",xml);}"
"com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.testRenamedRootItem",0,"public void testRenamedRootItem()throws Exception {XmlMapper xmlMapper=new XmlMapper();String xml=xmlMapper.writer().withRootName(""Shazam"").writeValueAsString(new SampleResource(123,""Foo"",""Barfy!"")).trim();xml=removeSjsxpNamespace(xml);assertEquals(""<Shazam><id>123</id><name>Foo</name><description>Barfy!</description></Shazam>"",xml);}"
"com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.testListSerialization",0,"public void testListSerialization()throws Exception {_testListSerialization(true);_testListSerialization(false);}"
"com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.testArraySerialization",0,"public void testArraySerialization()throws Exception {_testArraySerialization(true);_testArraySerialization(false);}"
"com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178",0,"public void testPolyIdList178()throws Exception {final String XML=""<company>\n"" + ""<computers>\n"" + ""    <computers>\n""+ ""      <desktop id='computer-1'>\n""+ ""        <location>Bangkok</location>\n""+ ""      </desktop>\n""+ ""    </computers>\n""+ ""    <computers>\n""+ ""      <desktop id='computer-2'>\n""+ ""        <location>Pattaya</location>\n""+ ""      </desktop>\n""+ ""    </computers>\n""+ ""    <computers>\n""+ ""      <laptop id='computer-3'>\n""+ ""        <vendor>Apple</vendor>\n""+ ""      </laptop>\n""+ ""    </computers>\n""+ ""  </computers>\n""+ ""  <employees>\n""+ ""    <employee id='emp-1' name='Robert Patrick'>\n""+ ""      <computer>computer-3</computer>\n""+ ""    </employee>\n""+ ""    <employee id='emp-2' name='Michael Smith'>\n""+ ""      <computer>computer-2</computer>\n""+ ""    </employee>\n""+ ""  </employees>\n""+ ""</company>\n"";XmlMapper mapper=new XmlMapper();XmlJaxbAnnotationIntrospector xmlIntr=new XmlJaxbAnnotationIntrospector(mapper.getTypeFactory());xmlIntr.setDefaultUseWrapper(false);AnnotationIntrospector intr=XmlAnnotationIntrospector.Pair.instance(xmlIntr,new JacksonAnnotationIntrospector());mapper.setAnnotationIntrospector(intr);Company result=mapper.readValue(XML,Company.class);assertNotNull(result);assertNotNull(result.employees);assertEquals(2,result.employees.size());Employee empl2=result.employees.get(1);Computer comp2=empl2.computer;assertEquals(DesktopComputer.class,comp2.getClass());assertEquals(""Pattaya"",((DesktopComputer)comp2).location);}"
"com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest.testCollection",0,"public void testCollection()throws Exception {final Values values=new XmlMapper().readValue(""<values type=\""array\"">"" + ""  <value><v>c</v></value>"" + ""  <value><v>d</v></value>""+ ""</values>"",Values.class);assertEquals(2,values.getValues().size(),2);assertEquals(""c"",values.getValues().get(0).getV());assertEquals(""d"",values.getValues().get(1).getV());assertEquals(""array"",values.getType());}"
"com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testSimplest",0,"public void testSimplest()throws Exception {assertEquals(""{\""leaf\"":\""abc\""}"",_readXmlWriteJson(""<root><leaf>abc</leaf></root>""));}"
"com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testSimpleWithEmpty",0,"public void testSimpleWithEmpty()throws Exception {assertEquals(""{\""leaf\"":null}"",_readXmlWriteJson(""<root><leaf /></root>""));}"
"com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testSimpleNested",0,"public void testSimpleNested()throws Exception {assertEquals(""{\""a\"":{\""b\"":{\""c\"":\""xyz\""}}}"",_readXmlWriteJson(""<root><a><b><c>xyz</c></b></a></root>""));}"
"com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testRoundTripWithSample",0,"/** * Unit test that verifies that we can write sample document from JSON specification as XML,and read it back in ""as JSON"",with expected transformation.*/public void testRoundTripWithSample()throws Exception {JsonNode root=new ObjectMapper().readTree(SAMPLE_DOC_JSON_SPEC);String xml=_xmlMapper.writeValueAsString(root);JsonParser p=_xmlMapper.getFactory().createParser(xml);assertToken(JsonToken.START_OBJECT,p.nextToken());assertToken(JsonToken.FIELD_NAME,p.nextToken());verifyFieldName(p,""Image"");assertToken(JsonToken.START_OBJECT,p.nextToken());assertToken(JsonToken.FIELD_NAME,p.nextToken());verifyFieldName(p,""Width"");assertToken(JsonToken.VALUE_STRING,p.nextToken());assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_WIDTH),p.getText());assertToken(JsonToken.FIELD_NAME,p.nextToken());verifyFieldName(p,""Height"");assertToken(JsonToken.VALUE_STRING,p.nextToken());assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_HEIGHT),p.getText());assertToken(JsonToken.FIELD_NAME,p.nextToken());verifyFieldName(p,""Title"");assertToken(JsonToken.VALUE_STRING,p.nextToken());assertEquals(SAMPLE_SPEC_VALUE_TITLE,getAndVerifyText(p));assertToken(JsonToken.FIELD_NAME,p.nextToken());verifyFieldName(p,""Thumbnail"");assertToken(JsonToken.START_OBJECT,p.nextToken());assertToken(JsonToken.FIELD_NAME,p.nextToken());verifyFieldName(p,""Url"");assertToken(JsonToken.VALUE_STRING,p.nextToken());assertEquals(SAMPLE_SPEC_VALUE_TN_URL,getAndVerifyText(p));assertToken(JsonToken.FIELD_NAME,p.nextToken());verifyFieldName(p,""Height"");assertToken(JsonToken.VALUE_STRING,p.nextToken());assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_TN_HEIGHT),p.getText());assertToken(JsonToken.FIELD_NAME,p.nextToken());verifyFieldName(p,""Width"");assertToken(JsonToken.VALUE_STRING,p.nextToken());assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH,getAndVerifyText(p));assertToken(JsonToken.END_OBJECT,p.nextToken());assertToken(JsonToken.FIELD_NAME,p.nextToken());verifyFieldName(p,""IDs"");assertToken(JsonToken.VALUE_STRING,p.nextToken());assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_TN_ID1),getAndVerifyText(p));assertToken(JsonToken.FIELD_NAME,p.nextToken());verifyFieldName(p,""IDs"");assertToken(JsonToken.VALUE_STRING,p.nextToken());assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_TN_ID2),getAndVerifyText(p));assertToken(JsonToken.FIELD_NAME,p.nextToken());verifyFieldName(p,""IDs"");assertToken(JsonToken.VALUE_STRING,p.nextToken());assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_TN_ID3),getAndVerifyText(p));assertToken(JsonToken.FIELD_NAME,p.nextToken());verifyFieldName(p,""IDs"");assertToken(JsonToken.VALUE_STRING,p.nextToken());assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_TN_ID4),getAndVerifyText(p));assertToken(JsonToken.END_OBJECT,p.nextToken());assertToken(JsonToken.END_OBJECT,p.nextToken());p.close();}"
"com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray",0,"/** * Test to ensure functionality used to force an element to be reported as ""JSON"" Array,instead of default Object.*/public void testForceElementAsArray()throws Exception {final String XML=""<array><elem>value</elem><elem><property>123</property></elem><elem>1</elem></array>"";FromXmlParser xp=(FromXmlParser)_xmlFactory.createParser(new StringReader(XML));assertToken(JsonToken.START_OBJECT,xp.nextToken());assertToken(JsonToken.FIELD_NAME,xp.nextToken());assertEquals(""elem"",xp.getCurrentName());assertToken(JsonToken.VALUE_STRING,xp.nextToken());assertEquals(""value"",xp.getText());assertToken(JsonToken.FIELD_NAME,xp.nextToken());assertEquals(""elem"",xp.getCurrentName());assertToken(JsonToken.START_OBJECT,xp.nextToken());assertToken(JsonToken.FIELD_NAME,xp.nextToken());assertEquals(""property"",xp.getCurrentName());assertToken(JsonToken.VALUE_STRING,xp.nextToken());assertEquals(""123"",xp.getText());assertToken(JsonToken.END_OBJECT,xp.nextToken());assertToken(JsonToken.FIELD_NAME,xp.nextToken());assertEquals(""elem"",xp.getCurrentName());assertToken(JsonToken.VALUE_STRING,xp.nextToken());assertEquals(""1"",xp.getText());assertToken(JsonToken.END_OBJECT,xp.nextToken());xp.close();xp=(FromXmlParser)_xmlFactory.createParser(new StringReader(XML));assertTrue(xp.getParsingContext().inRoot());assertToken(JsonToken.START_OBJECT,xp.nextToken());assertTrue(xp.getParsingContext().inObject());assertTrue(""Should 'convert' START_OBJECT to START_ARRAY"",xp.isExpectedStartArrayToken());assertToken(JsonToken.START_ARRAY,xp.getCurrentToken());assertTrue(xp.getParsingContext().inArray());assertToken(JsonToken.VALUE_STRING,xp.nextToken());assertTrue(xp.getParsingContext().inArray());assertEquals(""value"",xp.getText());assertToken(JsonToken.START_OBJECT,xp.nextToken());assertTrue(xp.getParsingContext().inObject());assertToken(JsonToken.FIELD_NAME,xp.nextToken());assertEquals(""property"",xp.getCurrentName());assertToken(JsonToken.VALUE_STRING,xp.nextToken());assertEquals(""123"",xp.getText());StringWriter w=new StringWriter();assertEquals(3,xp.getText(w));assertEquals(""123"",w.toString());assertTrue(xp.getParsingContext().inObject());assertToken(JsonToken.END_OBJECT,xp.nextToken());assertTrue(xp.getParsingContext().inArray());assertToken(JsonToken.VALUE_STRING,xp.nextToken());assertTrue(xp.getParsingContext().inArray());assertEquals(""1"",xp.getText());assertToken(JsonToken.END_ARRAY,xp.nextToken());assertTrue(xp.getParsingContext().inRoot());xp.close();}"
"com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testXmlAttributes",0,"public void testXmlAttributes()throws Exception {final String XML=""<data max=\""7\"" offset=\""9\""/>"";FromXmlParser xp=(FromXmlParser)_xmlFactory.createParser(new StringReader(XML));assertToken(JsonToken.START_OBJECT,xp.nextToken());assertToken(JsonToken.FIELD_NAME,xp.nextToken());assertEquals(""max"",xp.getCurrentName());assertToken(JsonToken.VALUE_STRING,xp.nextToken());assertEquals(""7"",xp.getText());assertToken(JsonToken.FIELD_NAME,xp.nextToken());assertEquals(""offset"",xp.getCurrentName());StringWriter w=new StringWriter();assertEquals(6,xp.getText(w));assertEquals(""offset"",w.toString());assertToken(JsonToken.VALUE_STRING,xp.nextToken());assertEquals(""9"",xp.getText());w=new StringWriter();assertEquals(1,xp.getText(w));assertEquals(""9"",w.toString());assertToken(JsonToken.END_OBJECT,xp.nextToken());xp.close();}"
"com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testSimpleUnwrappingRoundtrip",0,"/** * Simple test to verify that explicit schema mapping works fine with unwrapped entities*/public void testSimpleUnwrappingRoundtrip()throws Exception {final String XML=""<Unwrapping><name>Joe</name><loc.x>15</loc.x><loc.y>27</loc.y></Unwrapping>"";ObjectMapper mapper=xmlMapper(false);Unwrapping wrapper=mapper.readerFor(Unwrapping.class).readValue(XML);assertNotNull(wrapper);assertNotNull(wrapper.location);assertEquals(15,wrapper.location.x);assertEquals(27,wrapper.location.y);assertEquals(XML,mapper.writerFor(Unwrapping.class).writeValueAsString(wrapper));}"
"com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingWithAttribute",0,"public void testUnwrappingWithAttribute()throws Exception {final String XML=""<UnwrappingWithAttributes name=\""Joe\"" loc.x=\""15\"" loc.y=\""27\""/>"";ObjectMapper mapper=xmlMapper(false);UnwrappingWithAttributes wrapper=mapper.readerFor(UnwrappingWithAttributes.class).readValue(XML);assertNotNull(wrapper);assertNotNull(wrapper.location);assertEquals(15,wrapper.location.x);assertEquals(27,wrapper.location.y);assertEquals(XML,mapper.writerFor(UnwrappingWithAttributes.class).writeValueAsString(wrapper));}"
"com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingSubWithAttribute",0,"public void testUnwrappingSubWithAttribute()throws Exception {final String XML=""<UnwrappingSubWithAttributes name=\""Joe\"" loc.x=\""15\""><loc.y>27</loc.y></UnwrappingSubWithAttributes>"";ObjectMapper mapper=xmlMapper(false);UnwrappingSubWithAttributes wrapper=mapper.readerFor(UnwrappingSubWithAttributes.class).readValue(XML);assertNotNull(wrapper);assertNotNull(wrapper.location);assertEquals(15,wrapper.location.x);assertEquals(27,wrapper.location.y);assertEquals(XML,mapper.writerFor(UnwrappingSubWithAttributes.class).writeValueAsString(wrapper));}"
"com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testNullXform",0,"public void testNullXform()throws Exception {_testNullXform(xmlMapper(true));_testNullXform(xmlMapper(false));}"
"com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testArrayIdentityTransforms",0,"/** * Tests to verify that primitive number arrays round-trip correctly,i.e. type -> type gives equal (although not necessarily same)output*/public void testArrayIdentityTransforms()throws Exception {_testArrayIdentityTransforms(xmlMapper(true));_testArrayIdentityTransforms(xmlMapper(false));}"
"com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testByteArrayFrom",0,"public void testByteArrayFrom()throws Exception {_testByteArrayFrom(xmlMapper(true));_testByteArrayFrom(xmlMapper(false));}"
"com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testShortArrayToX",0,"public void testShortArrayToX()throws Exception {final XmlMapper mapper=new XmlMapper();short[]data=shorts();verifyShortArrayConversion(mapper,data,byte[].class);verifyShortArrayConversion(mapper,data,int[].class);verifyShortArrayConversion(mapper,data,long[].class);}"
"com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testIntArrayToX",0,"public void testIntArrayToX()throws Exception {final XmlMapper mapper=new XmlMapper();int[]data=ints();verifyIntArrayConversion(mapper,data,byte[].class);verifyIntArrayConversion(mapper,data,short[].class);verifyIntArrayConversion(mapper,data,long[].class);List<Number> expNums=_numberList(data,data.length);List<Integer> actNums=mapper.convertValue(data,new TypeReference<List<Integer>>(){});assertEquals(expNums,actNums);}"
"com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testLongArrayToX",0,"public void testLongArrayToX()throws Exception {final XmlMapper mapper=new XmlMapper();long[]data=longs();verifyLongArrayConversion(mapper,data,byte[].class);verifyLongArrayConversion(mapper,data,short[].class);verifyLongArrayConversion(mapper,data,int[].class);List<Number> expNums=_numberList(data,data.length);List<Long> actNums=mapper.convertValue(data,new TypeReference<List<Long>>(){});assertEquals(expNums,actNums);}"
"com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testListToIntArray",0,"public void testListToIntArray()throws Exception {_testListToIntArray(true);_testListToIntArray(false);}"
"com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testListAsProperty",0,"public void testListAsProperty()throws Exception {_testListAsProperty(true);_testListAsProperty(false);}"
"com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleStringBean",0,"public void testSimpleStringBean()throws Exception {StringWrapperBean input=new StringWrapperBean(""abc"");String xml=_xmlMapper.writeValueAsString(input);if (xml.indexOf('\n')< 0 || xml.indexOf(' ')< 0){fail(""No indentation: XML == "" + xml);}StringWrapperBean result=_xmlMapper.readValue(xml,StringWrapperBean.class);assertNotNull(result);assertEquals(""abc"",result.string.str);xml=_xmlMapper.writerWithDefaultPrettyPrinter().writeValueAsString(input);if (xml.indexOf('\n')< 0 || xml.indexOf(' ')< 0){fail(""No indentation: XML == "" + xml);}result=_xmlMapper.readValue(xml,StringWrapperBean.class);assertNotNull(result);assertEquals(""abc"",result.string.str);}"
"com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleIntBean",0,"public void testSimpleIntBean()throws Exception {String xml=_xmlMapper.writeValueAsString(new IntWrapperBean(42));if (xml.indexOf('\n')< 0 || xml.indexOf(' ')< 0){fail(""No indentation: XML == "" + xml);}IntWrapperBean result=_xmlMapper.readValue(xml,IntWrapperBean.class);assertNotNull(result);assertEquals(42,result.wrapped.i);}"
"com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleMap",0,"public void testSimpleMap()throws Exception {Map<String,String> map=new HashMap<String,String>();map.put(""a"",""b"");String xml=_xmlMapper.writeValueAsString(map);if (xml.indexOf('\n')< 0 || xml.indexOf(' ')< 0){fail(""No indentation: XML == "" + xml);}Map<?,?> result=_xmlMapper.readValue(xml,Map.class);assertNotNull(result);assertEquals(1,result.size());assertEquals(""b"",map.get(""a""));}"
"com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testWithAttr",0,"public void testWithAttr()throws Exception {String xml=_xmlMapper.writeValueAsString(new AttrBean());assertEquals(""<AttrBean count=\""3\""/>\n"",xml);String xml2=_xmlMapper.writeValueAsString(new AttrBean2());assertEquals(""<AttrBean2 count=\""3\"">\n  <value>14</value>\n</AttrBean2>\n"",xml2);}"
"com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testEmptyElem",0,"public void testEmptyElem()throws Exception {PojoFor123 simple=new PojoFor123(""foobar"");String xml=_xmlMapper.writeValueAsString(simple);assertEquals(""<PojoFor123 name=\""foobar\""/>\n"",xml);}"
"com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testMultiLevel172",0,"public void testMultiLevel172()throws Exception {Company root=new Company();root.employee.add(new Employee(""abc""));String xml=_xmlMapper.writer().with(ToXmlGenerator.Feature.WRITE_XML_DECLARATION).writeValueAsString(root);xml=aposToQuotes(xml);assertEquals(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n"" + ""<Company>\n"" + ""  <e>\n""+ ""    <employee>\n""+ ""      <id>abc</id>\n""+ ""      <type>FULL_TIME</type>\n""+ ""    </employee>\n""+ ""  </e>\n""+ ""</Company>\n"",xml);}"
"com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.testXmlFactory",0,"public void testXmlFactory()throws Exception {XmlFactory f=new XmlFactory();String origXml=""<root><a>text</a></root>"";assertEquals(origXml,_writeXml(f,false));byte[]frozen=jdkSerialize(f);XmlFactory f2=jdkDeserialize(frozen);assertNotNull(f2);assertEquals(origXml,_writeXml(f2,false));assertEquals(origXml,_writeXml(f2,true));}"
"com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.testMapper",0,"public void testMapper()throws IOException {XmlMapper mapper=new XmlMapper();final String EXP=""<MyPojo><x>2</x><y>3</y></MyPojo>"";final MyPojo p=new MyPojo(2,3);assertEquals(EXP,mapper.writeValueAsString(p));byte[]bytes=jdkSerialize(mapper);XmlMapper mapper2=jdkDeserialize(bytes);assertEquals(EXP,mapper2.writeValueAsString(p));MyPojo p2=mapper2.readValue(EXP,MyPojo.class);assertEquals(p.x,p2.x);assertEquals(p.y,p2.y);}"
"com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidXmlDecl",0,"public void testSimpleValidXmlDecl()throws Exception {XmlFactory f=new XmlFactory();DataFormatDetector detector=new DataFormatDetector(f);String XML=""<?xml version='1.0'?><root/>"";DataFormatMatcher matcher=detector.findFormat(new ByteArrayInputStream(XML.getBytes(""UTF-8"")));assertTrue(matcher.hasMatch());assertEquals(""XML"",matcher.getMatchedFormatName());assertSame(f,matcher.getMatch());assertEquals(MatchStrength.FULL_MATCH,matcher.getMatchStrength());JsonParser jp=matcher.createParserWithMatch();assertToken(JsonToken.START_OBJECT,jp.nextToken());jp.close();}"
"com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidRoot",0,"public void testSimpleValidRoot()throws Exception {XmlFactory f=new XmlFactory();DataFormatDetector detector=new DataFormatDetector(f);String XML=""<root/>"";DataFormatMatcher matcher=detector.findFormat(new ByteArrayInputStream(XML.getBytes(""UTF-8"")));assertTrue(matcher.hasMatch());assertEquals(""XML"",matcher.getMatchedFormatName());assertSame(f,matcher.getMatch());assertEquals(MatchStrength.SOLID_MATCH,matcher.getMatchStrength());JsonParser jp=matcher.createParserWithMatch();assertToken(JsonToken.START_OBJECT,jp.nextToken());jp.close();}"
"com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidDoctype",0,"public void testSimpleValidDoctype()throws Exception {XmlFactory f=new XmlFactory();DataFormatDetector detector=new DataFormatDetector(f);String XML=""<!DOCTYPE root[]>   <root />"";DataFormatMatcher matcher=detector.findFormat(new ByteArrayInputStream(XML.getBytes(""UTF-8"")));assertTrue(matcher.hasMatch());assertEquals(""XML"",matcher.getMatchedFormatName());assertSame(f,matcher.getMatch());assertEquals(MatchStrength.SOLID_MATCH,matcher.getMatchStrength());JsonParser jp=matcher.createParserWithMatch();assertToken(JsonToken.START_OBJECT,jp.nextToken());jp.close();}"
"com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidComment",0,"public void testSimpleValidComment()throws Exception {XmlFactory f=new XmlFactory();DataFormatDetector detector=new DataFormatDetector(f);String XML=""  <!-- comment -->  <root></root>"";DataFormatMatcher matcher=detector.findFormat(new ByteArrayInputStream(XML.getBytes(""UTF-8"")));assertTrue(matcher.hasMatch());assertEquals(""XML"",matcher.getMatchedFormatName());assertSame(f,matcher.getMatch());assertEquals(MatchStrength.SOLID_MATCH,matcher.getMatchStrength());JsonParser jp=matcher.createParserWithMatch();assertToken(JsonToken.START_OBJECT,jp.nextToken());jp.close();}"
"com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidPI",0,"public void testSimpleValidPI()throws Exception {XmlFactory f=new XmlFactory();DataFormatDetector detector=new DataFormatDetector(f);String XML=""<?target foo?><root />"";DataFormatMatcher matcher=detector.findFormat(new ByteArrayInputStream(XML.getBytes(""UTF-8"")));assertTrue(matcher.hasMatch());assertEquals(""XML"",matcher.getMatchedFormatName());assertSame(f,matcher.getMatch());assertEquals(MatchStrength.SOLID_MATCH,matcher.getMatchStrength());JsonParser jp=matcher.createParserWithMatch();assertToken(JsonToken.START_OBJECT,jp.nextToken());jp.close();}"
"com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleViaObjectReader",0,"public void testSimpleViaObjectReader()throws Exception {ObjectMapper mapper=new ObjectMapper();XmlMapper xmlMapper=new XmlMapper();ObjectReader detecting=mapper.readerFor(POJO.class);detecting=detecting.withFormatDetection(detecting,xmlMapper.readerFor(POJO.class));POJO pojo=detecting.readValue(utf8Bytes(""<POJO><y>3</y><x>1</x></POJO>""));assertNotNull(pojo);assertEquals(1,pojo.x);assertEquals(3,pojo.y);}"
"com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testListViaObjectReader",0,"public void testListViaObjectReader()throws Exception {ObjectMapper mapper=new ObjectMapper();XmlMapper xmlMapper=new XmlMapper();ListPOJO list=new ListPOJO();list.v.add(new POJO(1,2));list.v.add(new POJO(3,4));String xml=xmlMapper.writeValueAsString(list);ObjectReader detecting=mapper.readerFor(ListPOJO.class);ListPOJO resultList=detecting.withFormatDetection(detecting,xmlMapper.readerFor(ListPOJO.class)).readValue(utf8Bytes(xml));assertNotNull(resultList);assertEquals(2,resultList.v.size());}"
"com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleInvalid",0,"public void testSimpleInvalid()throws Exception {DataFormatDetector detector=new DataFormatDetector(new XmlFactory());final String NON_XML=""{\""foo\"":\""bar\""}"";DataFormatMatcher matcher=detector.findFormat(new ByteArrayInputStream(NON_XML.getBytes(""UTF-8"")));assertFalse(matcher.hasMatch());assertEquals(MatchStrength.INCONCLUSIVE,matcher.getMatchStrength());assertNull(matcher.createParserWithMatch());}"
"com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testOptionalsWithMissingType",0,"public void testOptionalsWithMissingType()throws Exception {Optionals ob=MAPPER.readValue(""<MultiOptional><optional>123-456-7890</optional></MultiOptional>"",Optionals.class);assertNotNull(ob);assertNotNull(ob.optional);assertEquals(1,ob.optional.size());Optional opt=ob.optional.get(0);assertEquals(""123-456-7890"",opt.number);assertEquals(""NOT SET"",opt.type);}"
"com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testWithTwoAttributes",0,"public void testWithTwoAttributes()throws Exception {final String EXP=""<root>"" + ""<unwrapped id=\""1\"" type=\""string\""/>"" + ""<unwrapped id=\""2\"" type=\""string\""/>""+ ""<name>test</name>""+ ""</root>"";Root rootOb=new Root();rootOb.unwrapped=Arrays.asList(new UnwrappedElement(""1"",""string""),new UnwrappedElement(""2"",""string""));rootOb.name=""test"";String xml=MAPPER.writeValueAsString(rootOb);assertEquals(EXP,xml);Root result=MAPPER.readValue(xml,Root.class);assertNotNull(result);assertEquals(rootOb.name,result.name);}"
